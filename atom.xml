<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YiluoTalk</title>
  
  <subtitle>享受每一天，Just Enjoy !</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yiluotalk.com/"/>
  <updated>2020-08-24T02:54:57.000Z</updated>
  <id>https://yiluotalk.com/</id>
  
  <author>
    <name>伊洛</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python5--异常处理</title>
    <link href="https://yiluotalk.com/2020/08/24/Python5--%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://yiluotalk.com/2020/08/24/Python5--%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2020-08-24T02:56:59.000Z</published>
    <updated>2020-08-24T02:54:57.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM2YjAxODdmNzM5M2Q1MmEucG5n?x-oss-process=image/format,png" alt=""></p><blockquote><p>本文首发自伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote><h5 id="1-异常处理"><a href="#1-异常处理" class="headerlink" title="1.异常处理"></a>1.异常处理</h5><ul><li>对于不符合预期的用户操作或数据输入，程序总会出现异常情况<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">&gt;&gt;&gt; file_path &#x3D; &#39;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;error.py&#39;</span><br><span class="line">&gt;&gt;&gt; f &#x3D; open(file_path)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">FileNotFoundError: [Errno 2] No such file or directory: &#39;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;error.py&#39;</span><br></pre></td></tr></table></figure><h5 id="2-Python-常用的异常类"><a href="#2-Python-常用的异常类" class="headerlink" title="2.Python 常用的异常类"></a>2.Python 常用的异常类</h5></li><li><code>NameError</code>访问一个未定义的变量</li><li><code>SyntaxError</code>语法错误，这个严格讲算是程序的错误</li><li><code>IndexError</code> 对于一个序列，访问的索引超过了序列的范围</li><li><code>KeyError</code> 访问一个不存在的字典 Key</li><li><code>ValueError</code> 传入无效的参数</li><li><code>AttributeErrr</code> 访问类对象中不存在的属性<h5 id="3-异常处理方式"><a href="#3-异常处理方式" class="headerlink" title="3.异常处理方式"></a>3.异常处理方式</h5></li><li>处理方法为使用 try，except 和 finally 三个关键字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; file_path &#x3D; &#39;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;error.py&#39;</span><br><span class="line">&gt;&gt;&gt; try:</span><br><span class="line">...     f &#x3D; open(file_path)</span><br><span class="line">... except FileNotFoundError as err:</span><br><span class="line">...     print(err)</span><br><span class="line">...</span><br><span class="line">[Errno 2] No such file or directory: &#39;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;error.py&#39;</span><br></pre></td></tr></table></figure></li><li>当 try 代码块中一旦出现异常，这个代码块后续的代码不会继续执行，会直接进入到 except 异常处理代码块中</li><li>finally 关键字是用来进行清理工作，经常和 except 一起使用，即无论是正常还是异常，这段代码都会执行</li><li>except: 这个语句后不写任何参数，表示将处理所有 try 代码块中抛出的异常<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; file_path &#x3D; &#39;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;error.py&#39;</span><br><span class="line">&gt;&gt;&gt; try:</span><br><span class="line">...     f &#x3D; open(file_path)</span><br><span class="line">... except FileNotFoundError:</span><br><span class="line">...     print(&#39;FileNotFoundError&#39;)</span><br><span class="line">... finally:</span><br><span class="line">...     print(&#39;Finally&#39;)</span><br><span class="line">...</span><br><span class="line">FileNotFoundError</span><br><span class="line">Finally</span><br></pre></td></tr></table></figure><h5 id="4-抛出异常"><a href="#4-抛出异常" class="headerlink" title="4.抛出异常"></a>4.抛出异常</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raise ValueError()</span><br></pre></td></tr></table></figure><h5 id="5-Python-包管理工具"><a href="#5-Python-包管理工具" class="headerlink" title="5.Python 包管理工具"></a>5.Python 包管理工具</h5></li><li>Python 提供了包管理工具 pip, <code>pip</code> 的官方网站是 <a href="https://pypi.org/project/pip/" target="_blank" rel="noopener">PyPi</a><h5 id="6-pip-的常见命令"><a href="#6-pip-的常见命令" class="headerlink" title="6.pip 的常见命令"></a>6.pip 的常见命令</h5></li><li>显示版本和路径：<code>pip3 --version</code></li><li>升级 pip：<code>sudo pip3 install --upgrade pip</code></li><li>安装包：(sudo) pip3 install package，如果需要指定版本就是：pip3 install package==6.6.6 (写具体的版本号)</li><li>卸载包：<code>pip3 uninstall package</code></li><li>升级包：<code>pip3 install --upgrade package</code>，可以使用 ==,&gt;=,&lt;=,&lt;,&gt; 来指定版本号</li><li>查看安装已安装的包：<code>pip3 freeze</code></li><li>把需要安装的一系列包写入<code>requirements.txt</code> 文件中，然后执行：<code>pip3 install -r requirements.txt</code><h5 id="7-错误和异常"><a href="#7-错误和异常" class="headerlink" title="7.错误和异常"></a>7.错误和异常</h5></li><li>写程序的时候通常会出现错误，目前（至少）有两种可区分的错误：<code>语法错误</code>和 <code>异常</code></li><li>语法错误：又称<code>解析错误</code>，经常容易遇到</li><li>异常：即使语句或表达式在语法上是正确的，但在尝试执行时，它仍可能会引发错误<h5 id="8-简单的例子"><a href="#8-简单的例子" class="headerlink" title="8. 简单的例子"></a>8. 简单的例子</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line">b &#x3D; 1</span><br><span class="line"></span><br><span class="line">c &#x3D; a + b</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure></li><li>上面很简单的代码执行后就会出错，因为并没有定义变量<code>a</code></li><li><code>Python</code>提供的<code>异常处理</code>方法来捕获并处理异常，处理方法为使用 <code>try，except</code>和 <code>finally</code> 三个<code>关键字</code><h5 id="9-try-except-的使用"><a href="#9-try-except-的使用" class="headerlink" title="9. try, except 的使用"></a>9. try, except 的使用</h5></li><li><code>try</code> 代码块中写可能会出现异常的代码</li><li><code>except</code> 代码块中添加处理异常的方法</li><li>来将上面的代码处理一下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line">b &#x3D; 1</span><br><span class="line">try:</span><br><span class="line">    c &#x3D; a + b</span><br><span class="line">    print(c)</span><br><span class="line">except NameError as err:</span><br><span class="line">    print(&#39;错误：&#123;&#125;&#39;.format(err))</span><br></pre></td></tr></table></figure></li><li>依旧没有赋值<code>a</code>变量</li><li>然后执行一下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：name &#39;a&#39; is not defined</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><ul><li>错误提示变量<code>a</code>没有被定义</li><li><code>NameError</code>的指的是访问了一个<code>未定义的变量</code></li><li>常见的还有<code>SyntaxError ，IndexError ，KeyError ，ValueError ，AttributeError</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTI0OWM2MDk5OTI0MmQ5MzIuanBlZw?x-oss-process=image/format,png" alt=""></li></ul><h5 id="10-多个except"><a href="#10-多个except" class="headerlink" title="10.多个except"></a>10.多个except</h5><ul><li><code>except</code>可以有多个，每个处理不同类型的异常，也可以不写任何异常类型名称，则会处理所有<code>捕获</code>的<code>异常</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line">a &#x3D; 2</span><br><span class="line">b &#x3D; 1</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    c &#x3D; a + b</span><br><span class="line">    print(c)</span><br><span class="line">    f &#x3D; open(&#39;&#x2F;yiluo&#x2F;bin&#x2F;activate.txt&#39;)</span><br><span class="line"></span><br><span class="line">except NameError as err:</span><br><span class="line">    print(&#39;错误：&#123;&#125;&#39;.format(err))</span><br><span class="line"></span><br><span class="line">except FileNotFoundError as err2:</span><br><span class="line">    print(&#39;错误：&#123;&#125;&#39;.format(err2))</span><br></pre></td></tr></table></figure></li><li>打开一个不存在的文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">错误：[Errno 2] No such file or directory: &#39;&#x2F;yiluo&#x2F;bin&#x2F;activate.txt&#39;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></li><li>系统抛出了<code>异常</code>，没有这个文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line">b &#x3D; 1</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    c &#x3D; a + b</span><br><span class="line">    f &#x3D; open(&#39;&#x2F;yiluo&#x2F;bin&#x2F;activate.txt&#39;)</span><br><span class="line"></span><br><span class="line">except:</span><br><span class="line">    print(&#39;总之就是有错误&#39;)</span><br></pre></td></tr></table></figure></li><li>不写任何<code>异常</code>的<code>类型</code></li><li>运行一下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">总之就是有错误</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h5 id="11-finally的使用"><a href="#11-finally的使用" class="headerlink" title="11.finally的使用"></a>11.finally的使用</h5></li><li>使用 <code>finally</code> 可以保证无论 <code>try</code>代码块中的代码是否<code>抛出异常</code>，都能够执行 <code>finally</code> 代码块里的内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line">a &#x3D; 2</span><br><span class="line">b &#x3D; 1</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    c &#x3D; a + b</span><br><span class="line">    f &#x3D; open(&#39;&#x2F;yiluo&#x2F;bin&#x2F;activate.txt&#39;)</span><br><span class="line"></span><br><span class="line">except:</span><br><span class="line">    print(&#39;总之就是有错误&#39;)</span><br><span class="line"></span><br><span class="line">finally:</span><br><span class="line">    print(&#39;结束异常&#39;)</span><br></pre></td></tr></table></figure></li><li>执行代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">总之就是有错误</span><br><span class="line">结束异常</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></li><li><code>finally</code>成功的运行了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line">a &#x3D; 2</span><br><span class="line">b &#x3D; 1</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    c &#x3D; a + b</span><br><span class="line">except:</span><br><span class="line">    print(&#39;总之就是有错误&#39;)</span><br><span class="line"></span><br><span class="line">finally:</span><br><span class="line">    print(&#39;结束异常&#39;)</span><br></pre></td></tr></table></figure></li><li>没有任何的异常执行下，看下<code>finally</code>会不会被运行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">结束异常</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></li><li><code>finally</code>成功运行<h5 id="12-抛出异常"><a href="#12-抛出异常" class="headerlink" title="12.抛出异常"></a>12.抛出异常</h5></li><li>如果希望程序执行过程中抛出异常，可以使用 <code>raise</code>语句<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; raise NameError(&#39;Error ERROR&#39;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">NameError: Error ERROR</span><br></pre></td></tr></table></figure></li><li>如上抛出了<code>&#39;Error ERROR&#39;</code>的异常<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></li></ul><blockquote><p>欢迎下方【戳一下】【点赞】<br>  Author：伊洛Yiluo<br>  愿你享受每一天，Just Enjoy !</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python4--模块和包</title>
    <link href="https://yiluotalk.com/2020/08/24/Python4--%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/"/>
    <id>https://yiluotalk.com/2020/08/24/Python4--%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/</id>
    <published>2020-08-24T02:55:59.000Z</published>
    <updated>2020-08-24T02:54:27.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM2YjAxODdmNzM5M2Q1MmEucG5n?x-oss-process=image/format,png" alt=""></p><blockquote><p>本文首发自伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote><h5 id="1-name-与-main"><a href="#1-name-与-main" class="headerlink" title="1. __name__与 __main__"></a>1. <code>__name__</code>与 <code>__main__</code></h5><ul><li>如果你经常看<code>python</code>的代码，很多脚本后面都会用到 <code>if __name__ == &#39;__main__&#39;:</code>，对于刚接触<code>python</code>的小伙伴开始肯定会不大理解这是什么意思，为何这么使用。会纠结的理不清头绪，今天就这个痛点来简单的分解讲述下</li><li><code>__name__</code>其实是<code>python</code>内置的系统变量，我们来首先来看看<code>系统变量</code>中有哪些内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">&gt;&gt;&gt; dir(__builtins__)</span><br><span class="line">[&#39;ArithmeticError&#39;, &#39;AssertionError&#39;, &#39;AttributeError&#39;, &#39;BaseException&#39;, &#39;BlockingIOError&#39;, &#39;BrokenPipeError&#39;, &#39;BufferError&#39;, &#39;BytesWarning&#39;, &#39;ChildProcessError&#39;, &#39;ConnectionAbortedError&#39;, &#39;ConnectionError&#39;, &#39;ConnectionRefusedError&#39;, &#39;ConnectionResetError&#39;, &#39;DeprecationWarning&#39;, &#39;EOFError&#39;, &#39;Ellipsis&#39;, &#39;EnvironmentError&#39;, &#39;Exception&#39;, &#39;False&#39;, &#39;FileExistsError&#39;, &#39;FileNotFoundError&#39;, &#39;FloatingPointError&#39;, &#39;FutureWarning&#39;, &#39;GeneratorExit&#39;, &#39;IOError&#39;, &#39;ImportError&#39;, &#39;ImportWarning&#39;, &#39;IndentationError&#39;, &#39;IndexError&#39;, &#39;InterruptedError&#39;, &#39;IsADirectoryError&#39;, &#39;KeyError&#39;, &#39;KeyboardInterrupt&#39;, &#39;LookupError&#39;, &#39;MemoryError&#39;, &#39;ModuleNotFoundError&#39;, &#39;NameError&#39;, &#39;None&#39;, &#39;NotADirectoryError&#39;, &#39;NotImplemented&#39;, &#39;NotImplementedError&#39;, &#39;OSError&#39;, &#39;OverflowError&#39;, &#39;PendingDeprecationWarning&#39;, &#39;PermissionError&#39;, &#39;ProcessLookupError&#39;, &#39;RecursionError&#39;, &#39;ReferenceError&#39;, &#39;ResourceWarning&#39;, &#39;RuntimeError&#39;, &#39;RuntimeWarning&#39;, &#39;StopAsyncIteration&#39;, &#39;StopIteration&#39;, &#39;SyntaxError&#39;, &#39;SyntaxWarning&#39;, &#39;SystemError&#39;, &#39;SystemExit&#39;, &#39;TabError&#39;, &#39;TimeoutError&#39;, &#39;True&#39;, &#39;TypeError&#39;, &#39;UnboundLocalError&#39;, &#39;UnicodeDecodeError&#39;, &#39;UnicodeEncodeError&#39;, &#39;UnicodeError&#39;, &#39;UnicodeTranslateError&#39;, &#39;UnicodeWarning&#39;, &#39;UserWarning&#39;, &#39;ValueError&#39;, &#39;Warning&#39;, &#39;ZeroDivisionError&#39;, &#39;__build_class__&#39;, &#39;__debug__&#39;, &#39;__doc__&#39;, &#39;__import__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;abs&#39;, &#39;all&#39;, &#39;any&#39;, &#39;ascii&#39;, &#39;bin&#39;, &#39;bool&#39;, &#39;breakpoint&#39;, &#39;bytearray&#39;, &#39;bytes&#39;, &#39;callable&#39;, &#39;chr&#39;, &#39;classmethod&#39;, &#39;compile&#39;, &#39;complex&#39;, &#39;copyright&#39;, &#39;credits&#39;, &#39;delattr&#39;, &#39;dict&#39;, &#39;dir&#39;, &#39;divmod&#39;, &#39;enumerate&#39;, &#39;eval&#39;, &#39;exec&#39;, &#39;exit&#39;, &#39;filter&#39;, &#39;float&#39;, &#39;format&#39;, &#39;frozenset&#39;, &#39;getattr&#39;, &#39;globals&#39;, &#39;hasattr&#39;, &#39;hash&#39;, &#39;help&#39;, &#39;hex&#39;, &#39;id&#39;, &#39;input&#39;, &#39;int&#39;, &#39;isinstance&#39;, &#39;issubclass&#39;, &#39;iter&#39;, &#39;len&#39;, &#39;license&#39;, &#39;list&#39;, &#39;locals&#39;, &#39;map&#39;, &#39;max&#39;, &#39;memoryview&#39;, &#39;min&#39;, &#39;next&#39;, &#39;object&#39;, &#39;oct&#39;, &#39;open&#39;, &#39;ord&#39;, &#39;pow&#39;, &#39;print&#39;, &#39;property&#39;, &#39;quit&#39;, &#39;range&#39;, &#39;repr&#39;, &#39;reversed&#39;, &#39;round&#39;, &#39;set&#39;, &#39;setattr&#39;, &#39;slice&#39;, &#39;sorted&#39;, &#39;staticmethod&#39;, &#39;str&#39;, &#39;sum&#39;, &#39;super&#39;, &#39;tuple&#39;, &#39;type&#39;, &#39;vars&#39;, &#39;zip&#39;]</span><br></pre></td></tr></table></figure></li><li>很多内容直接找到<code>__name__</code> 吧<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTgxYzIzNzVhMDQxMDg3NjIucG5n?x-oss-process=image/format,png" alt=""></li><li>可见<code>__name__</code>就是<code>内置的系统变量</code>而已<h5 id="2-举个栗子"><a href="#2-举个栗子" class="headerlink" title="2. 举个栗子"></a>2. 举个栗子</h5></li><li>来建个新的脚本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">(yiluo) ➜  Code touch build.py</span><br><span class="line">(yiluo) ➜  Code vim build.py</span><br></pre></td></tr></table></figure></li><li>脚本中写入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"></span><br><span class="line">print(&#39;__name__究竟是什么? &#39;)</span><br><span class="line">print(&#39;该脚本的 __name__值是：&#123;&#125;&#39;.format(__name__))</span><br></pre></td></tr></table></figure></li><li>运行一下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python build.py</span><br><span class="line">__name__究竟是什么?</span><br><span class="line">该脚本的 __name__值是：__main__</span><br></pre></td></tr></table></figure></li><li>打印出的内容很清晰的说明当下脚本的<code>__name__</code>值是 <code>__main__</code></li><li>这就说明单独运行脚本的时候，<code>__name__</code>值就是是 <code>__main__</code><h5 id="3-作为模块导入时"><a href="#3-作为模块导入时" class="headerlink" title="3.作为模块导入时"></a>3.作为模块导入时</h5></li><li>在 <code>Python</code> 中一个<code>.py 文件</code>就是一个<code>模块</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python3</span><br><span class="line">Python 3.7.5 (default, Nov 29 2019, 14:32:46)</span><br><span class="line">[Clang 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; import build</span><br><span class="line">__name__究竟是什么?</span><br><span class="line">该脚本的 __name__值是：build</span><br></pre></td></tr></table></figure></li><li><code>__name__</code> 的值变成了 <code>build</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTdiYTRkNDllMjQ4MzFiNzIuanBlZw?x-oss-process=image/format,png" alt=""></li></ul><h5 id="4-实际应用"><a href="#4-实际应用" class="headerlink" title="4.实际应用"></a>4.实际应用</h5><ul><li><p>那么利用这点，我们如何实际应用，使导入代码的时候不被执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"></span><br><span class="line">print(&#39;__name__究竟是什么? &#39;)</span><br><span class="line">print(&#39;该脚本的 __name__值是：&#123;&#125;&#39;.format(__name__))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    print(&#39;我很倔强，我被导入的时候不会被打印！&#39;)</span><br></pre></td></tr></table></figure></li><li><p>来单独运行下<code>build</code>脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python build.py</span><br><span class="line">__name__究竟是什么?</span><br><span class="line">该脚本的 __name__值是：__main__</span><br><span class="line">我很倔强，我被导入的时候不会被打印！</span><br></pre></td></tr></table></figure></li><li><p>看到最后的<code>print</code>打印了出来</p></li><li><p>如果被导入呢？ </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python3</span><br><span class="line">Python 3.7.5 (default, Nov 29 2019, 14:32:46)</span><br><span class="line">[Clang 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; import build</span><br><span class="line">__name__究竟是什么?</span><br><span class="line">该脚本的 __name__值是：build</span><br></pre></td></tr></table></figure></li><li><p>当<code>__name__</code>的值不是<code>__main__</code>的时候就不会打印出来了</p></li><li><p>再新建一个其它的文件最后验证下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code touch test.py</span><br><span class="line">(yiluo) ➜  Code vim test.py</span><br></pre></td></tr></table></figure></li><li><p>键入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"></span><br><span class="line">import build</span><br><span class="line">print(&#39;test脚本自己打印&#39;)</span><br><span class="line">&#96;&#96;</span><br></pre></td></tr></table></figure></li><li><p>命令行运行下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python test.py</span><br><span class="line">__name__究竟是什么?</span><br><span class="line">该脚本的 __name__值是：build</span><br><span class="line">test脚本自己打印</span><br></pre></td></tr></table></figure></li><li><p>可见并没有打印出<code>“我很倔强，我被导入的时候不会被打印！”</code></p><h5 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h5></li><li><p>当脚本下面<code>if __name__ == &quot;__main__&quot;:</code>码入代码时，被导入到其它脚本中的时候不会被执行</p><h5 id="6-模块"><a href="#6-模块" class="headerlink" title="6. 模块"></a>6. 模块</h5></li><li><p>Python 的一个优势就是拥有丰富的库，库是具有相关功能模块的集合，也就是常提到的标准库、第三方库以及自定义模块，在写代码的过程中会经常被引用到</p><h5 id="7-引入模块"><a href="#7-引入模块" class="headerlink" title="7. 引入模块"></a>7. 引入模块</h5></li><li><p>一个 .py 文件就被称为一个模块(Module)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import module</span><br><span class="line">from module import *</span><br></pre></td></tr></table></figure><h5 id="8-推荐引入顺序"><a href="#8-推荐引入顺序" class="headerlink" title="8. 推荐引入顺序"></a>8. 推荐引入顺序</h5><p>标准库 &gt; 第三方 &gt; 自定义</p><h5 id="9-模块搜索路径"><a href="#9-模块搜索路径" class="headerlink" title="9. 模块搜索路径"></a>9. 模块搜索路径</h5></li><li><p>Python 解释器先在当前包中查找模块，如果找不到就会在内置模块中查找，如果依然找不到就会按 sys.path 给定的路径查找对应的模块文件</p><h5 id="10-模块与包"><a href="#10-模块与包" class="headerlink" title="10. 模块与包"></a>10. 模块与包</h5></li><li><p>包是一个文件夹，在其中可以定义多个模块或是多个子包。通常 Python 的第三方工具或是应用都是以包的形式发布的</p></li><li><p>在 Python 中文件夹可以被识别成一个包，前提是这个文件夹中有一个 <code>__init__.py</code> 文件</p></li><li><p>Python 的 <code>-m</code>参数用于将一个模块或包当作一个脚本运行</p></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p><blockquote><p>欢迎下方【戳一下】【点赞】<br>  Author：伊洛Yiluo<br>  愿你享受每一天，Just Enjoy !</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python3--条件判断与循环控制</title>
    <link href="https://yiluotalk.com/2020/08/24/Python3--%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E4%B8%8E%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6/"/>
    <id>https://yiluotalk.com/2020/08/24/Python3--%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E4%B8%8E%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6/</id>
    <published>2020-08-24T02:54:59.000Z</published>
    <updated>2020-08-24T02:54:08.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWZjZjY0OGNjZDhhZjVlNTgucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="1-条件判断与循环控制"><a href="#1-条件判断与循环控制" class="headerlink" title="1.条件判断与循环控制"></a>1.条件判断与循环控制</h5><ul><li>语句关键字  if、 else、 elif 、<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">&gt;&gt;&gt; password &#x3D; 123456</span><br><span class="line">&gt;&gt;&gt; input_password &#x3D; int(input(&#39;Please input password to login: &#39;))</span><br><span class="line">Please input password to login: 654321</span><br><span class="line">&gt;&gt;&gt; if input_password &#x3D;&#x3D; password:</span><br><span class="line">...     print(&#39;login successfully!&#39;)</span><br><span class="line">... else:</span><br><span class="line">...     print(&#39;Password ERROR, Please Retry~&#39;)</span><br><span class="line">...</span><br><span class="line">Password ERROR, Please Retry~</span><br></pre></td></tr></table></figure><h5 id="2-if-中常用到的运算符"><a href="#2-if-中常用到的运算符" class="headerlink" title="2. if 中常用到的运算符"></a>2. if 中常用到的运算符</h5></li><li>小于：&lt;</li><li>小于或等于：&lt;=</li><li>大于：&gt;</li><li>大于或等于：&gt;=</li><li>等于： ==</li><li>不等于：!=<h5 id="3-可以使用-and-和-or-来对符合的条件进行控制"><a href="#3-可以使用-and-和-or-来对符合的条件进行控制" class="headerlink" title="3. 可以使用 and 和 or 来对符合的条件进行控制"></a>3. 可以使用 and 和 or 来对符合的条件进行控制</h5><h5 id="4-pass-关键字"><a href="#4-pass-关键字" class="headerlink" title="4. pass 关键字"></a>4. pass 关键字</h5></li><li>程序执行遇到 pass 就会跳过这里的代码块继续执行后面的代码<h5 id="5-循环语句"><a href="#5-循环语句" class="headerlink" title="5. 循环语句"></a>5. 循环语句</h5></li><li>for 循环<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name_list &#x3D; [&#39;Yiluo&#39;, &#39;Tom&#39;, &#39;Lucy&#39;, &#39;Joe&#39;]</span><br><span class="line">&gt;&gt;&gt; for _ in name_list:</span><br><span class="line">...     print(_)</span><br><span class="line">...</span><br><span class="line">Yiluo</span><br><span class="line">Tom</span><br><span class="line">Lucy</span><br><span class="line">Joe</span><br></pre></td></tr></table></figure></li><li>内置函数 range()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for i in range(8):</span><br><span class="line">...     print(i)</span><br><span class="line">...</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td></tr></table></figure></li><li>while 循环<br>条件不能够达成则停止循环<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; 10</span><br><span class="line">&gt;&gt;&gt; while a &gt;0:</span><br><span class="line">...     print(a)</span><br><span class="line">...     a -&#x3D;1</span><br><span class="line">...</span><br><span class="line">10</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li>break 和 continue 两个关键字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; 10</span><br><span class="line">&gt;&gt;&gt; while a &gt;0:</span><br><span class="line">...     if a &#x3D;&#x3D; 3:</span><br><span class="line">...         break</span><br><span class="line">...     print(a)</span><br><span class="line">...     a -&#x3D;1</span><br><span class="line">...</span><br><span class="line">10</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">4</span><br></pre></td></tr></table></figure>a 等于 3的时候 break<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for i in range(10):</span><br><span class="line">...     if i &#x3D;&#x3D; 3:</span><br><span class="line">...        continue</span><br><span class="line">...     print(i)</span><br><span class="line">...</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure>i 等于3 的时候被忽略</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p><blockquote><p>欢迎下方【戳一下】【点赞】<br>  Author：伊洛Yiluo<br>  愿你享受每一天，Just Enjoy !</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python2--字符串及运算符</title>
    <link href="https://yiluotalk.com/2020/08/24/Python2--%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8A%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://yiluotalk.com/2020/08/24/Python2--%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8A%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2020-08-24T02:53:59.000Z</published>
    <updated>2020-08-24T02:53:38.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWZjZjY0OGNjZDhhZjVlNTgucG5n?x-oss-process=image/format,png" alt=""><br>人生苦短，我用 Python</p><h5 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1. 字符串"></a>1. 字符串</h5><ul><li>双引号或单引号标示<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">&gt;&gt;&gt; account &#x3D; &#39;Yiluo&#39;</span><br><span class="line">&gt;&gt;&gt; my_web &#x3D; &#39;https:&#x2F;&#x2F;yiluotalk.com&#x2F;&#39;</span><br></pre></td></tr></table></figure></li><li>字符串拼接<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; account + &#39; &#39; + my_web</span><br><span class="line">&#39;Yiluo https:&#x2F;&#x2F;yiluotalk.com&#x2F;&#39;</span><br></pre></td></tr></table></figure></li><li><code>\</code>来去除引号标示字符串的特殊作用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#39;I &#39;m fine&#39;)</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1</span><br><span class="line">    print(&#39;I &#39;m fine&#39;)</span><br><span class="line">              ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line">&gt;&gt;&gt; print(&#39;I \&#39;m fine&#39;)</span><br><span class="line">I &#39;m fine</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h5 id="2-字符串索引"><a href="#2-字符串索引" class="headerlink" title="2.字符串索引"></a>2.字符串索引</h5></li><li>从左向右，索引从0开始</li><li>从右向左，索引从-1开始<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; my_web &#x3D; &#39;https:&#x2F;&#x2F;yiluotalk.com&#x2F;&#39;</span><br><span class="line">&gt;&gt;&gt; my_web[0]</span><br><span class="line">&#39;h&#39;</span><br><span class="line">&gt;&gt;&gt; my_web[1]</span><br><span class="line">&#39;t&#39;</span><br><span class="line">&gt;&gt;&gt; my_web[-1]</span><br><span class="line">&#39;&#x2F;&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> +---+---+---+---+---+---+</span><br><span class="line"> | P | y | t | h | o | n |</span><br><span class="line"> +---+---+---+---+---+---+</span><br><span class="line"> 0   1   2   3   4   5   6</span><br><span class="line">-6  -5  -4  -3  -2  -1</span><br></pre></td></tr></table></figure><h5 id="3-字符串切片"><a href="#3-字符串切片" class="headerlink" title="3.字符串切片"></a>3.字符串切片</h5></li><li>[头索:尾索:步长]<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 我的公众号&#x3D; &#39;伊洛的小屋&#39;</span><br><span class="line">&gt;&gt;&gt; 我的公众号[0:1]</span><br><span class="line">&#39;伊&#39;</span><br><span class="line">&gt;&gt;&gt; 我的公众号[0:2]</span><br><span class="line">&#39;伊洛&#39;</span><br><span class="line">&gt;&gt;&gt; 我的公众号[0:5]</span><br><span class="line">&#39;伊洛的小屋&#39;</span><br><span class="line">&gt;&gt;&gt; 我的公众号[0:5:2]</span><br><span class="line">&#39;伊的屋&#39;</span><br><span class="line"># 反取</span><br><span class="line">&gt;&gt;&gt; 我的公众号[::-1]</span><br><span class="line">&#39;屋小的洛伊&#39;</span><br></pre></td></tr></table></figure><h5 id="4-字符串常用方法"><a href="#4-字符串常用方法" class="headerlink" title="4. 字符串常用方法"></a>4. 字符串常用方法</h5></li><li>split  默认空格切，也可传参数切分<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; my_web &#x3D; &#39;Yiluo,https:&#x2F;&#x2F;yiluotalk.com&#x2F;&#39;</span><br><span class="line">&gt;&gt;&gt; my_web.split(&#39;,&#39;)</span><br><span class="line">[&#39;Yiluo&#39;, &#39;https:&#x2F;&#x2F;yiluotalk.com&#x2F;&#39;]</span><br><span class="line">&gt;&gt;&gt; my_web.split(&#39;,&#39;)[0]</span><br><span class="line">&#39;Yiluo&#39;</span><br><span class="line">&gt;&gt;&gt; my_web.split(&#39;,&#39;)[1]</span><br><span class="line">&#39;https:&#x2F;&#x2F;yiluotalk.com&#x2F;&#39;</span><br></pre></td></tr></table></figure></li><li>strip 默认删除字符串首尾空格及换行，传参会删除参数中的字符（限于首尾）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; my_web &#x3D; &#39;   https:&#x2F;&#x2F;yiluotalk.com&#x2F;   &#39;</span><br><span class="line">&gt;&gt;&gt; my_web</span><br><span class="line">&#39;   https:&#x2F;&#x2F;yiluotalk.com&#x2F;   &#39;</span><br><span class="line">&gt;&gt;&gt; my_web.strip()</span><br><span class="line">&#39;https:&#x2F;&#x2F;yiluotalk.com&#x2F;&#39;</span><br><span class="line">&gt;&gt;&gt; my_web &#x3D; &#39;https:&#x2F;&#x2F;yiluotalk.com&#x2F;&#39;</span><br><span class="line">&gt;&gt;&gt; my_web.strip(&#39;https:&#x2F;&#x2F;&#x2F;&#39;)</span><br><span class="line">&#39;yiluotalk.com&#39;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="5-注释"><a href="#5-注释" class="headerlink" title="5. 注释"></a>5. 注释</h5><ul><li>执行程序的时候注释内容会被忽略<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 我是注释</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">单引号注释</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(&#39;hello, Yiluo&#39;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">双引号注释</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h5 id="6-format-格式化字符串"><a href="#6-format-格式化字符串" class="headerlink" title="6.format 格式化字符串"></a>6.format 格式化字符串</h5></li><li>str.format()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;&#125;,&#123;&#125;&#39;.format(&#39;Hello&#39;, &#39;Yiluo&#39;)</span><br><span class="line">&#39;Hello,Yiluo&#39;</span><br></pre></td></tr></table></figure><h5 id="6-运算符"><a href="#6-运算符" class="headerlink" title="6.运算符"></a>6.运算符</h5></li><li><code>+</code> 两个对象相加</li><li><code>-</code> 得到负数或是一个数减去另一个数</li><li><code>*</code> 两个数相乘或是返回一个被重复若干次的字符串</li><li><code>/</code>  x 除以 y</li><li><code>%</code> 返回除法的余数</li><li><code>**</code> 返回 x 的 y 次幂</li><li><code>//</code>  返回商的整数部分（向下取整）<h5 id="7-比较运算符"><a href="#7-比较运算符" class="headerlink" title="7.比较运算符"></a>7.比较运算符</h5></li><li><code>==</code> 等于：比较对象是否相等</li><li><code>!=</code> 不等于：比较两个对象是否不相等</li><li><code>&gt;</code> 大于：返回 x 是否大于 y</li><li><code>&lt;</code> 小于：返回 x 是否小于 y</li><li><code>&gt;=</code> 大于等于：返回 x 是否大于等于 y</li><li><code>&lt;=</code> 小于等于：返回 x 是否小于等于 y<h5 id="8-赋值运算符"><a href="#8-赋值运算符" class="headerlink" title="8.赋值运算符"></a>8.赋值运算符</h5></li><li><code>=</code> c = a + b 将 a + b 的运算结果赋值为 c</li><li><code>+=</code> c += a 等效于 c = c + a</li><li><code>-=</code>  c -= a 等效于 c = c - a</li><li><code>*=</code> c *= a 等效于 c = c * a</li><li><code>/=</code> c /= a 等效于 c = c / a</li><li><code>%=</code> c %= a 等效于 c = c % a</li><li><code>**=</code> c *<em>= a 等效于 c = c *</em> a</li><li><code>//=</code>  c //= a 等效于 c = c // a<h5 id="9-逻辑运算符"><a href="#9-逻辑运算符" class="headerlink" title="9.逻辑运算符"></a>9.逻辑运算符</h5></li><li><code>and</code> 布尔 “与” </li><li><code>or</code> 布尔 “或” </li><li><code>not</code> 布尔 “非”<h5 id="10-成员运算符"><a href="#10-成员运算符" class="headerlink" title="10.成员运算符"></a>10.成员运算符</h5></li><li><code>in</code> 如果在指定的序列中找到值返回 True，否则返回 False</li><li><code>not in</code> 如果在指定的序列中没有找到值返回 True，否则返回 False<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; list &#x3D; [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; 1 in list</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 5 in list</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 5 not in list</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h5 id="11-身份运算符"><a href="#11-身份运算符" class="headerlink" title="11.身份运算符"></a>11.身份运算符</h5></li><li><code>is</code> is 是判断两个标识符是不是引用自一个对象</li><li><code>is not</code>  is not 是判断两个标识符是不是引用自不同对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name &#x3D; &#39;Yiluo&#39;</span><br><span class="line">&gt;&gt;&gt; id(name)</span><br><span class="line">4408381744</span><br><span class="line">&gt;&gt;&gt; name2 &#x3D; &#39;Tom&#39;</span><br><span class="line">&gt;&gt;&gt; id(name2)</span><br><span class="line">4410061168</span><br><span class="line">&gt;&gt;&gt; name is name2</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; name is not name2</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; name3 &#x3D; &#39;Yiluo&#39;</span><br><span class="line">&gt;&gt;&gt; id(name3)</span><br><span class="line">4408381744</span><br><span class="line">&gt;&gt;&gt; name is name3</span><br><span class="line">True</span><br></pre></td></tr></table></figure><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></li></ul><blockquote><p>欢迎下方【戳一下】【点赞】<br>  Author：伊洛Yiluo<br>  愿你享受每一天，Just Enjoy !</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python1--简介及基础语法</title>
    <link href="https://yiluotalk.com/2020/08/24/Python1--%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://yiluotalk.com/2020/08/24/Python1--%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2020-08-24T02:52:59.000Z</published>
    <updated>2020-08-24T02:52:45.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWZjZjY0OGNjZDhhZjVlNTgucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="0-简介"><a href="#0-简介" class="headerlink" title="0. 简介"></a>0. 简介</h5><p>Python易于学习的编程语言，有很多现成的第三方库可以调用，不用重复造轮子，老话说：“人生苦短，我用 Python”</p><h5 id="1-安装Python"><a href="#1-安装Python" class="headerlink" title="1. 安装Python"></a>1. 安装Python</h5><p><code>Mac</code>：brew install python3<br><code>Window</code>： 官网下载–图形页面一步步点，也可以直接在<a href="https://docs.python.org/3/using/windows.html#windows-store" target="_blank" rel="noopener">Microsoft Store</a>下载安装</p><h5 id="2-启动Python"><a href="#2-启动Python" class="headerlink" title="2. 启动Python"></a>2. 启动Python</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ python3</span><br><span class="line">Python 3.7.5 (default, Nov 29 2019, 14:32:46)</span><br><span class="line">[Clang 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><ul><li>以上启动的是Python的交互模式，前期学习更推荐使用ipython交互，可以直接用pip 安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ipython</span><br></pre></td></tr></table></figure></li><li>字符编码<br>默认情况下，Python文件采用utf-8编码，通过这样可以讲世界上大多数语言的字符同时用于字符串文字，标识符和注释中，尽管标准库讲ASCII字符用作标识符，这是任何可移植代码都遵循的约定<br>如果需要声明默认编码以外的其他编码，应该在文件的第一行添加一个特殊的注释<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: cp1252 -*-</span><br></pre></td></tr></table></figure>#####3. Hello World<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">&gt;&gt;&gt; print(&#39;Hello World&#39;)</span><br><span class="line">Hello World</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>#####4. 数据类型</li><li>int(整数) /float(浮点数)、字符串、布尔值、None、列表、元组、字典、集合…</li></ul><ol><li>None 代表的是空、编程的世界里空并不就是<code>0</code>的意思<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># type是 Python内置函数</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">&gt;&gt;&gt; type(None)</span><br><span class="line">&lt;class &#39;NoneType&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(0)</span><br><span class="line">&lt;class &#39;int&#39;&gt;</span><br></pre></td></tr></table></figure></li><li>布尔值 代表 “真”、“假”<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># bool 是 Python内置函数</span><br><span class="line">&gt;&gt;&gt; bool(1)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(0)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; bool(False)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; bool(True)</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li>int整数 如1、2、5</li><li>float浮点数 如3.1415926、 1.2</li><li>str 字符串 如‘Tom’、‘Hello World’</li></ol><ul><li>经常被用到，Python还可以操纵字符串，该字符串可以通过多种方式表示<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#39;spam eggs&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;doesn\&#39;t&#39;  # 通过&#39;\&#39;  转义单引号</span><br><span class="line">&quot;doesn&#39;t&quot;</span><br><span class="line">&gt;&gt;&gt; &quot;doesn&#39;t&quot;  # 通过双引号替代</span><br><span class="line">&quot;doesn&#39;t&quot;</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li>list列表 如[1, 2, 3, 4, 5]</li><li>tuple元组 如（6，7，8，9，10）</li><li>dic 字典 如 dict_score = {‘Tom’: 98, ‘Joe’: 88, ‘Wade’: ‘99’}</li><li>set 集合 stock = {‘Apple’,  ‘Tencent’,  ‘Alibaba’,  ‘Amazon’,  ‘Google’,  ‘Tesla’}</li></ol><ul><li>尝试一些数据运算<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 2+ 2</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; 50 - 2*5</span><br><span class="line">40</span><br><span class="line">&gt;&gt;&gt; (50 - 10*3) &#x2F;2</span><br><span class="line">10.0</span><br><span class="line">&gt;&gt;&gt; 4 &#x2F; 2 # 除法总是返回浮点数</span><br><span class="line">2.0</span><br><span class="line">&gt;&gt;&gt; 17 &#x2F;&#x2F; 3 # 地板除舍弃了小数</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; 17 % 3 # % 返回余数</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h5 id="5-变量"><a href="#5-变量" class="headerlink" title="5. 变量"></a>5. 变量</h5></li><li>每个变量在内存中创建通过 <code>=</code> 赋值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># format 格式化输出</span><br><span class="line">&gt;&gt;&gt; stock &#x3D; &#39;Apple&#39;  # Apple 赋值给股票 stock </span><br><span class="line">&gt;&gt;&gt; print(&#39;I buy &#123;&#125;&#39;.format(stock))</span><br><span class="line">I buy Apple</span><br></pre></td></tr></table></figure></li><li>变量是有命名规则的，要做到命名有意义</li><li>等号（=）用于为变量分配值<h5 id="6-缩进"><a href="#6-缩进" class="headerlink" title="6. 缩进"></a>6. 缩进</h5>官方代码规范<br><a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-0008/</a></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p><blockquote><p>欢迎下方【戳一下】【点赞】<br>  Author：伊洛Yiluo<br>  愿你享受每一天，Just Enjoy !</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Locust性能测试3--参数化、数据依赖</title>
    <link href="https://yiluotalk.com/2020/08/21/Locust%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%953--%E5%8F%82%E6%95%B0%E5%8C%96%E3%80%81%E6%95%B0%E6%8D%AE%E4%BE%9D%E8%B5%96/"/>
    <id>https://yiluotalk.com/2020/08/21/Locust%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%953--%E5%8F%82%E6%95%B0%E5%8C%96%E3%80%81%E6%95%B0%E6%8D%AE%E4%BE%9D%E8%B5%96/</id>
    <published>2020-08-21T03:48:59.000Z</published>
    <updated>2020-08-21T03:49:52.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWZjZjY0OGNjZDhhZjVlNTgucG5n?x-oss-process=image/format,png" alt=""></p><ul><li>场景链路压测的时候通常都是按照用户实际使用流程进行压测，同接口自动化一样，一定会涉及到数据依赖的问题<h5 id="1-举例"><a href="#1-举例" class="headerlink" title="1.举例"></a>1.举例</h5></li><li><code>Django</code>后台通常需要<code>csrf</code>验证，而一般<code>csrftoken</code>需要通过get接口获得<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">from locust import HttpUser, task, between</span><br><span class="line">from lxml import etree</span><br><span class="line"></span><br><span class="line">USER_CREDENTIALS &#x3D; [</span><br><span class="line">    (&quot;login1&quot;, &quot;pwd1&quot;),</span><br><span class="line">    (&quot;login2&quot;, &quot;pwd2&quot;),</span><br><span class="line">    (&quot;login3&quot;, &quot;pwd3&quot;),</span><br><span class="line">]  # 登录账户</span><br><span class="line"></span><br><span class="line">csrf_token &#x3D; []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class LoginDemo(HttpUser):</span><br><span class="line">    wait_time &#x3D; between(2, 5)  # 模拟用户等待2到5s然后执行</span><br><span class="line"></span><br><span class="line">    @task(1)</span><br><span class="line">    def on_start(self):  # 任务开始时准备</span><br><span class="line">        header &#x3D; &#123;</span><br><span class="line">            &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) &quot;</span><br><span class="line">                          &quot;Chrome&#x2F;83.0.4103.61 Safari&#x2F;537.36 &quot;</span><br><span class="line">        &#125;  # 请求头</span><br><span class="line"></span><br><span class="line">        # 获取csrf</span><br><span class="line">        r_get &#x3D; self.client.get(&quot;user&#x2F;login&#x2F;&quot;)</span><br><span class="line"></span><br><span class="line">        # 从返回的html页面中，解析出 csrfmiddlewaretoken</span><br><span class="line">        dom &#x3D; etree.HTML(r_get.content.decode(&quot;utf-8&quot;))</span><br><span class="line">        try:</span><br><span class="line">            csrf_token[&#39;csrfmiddlewaretoken&#39;] &#x3D; dom.xpath(&#39;&#x2F;&#x2F;input[@name&#x3D;&quot;csrfmiddlewaretoken&quot;]&#39;)[0].get(&quot;value&quot;)</span><br><span class="line">            print(csrf_token)</span><br><span class="line">        except:</span><br><span class="line">            print(&#39;参数csrfmiddlewaretoken获取失败！&#39;)</span><br><span class="line"></span><br><span class="line">        if len(USER_CREDENTIALS) &gt; 0:</span><br><span class="line">            user, pwd &#x3D; USER_CREDENTIALS.pop()  # 取出账户名密码</span><br><span class="line"></span><br><span class="line">            r_post &#x3D; self.client.post(&quot;user&#x2F;login&#x2F;&quot;, &#123;</span><br><span class="line">                &quot;token&quot;: &#39;TOKEN&#39;,  # TOKEN</span><br><span class="line">                &quot;username&quot;: user,  # 用户名</span><br><span class="line">                &quot;password&quot;: pwd,  # 密码</span><br><span class="line">                &quot;next&quot;: &quot;&quot;</span><br><span class="line">            &#125;, header&#x3D;header</span><br><span class="line">                                      )</span><br><span class="line"></span><br><span class="line">            assert r_post.status_code &#x3D;&#x3D; 200  # 断言请求返回200</span><br><span class="line"></span><br><span class="line">            print(r_post.status_code, r_post.text[:1000])  # 打印状态码及返回text</span><br><span class="line"></span><br><span class="line">    @task(2)</span><br><span class="line">    def view_index(self):</span><br><span class="line">        print(&#39;访问首页&#39;)</span><br><span class="line">        r &#x3D; self.client.get(&quot;&#x2F;index&#x2F;&quot;)</span><br><span class="line"></span><br><span class="line">        print(r.status_code)</span><br><span class="line"></span><br><span class="line">    @task(6)</span><br><span class="line">    def view_tag(self):</span><br><span class="line">        print(&#39;访问标签页&#39;)</span><br><span class="line">        r &#x3D; self.client.get(&quot;&#x2F;tag&#x2F;&quot;)</span><br><span class="line"></span><br><span class="line">        print(r.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    import os</span><br><span class="line"></span><br><span class="line">    os.system(&quot;locust -f demo.py --host&#x3D;URL&quot;)  # 需要测试的地址</span><br></pre></td></tr></table></figure></li><li>这里我们使用了<code>etree</code> 来获取<code>get</code>接口返回的数据<h5 id="2-更新请求头"><a href="#2-更新请求头" class="headerlink" title="2.更新请求头"></a>2.更新请求头</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.client.headers.update(header)</span><br></pre></td></tr></table></figure><h5 id="3-数据依赖"><a href="#3-数据依赖" class="headerlink" title="3. 数据依赖"></a>3. 数据依赖</h5></li><li>转化接口返回数据，然后获得<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">@task(2)</span><br><span class="line">def view_index(self):</span><br><span class="line">      r &#x3D; self.client.get(&quot;&#x2F;index&#x2F;&quot;)</span><br><span class="line">      response &#x3D; json.loads(r.text)</span><br><span class="line">      demo &#x3D; response[&#39;取值&#39;]  # 假如取demo</span><br><span class="line">      print(&quot;&#x3D;&#x3D;&#x3D;&gt;&quot;, response[&#39;取值&#39;], type(response))  # 取值</span><br><span class="line">      </span><br><span class="line">      self.client.get(&#39;index&#x2F;url&#x2F;&#123;&#125;&#x2F;&#39;.format(demo))</span><br></pre></td></tr></table></figure><h5 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h5></li><li>可以先看一下request库 ，涉及到数据依赖的问题更好学习<br><a href="https://yiluotalk.com/2019/12/19/Python%20requests%E5%BA%93(%E4%B8%80)/">https://yiluotalk.com/2019/12/19/Python%20requests%E5%BA%93(%E4%B8%80)/</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTc0MzNjOWRhM2MyMzI1OGYucG5n?x-oss-process=image/format,png" alt=""></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTQ3MTc4NGI5YTgwODY4YjcucG5n?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Locust性能测试" scheme="https://yiluotalk.com/categories/Locust%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Locust性能测试" scheme="https://yiluotalk.com/tags/Locust%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
  </entry>
  
  <entry>
    <title>Locust性能测试2--登录示例</title>
    <link href="https://yiluotalk.com/2020/08/21/Locust%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%952--%E7%99%BB%E5%BD%95%E7%A4%BA%E4%BE%8B/"/>
    <id>https://yiluotalk.com/2020/08/21/Locust%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%952--%E7%99%BB%E5%BD%95%E7%A4%BA%E4%BE%8B/</id>
    <published>2020-08-21T03:48:59.000Z</published>
    <updated>2020-08-21T03:49:19.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWZjZjY0OGNjZDhhZjVlNTgucG5n?x-oss-process=image/format,png" alt=""></p><ul><li>无论是做接口自动化还是做压测，解决了登录就离成功进步了一大半，下面做个简单的登录案例，后续再说下数据依赖及参数化等问题<h5 id="1-登录"><a href="#1-登录" class="headerlink" title="1. 登录"></a>1. 登录</h5></li><li>登录示例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">from locust import HttpUser, task, between</span><br><span class="line"></span><br><span class="line">USER_CREDENTIALS &#x3D; [</span><br><span class="line">    (&quot;login1&quot;, &quot;pwd1&quot;),</span><br><span class="line">    (&quot;login2&quot;, &quot;pwd2&quot;),</span><br><span class="line">    (&quot;login3&quot;, &quot;pwd3&quot;),</span><br><span class="line">]  # 登录账户</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class LoginDemo(HttpUser):</span><br><span class="line">    wait_time &#x3D; between(2, 5)  # 模拟用户等待2到5s然后执行</span><br><span class="line"></span><br><span class="line">    @task(1)</span><br><span class="line">    def on_start(self):  # 任务开始时准备（开始肯定是要登录了）</span><br><span class="line">        header &#x3D; &#123;</span><br><span class="line">            &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) &quot;</span><br><span class="line">                          &quot;Chrome&#x2F;83.0.4103.61 Safari&#x2F;537.36 &quot;</span><br><span class="line">        &#125;  # 请求头</span><br><span class="line"></span><br><span class="line">        if len(USER_CREDENTIALS) &gt; 0:</span><br><span class="line">            user, pwd &#x3D; USER_CREDENTIALS.pop()  # 取出账户名密码</span><br><span class="line"></span><br><span class="line">            r_post &#x3D; self.client.post(&quot;user&#x2F;login&#x2F;&quot;, &#123;</span><br><span class="line">                &quot;token&quot;: &#39;TOKEN&#39;,  # TOKEN</span><br><span class="line">                &quot;username&quot;: user,  # 用户名</span><br><span class="line">                &quot;password&quot;: pwd,  # 密码</span><br><span class="line">                &quot;next&quot;: &quot;&quot;</span><br><span class="line">            &#125;, header&#x3D;header</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            assert r_post.status_code &#x3D;&#x3D; 200  # 断言请求返回200</span><br><span class="line"></span><br><span class="line">            print(r_post.status_code, r_post.text[:1000])  # 打印状态码及返回text</span><br><span class="line"></span><br><span class="line">    @task(2)</span><br><span class="line">    def view_index(self):</span><br><span class="line">        print(&#39;访问首页&#39;)</span><br><span class="line">        r &#x3D; self.client.get(&quot;&#x2F;index&#x2F;&quot;)</span><br><span class="line"></span><br><span class="line">        print(r.status_code)</span><br><span class="line"></span><br><span class="line">    @task(6)</span><br><span class="line">    def view_tag(self):</span><br><span class="line">        print(&#39;访问标签页&#39;)</span><br><span class="line">        r &#x3D; self.client.get(&quot;&#x2F;tag&#x2F;&quot;)</span><br><span class="line">        </span><br><span class="line">        print(r.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    import os</span><br><span class="line"></span><br><span class="line">    os.system(&quot;locust -f demo.py --host&#x3D;URL&quot;)  # 需要测试的地址</span><br></pre></td></tr></table></figure></li><li><code>task</code>后面的意思可以理解为权重，在上面的示例中，<code>view_tag</code>被选择为<code>view_index</code>的几率是两倍<h5 id="2-Task的另外使用方式"><a href="#2-Task的另外使用方式" class="headerlink" title="2.Task的另外使用方式"></a>2.Task的另外使用方式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from locust import User, constant</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def task_one(l):</span><br><span class="line">    print(&#39;https:&#x2F;&#x2F;yiluotalk.com&#x2F;&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyUser(User):</span><br><span class="line">    tasks &#x3D; [task_one]</span><br><span class="line">    wait_time &#x3D; constant(1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    import os</span><br><span class="line"></span><br><span class="line">    os.system(&quot;locust -f demo.py &quot;)</span><br></pre></td></tr></table></figure></li><li>执行脚本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br></pre></td></tr></table></figure></li><li>如果是多个任务的话<br><code>task = [my_task, my_task, my_task, another_task]</code></li></ul><h5 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h5><p>如果很熟悉<code>request库</code>的话，基本没有上手的难度<br><a href="https://yiluotalk.com/2019/12/19/Python%20requests%E5%BA%93(%E4%B8%80)/">https://yiluotalk.com/2019/12/19/Python%20requests%E5%BA%93(%E4%B8%80)/</a></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWRlNGJmNmY3ODVjYzdmZDMucG5n?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTQ3MTc4NGI5YTgwODY4YjcucG5n?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Locust性能测试" scheme="https://yiluotalk.com/categories/Locust%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Locust性能测试" scheme="https://yiluotalk.com/tags/Locust%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
  </entry>
  
  <entry>
    <title>Locust性能测试1--简介安装及基本使用</title>
    <link href="https://yiluotalk.com/2020/08/21/Locust%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%951--%E7%AE%80%E4%BB%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://yiluotalk.com/2020/08/21/Locust%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%951--%E7%AE%80%E4%BB%8B%E5%AE%89%E8%A3%85%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2020-08-21T03:48:59.000Z</published>
    <updated>2020-08-21T03:48:45.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWZjZjY0OGNjZDhhZjVlNTgucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="1-Locust简介"><a href="#1-Locust简介" class="headerlink" title="1. Locust简介"></a>1. Locust简介</h5><ul><li><p><code>Locust</code>是易于使用的分布式用户负载测试工具，旨在对网站（或其他系统）进行负载测试，并弄清一个系统可以处理多少个并发用户，<code>Locust</code>翻译过来是蝗虫的意思，在测试期间，意在一群蝗虫用户会攻击您的网站系统。您可以使用<code>Python</code>代码定义每个用户的行为，并且通过<code>web UI</code>实现监控集群的过程，<code>Locust</code>完全基于事件，因此可以再一台计算机支持数千个并发用户。</p></li><li><p>不同于常用的测试工具，<code>LR</code> ，<code>Jmeter</code> ，<code>Locust</code>使用的不是线程，而是<code>gevent</code></p><h5 id="2-环境安装"><a href="#2-环境安装" class="headerlink" title="2. 环境安装"></a>2. 环境安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install locust</span><br></pre></td></tr></table></figure></li><li><p><code>Mac</code>也可以直接通过<code>Homebrew</code>安装</p></li><li><p>查看安装结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locust --help</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Usage: locust [OPTIONS] [UserClass ...]</span><br><span class="line"></span><br><span class="line">Common options:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -f LOCUSTFILE, --locustfile LOCUSTFILE</span><br><span class="line">                        Python module file to import, e.g. &#39;..&#x2F;other.py&#39;.</span><br><span class="line">                        Default: locustfile</span><br><span class="line">  --config CONFIG       Config file path</span><br><span class="line">  -H HOST, --host HOST  Host to load test in the following format:</span><br><span class="line">                        http:&#x2F;&#x2F;10.21.32.33</span><br><span class="line">  -u NUM_USERS, --users NUM_USERS</span><br><span class="line">                        Number of concurrent Locust users. Only used together</span><br><span class="line">                        with --headless</span><br><span class="line">  -r HATCH_RATE, --hatch-rate HATCH_RATE</span><br><span class="line">                        The rate per second in which users are spawned. Only</span><br><span class="line">                        used together with --headless</span><br><span class="line">  -t RUN_TIME, --run-time RUN_TIME</span><br><span class="line">                        Stop after the specified amount of time, e.g. (300s,</span><br><span class="line">                        20m, 3h, 1h30m, etc.). Only used together with</span><br><span class="line">                        --headless</span><br><span class="line">  -l, --list            Show list of possible User classes and exit</span><br><span class="line"></span><br><span class="line">........</span><br></pre></td></tr></table></figure><h5 id="3-简单使用"><a href="#3-简单使用" class="headerlink" title="3. 简单使用"></a>3. 简单使用</h5></li><li><p>访问伊洛个人博客主页 <a href="https://yiluotalk.com/">https://yiluotalk.com/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from locust import HttpUser, task, between</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class LocustDemo(HttpUser):</span><br><span class="line">    wait_time &#x3D; between(2, 5)  # 模拟用户等待2到5s然后执行</span><br><span class="line"></span><br><span class="line">    @task</span><br><span class="line">    def index_blog(self):  # 定义函数博客首页</span><br><span class="line">        header &#x3D; &#123;</span><br><span class="line">            &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) &quot;</span><br><span class="line">                          &quot;Chrome&#x2F;83.0.4103.61 Safari&#x2F;537.36 &quot;</span><br><span class="line">        &#125;  # 请求头</span><br><span class="line"></span><br><span class="line">        response &#x3D; self.client.get(&#39;&#39;, headers&#x3D;header)  # 同request用法基本一致</span><br><span class="line">        assert response.status_code &#x3D;&#x3D; 200  # 断言请求返回200</span><br><span class="line"></span><br><span class="line">        print(response.status_code, response.text[:1000])  # 打印状态码及返回text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    import os</span><br><span class="line"></span><br><span class="line">    os.system(&quot;locust -f demo.py --host&#x3D;https:&#x2F;&#x2F;yiluotalk.com&#x2F;&quot;)  # 执行脚本访问伊洛的博客主页 https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br></pre></td></tr></table></figure></li><li><p><code>Locust</code>也是用的<code>request</code>库，所以基本请求方式与<code>request</code>库相同</p></li></ul><h5 id="4-启动测试"><a href="#4-启动测试" class="headerlink" title="4. 启动测试"></a>4. 启动测试</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locust -f demo.py --host&#x3D;https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br></pre></td></tr></table></figure><ul><li>GUI模式，浏览器输入 <a href="http://127.0.0.1:8089/" target="_blank" rel="noopener">http://127.0.0.1:8089/</a>显示如下页面<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTQ5MzI0NDc4OTc4ZTdhNjYucG5n?x-oss-process=image/format,png" alt=""></li><li>Number of users to simulate 设置虚拟用户总数</li><li>Hatch rate (users spawned/second) 每秒启动虚拟用户数</li><li>Host 压测地址</li><li>Start swarming ‘蝗虫入境’</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTdmNWNlNWIzZDA4MDVkYWMucG5n?x-oss-process=image/format,png" alt=""></p><ul><li>接口返回<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">200 &lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1, maximum-scale&#x3D;2&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;theme-color&quot; content&#x3D;&quot;#222&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;generator&quot; content&#x3D;&quot;Hexo 4.1.1&quot;&gt;</span><br><span class="line">  &lt;link rel&#x3D;&quot;apple-touch-icon&quot; sizes&#x3D;&quot;180x180&quot; href&#x3D;&quot;&#x2F;images&#x2F;apple-touch-icon-next.png&quot;&gt;</span><br><span class="line">  &lt;link rel&#x3D;&quot;icon&quot; type&#x3D;&quot;image&#x2F;png&quot; sizes&#x3D;&quot;32x32&quot; href&#x3D;&quot;&#x2F;images&#x2F;favicon-32x32-next.png&quot;&gt;</span><br><span class="line">  &lt;link rel&#x3D;&quot;icon&quot; type&#x3D;&quot;image&#x2F;png&quot; sizes&#x3D;&quot;16x16&quot; href&#x3D;&quot;&#x2F;images&#x2F;favicon-16x16-next.png&quot;&gt;</span><br><span class="line">  &lt;link rel&#x3D;&quot;mask-icon&quot; href&#x3D;&quot;&#x2F;images&#x2F;logo.svg&quot; color&#x3D;&quot;#222&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;css&#x2F;main.css&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;lib&#x2F;font-awesome&#x2F;css&#x2F;font-awesome.min.css&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script id&#x3D;&quot;hexo-configurations&quot;&gt;</span><br><span class="line">  var NexT &#x3D; window.NexT || &#123;&#125;;</span><br><span class="line">  var CONFIG &#x3D; &#123;</span><br><span class="line">    hostname: new URL(&#39;https:&#x2F;&#x2F;yiluotalk.com&#39;).hostname,</span><br><span class="line">    root: &#39;&#x2F;&#39;,</span><br><span class="line">    scheme: &#39;Pisces&#39;,</span><br><span class="line">    version: &#39;7.6.0&#39;,</span><br><span class="line">    exturl: false,</span><br><span class="line">    sidebar: &#123;&quot;position&quot;:&quot;left&quot;,&quot;display&quot;:&quot;post&quot;,&quot;padding&quot;:18,&quot;offset&quot;:12,&quot;onmobile&quot;:fals ....</span><br></pre></td></tr></table></figure><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWQzYjgxY2U0NDk5OWZiNzEucG5n?x-oss-process=image/format,png" alt=""></li><li>压测过程中可以随时通过edit来提高用户并发数<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTE1OThiYTMxZWNhOTllZDYucG5n?x-oss-process=image/format,png" alt=""></li><li>表格charts 可以监控rps、平均响应时间、虚拟用户并发数<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWRkOTc3NDQ1NGUzZjcwMjIucG5n?x-oss-process=image/format,png" alt=""></li><li>报告结果也可以下载成<code>CSV格式</code><h5 id="5-简单的总结"><a href="#5-简单的总结" class="headerlink" title="5. 简单的总结"></a>5. 简单的总结</h5>实际工作中确实常用到的还是<code>Jmeter</code>会比较多一些，但是有句老话叫：“用尽天下工具，不如心中有码”， 如果你喜欢更“随性的定制化”，那么就可以试试<code>Locust</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWRlNGJmNmY3ODVjYzdmZDMucG5n?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTQ3MTc4NGI5YTgwODY4YjcucG5n?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Locust性能测试" scheme="https://yiluotalk.com/categories/Locust%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Locust性能测试" scheme="https://yiluotalk.com/tags/Locust%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
  </entry>
  
  <entry>
    <title>装了个虚拟机简明教程</title>
    <link href="https://yiluotalk.com/2020/03/10/%E8%A3%85%E4%BA%86%E4%B8%AA%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/"/>
    <id>https://yiluotalk.com/2020/03/10/%E8%A3%85%E4%BA%86%E4%B8%AA%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</id>
    <published>2020-03-10T08:10:12.000Z</published>
    <updated>2020-03-10T08:11:15.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWZjZjY0OGNjZDhhZjVlNTgucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="1-虚拟机的定义"><a href="#1-虚拟机的定义" class="headerlink" title="1.虚拟机的定义"></a>1.虚拟机的定义</h5><ul><li>虚拟机是一个软件文件，像物理机那样运行。虚拟机中包含典型物理机中包含的所有组件：显示器、硬盘、一个或多个处理器、内存和所有其他硬件，但所有组件都是虚拟化的<blockquote><p>本文首发于伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote></li><li>常用的虚拟机有<code>Parallels Desktop</code>和<code>VMware Fusion</code> 今天先来说一下<code>VMware Fusion</code></li><li><code>VMware Fusion</code>是<code>VMware</code>为<code>Macintosh</code>计算机开发的虚拟机管理程序。<code>VMware Fusion</code>允许基于<code>Intel</code>的<code>Mac</code>在虚拟机上运行<code>Microsoft Windows，Linux，NetWare或Solaris</code>等操作系统</li><li>通过 <code>VMware Fusion</code> 的<code>Unity</code>功能可以实现<code>Windows</code>应用程序和 <code>Mac</code> 应用程序的无缝兼容<h5 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h5></li><li>安装很简单，可以官网下载或者其他网络资源</li><li>下载完毕一步步安装然后点击启动<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTdmNjhkNmY0ZGJmOTZhZTQucG5n?x-oss-process=image/format,png" alt=""><h5 id="3-新建虚拟机"><a href="#3-新建虚拟机" class="headerlink" title="3. 新建虚拟机"></a>3. 新建虚拟机</h5><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTE2ODYxZGNiOTI3OTAwNzAucG5n?x-oss-process=image/format,png" alt=""></li><li>选择安装方法—选择创建自定虚拟机<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTRjN2RhMTBmYTc3Mjc2M2QucG5n?x-oss-process=image/format,png" alt=""></li><li>先装个<code>win10</code>，<code>64位</code>的<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTJmNjQzMmVhNGQzYjE5NDcucG5n?x-oss-process=image/format,png" alt=""></li><li>很简单下一步<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTc2YWJlNmE4NmQ5M2FmNDUucG5n?x-oss-process=image/format,png" alt=""></li><li>启动下虚拟机，由于还没有装系统，肯定是无法使用的<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWFiNWMyZWY3ZDIxY2U1YzYucG5n?x-oss-process=image/format,png" alt=""><h5 id="4-下载系统"><a href="#4-下载系统" class="headerlink" title="4. 下载系统"></a>4. 下载系统</h5></li><li>可以在下面的网址找到自己需要下载的系统，这里还是下载<code>win10</code>的系统<br><a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a>，网站显示如下图<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTMyMmVkYzk2NmNlZDU4M2QucG5n?x-oss-process=image/format,png" alt="image.png"></li><li>可以通过<code>迅雷</code>进行下载<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWMwOWYxMjZhZDI4ODNlYTEucG5n?x-oss-process=image/format,png" alt=""></li><li>系统下载完毕后打开虚拟机设置，把系统的<code>镜像</code>加载进来<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWQxMmE5NmRkZTJmODlkN2UucG5n?x-oss-process=image/format,png" alt=""></li><li>如下图，记得要勾选<code>连接 CD/DVD 驱动器</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTNhMzcyMjI2OTc0ZDdhZGQucG5n?x-oss-process=image/format,png" alt=""><h5 id="5-安装系统"><a href="#5-安装系统" class="headerlink" title="5. 安装系统"></a>5. 安装系统</h5></li><li>重新启动虚拟机<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTViY2VmZGViNTgyYTM3NDEucG5n?x-oss-process=image/format,png" alt=""></li><li>跟进自己的需求一步步配置<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTllYTRmYWFiNzgzODE0MTMucG5n?x-oss-process=image/format,png" alt=""></li><li>开始安装<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBlZWZlMGY2ZTZiNTI3NjcucG5n?x-oss-process=image/format,png" alt=""></li><li>这里选择了<code>win10</code>专业版<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTUyYzQwYmRjNjQwZmZjMTMucG5n?x-oss-process=image/format,png" alt=""></li><li>安装中<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTc0OTMwYzg1YWU4MTRjYjEucG5n?x-oss-process=image/format,png" alt=""></li><li>安装结束可以愉快的使用系统了，但….其实最好还是要安装下<code>VMware Tools</code><br>原因其实上面也有提过，安装后可以使用<code>Unity</code>功能实现 <code>Windows</code>应用程序和 <code>Mac</code> 应用程序的无缝兼容<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTM3YzlkZDA1OTVhYjE5YjMucG5n?x-oss-process=image/format,png" alt=""></li><li>点击菜单栏的虚拟机，选择安装<code>VMware Tools</code> 然后点击安装<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTI3ZDBkYzQ0M2ViZTA1MTkucG5n?x-oss-process=image/format,png" alt=""></li><li>也可以自己选择<code>setup64</code>进行安装<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBlNDExMjk2NDNmZjEwYzkucG5n?x-oss-process=image/format,png" alt=""></li><li>一步步安装<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWNmMGRmOWI2YzM0MDMzMWYucG5n?x-oss-process=image/format,png" alt=""></li><li>这样再看下就有<code>Unity</code> 功能了<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTFmYmI4MWQ3ZTg0ZTAyYjcucG5n?x-oss-process=image/format,png" alt="">)<img src="https://img-blog.csdnimg.cn/20200215123514969.jpeg" alt="在这里插入图片描述"><h5 id="6-使用情况"><a href="#6-使用情况" class="headerlink" title="6. 使用情况"></a>6. 使用情况</h5></li><li>整体来讲<code>性能</code>还算过的去，如果要不是工作目的，运行一些游戏的话。可以关掉虚拟机然后加一些虚拟机的配置再重新启动虚拟机<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWRlNGJmNmY3ODVjYzdmZDMucG5n?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTQ3MTc4NGI5YTgwODY4YjcucG5n?x-oss-process=image/format,png" alt="关注公众号获取更多内容"><blockquote><p>欢迎下方【戳一下】【点赞】<br>Author：伊洛Yiluo<br>愿你享受每一天，Just Enjoy !</p></blockquote></li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="好用软件" scheme="https://yiluotalk.com/categories/%E5%A5%BD%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="好用软件" scheme="https://yiluotalk.com/tags/%E5%A5%BD%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="软件测试基础" scheme="https://yiluotalk.com/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
      <category term="功能业务测试" scheme="https://yiluotalk.com/tags/%E5%8A%9F%E8%83%BD%E4%B8%9A%E5%8A%A1%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Python 通过邮件发送测试报告</title>
    <link href="https://yiluotalk.com/2020/03/09/Python%20%E9%80%9A%E8%BF%87%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"/>
    <id>https://yiluotalk.com/2020/03/09/Python%20%E9%80%9A%E8%BF%87%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/</id>
    <published>2020-03-09T14:06:59.000Z</published>
    <updated>2020-03-09T14:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWZjZjY0OGNjZDhhZjVlNTgucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="1-自动化测试报告"><a href="#1-自动化测试报告" class="headerlink" title="1. 自动化测试报告"></a>1. 自动化测试报告</h5><ul><li>自动化的测试报告一般会通过邮件或钉钉机器人发送，或是直接显示在质量管理平台上来输出数据供大家查看。今天先来简单的说下Python发送邮件<blockquote><p>本文首发于伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote><h5 id="2-Python-SMTP发送邮件"><a href="#2-Python-SMTP发送邮件" class="headerlink" title="2. Python SMTP发送邮件"></a>2. Python SMTP发送邮件</h5></li><li><code>SMTP</code>（Simple Mail Transfer Protocol）即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。<h5 id="3-使用其他邮件服务商的-SMTP-访问"><a href="#3-使用其他邮件服务商的-SMTP-访问" class="headerlink" title="3. 使用其他邮件服务商的 SMTP 访问"></a>3. 使用其他邮件服务商的 <code>SMTP</code> 访问</h5></li><li>这里来用网易的<code>163邮箱</code>举例子</li><li>登陆邮箱然后进入下图的页面，该<code>勾的勾上</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTk0ZTM4ZWUwYTkxM2Q4ZGUucG5n?x-oss-process=image/format,png" alt="截图来自网易邮箱"></li><li>然后设置一下<code>客户端授权码</code><br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-m95zub9T-1583762176638)(<a href="https://upload-images.jianshu.io/upload_images/5959551-5c3cdbfd8cc4ecad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)]" target="_blank" rel="noopener">https://upload-images.jianshu.io/upload_images/5959551-5c3cdbfd8cc4ecad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)]</a></li><li>发短信开启<h5 id="4-简单的实例"><a href="#4-简单的实例" class="headerlink" title="4.简单的实例"></a>4.简单的实例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 伊洛Yiluo https://yiluotalk.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMail</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.mail_host = <span class="string">"smtp.163.com"</span></span><br><span class="line">        self.mail_user = <span class="string">"@163.com"</span></span><br><span class="line">        self.mail_pass = <span class="string">""</span> <span class="comment"># 163客户端授权密码</span></span><br><span class="line"></span><br><span class="line">        self.sender = <span class="string">'@163.com'</span></span><br><span class="line">        self.receivers = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(self)</span>:</span></span><br><span class="line">        body = <span class="string">'Dear all:\n接口自动化测试报告如下：\n   测试用例集合：&#123;&#125;\n   运行结果：&#123;&#125;'</span>.format(<span class="string">'xxxx'</span>, <span class="string">'xxxx'</span>)</span><br><span class="line">        tm = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime(time.time()))</span><br><span class="line">        message = MIMEText(body, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">        message[<span class="string">'From'</span>] = self.mail_user</span><br><span class="line">        message[<span class="string">'To'</span>] = self.receivers</span><br><span class="line"></span><br><span class="line">        subject = <span class="string">'接口自动化报告测试'</span></span><br><span class="line">        message[<span class="string">'Subject'</span>] = Header(subject + <span class="string">'_'</span> + tm, <span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            smtpObj = smtplib.SMTP()</span><br><span class="line">            smtpObj = smtplib.SMTP_SSL(self.mail_host, <span class="number">465</span>)</span><br><span class="line">            smtpObj.login(self.mail_user, self.mail_pass)</span><br><span class="line">            smtpObj.sendmail(self.sender, self.receivers, message.as_string())</span><br><span class="line">            print(<span class="string">'send mail ok'</span>)</span><br><span class="line">        <span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">            print(<span class="string">'send mail fail'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    send = TestMail()</span><br><span class="line">    send.send_mail()</span><br></pre></td></tr></table></figure><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTQ1OGYyZDIwZTEzMjEzOGUuanBlZw?x-oss-process=image/format,png" alt=""></li></ul><h5 id="5-读取配置"><a href="#5-读取配置" class="headerlink" title="5.读取配置"></a>5.读取配置</h5><ul><li>通常来讲一般发送邮件只是自动化框架的一个模块。封装发送邮件的时候，配置都是读取的</li><li>来简单的创建一个<code>&#39;config.ini&#39;</code>的配置文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 伊洛Yiluo https://yiluotalk.com</span></span><br><span class="line"></span><br><span class="line">[mail]</span><br><span class="line"><span class="comment">#发送邮件信息</span></span><br><span class="line">mail_host = smtp<span class="number">.163</span>.com</span><br><span class="line">mail_user = @<span class="number">163.</span>com</span><br><span class="line">mail_pass =                <span class="comment"># 163客户端授权密码</span></span><br><span class="line"></span><br><span class="line">sender = @<span class="number">163.</span>com</span><br><span class="line">receivers =</span><br></pre></td></tr></table></figure></li><li>来读取一下配置<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 伊洛Yiluo https://yiluotalk.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> configparser <span class="keyword">import</span> ConfigParser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMail</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.config = ConfigParser()</span><br><span class="line">        self.conf_path = str(Path(<span class="string">'config.ini'</span>).absolute())  <span class="comment"># 读取绝对路径</span></span><br><span class="line"></span><br><span class="line">        self.config.read(self.conf_path, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(self)</span>:</span></span><br><span class="line">        body = <span class="string">'Dear all:\nDEMO 接口自动化测试报告：\n   测试用例集合：&#123;&#125;\n   运行结果：&#123;&#125;'</span>.format(<span class="string">'xxxx'</span>, <span class="string">'xxxx'</span>)</span><br><span class="line">        tm = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime(time.time()))</span><br><span class="line">        message = MIMEText(body, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">        message[<span class="string">'From'</span>] = self.config.get(<span class="string">'mail'</span>, <span class="string">'sender'</span>)</span><br><span class="line">        message[<span class="string">'To'</span>] = self.config.get(<span class="string">'mail'</span>, <span class="string">'receivers'</span>)</span><br><span class="line"></span><br><span class="line">        subject = <span class="string">'接口自动化测试报告'</span></span><br><span class="line">        message[<span class="string">'Subject'</span>] = Header(subject + <span class="string">'_'</span> + tm, <span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            smtpObj = smtplib.SMTP()</span><br><span class="line">            smtpObj = smtplib.SMTP_SSL(self.config.get(<span class="string">'mail'</span>, <span class="string">'mail_host'</span>), <span class="number">465</span>)</span><br><span class="line">            smtpObj.login(self.config.get(<span class="string">'mail'</span>, <span class="string">'mail_user'</span>), self.config.get(<span class="string">'mail'</span>, <span class="string">'mail_pass'</span>))</span><br><span class="line">            smtpObj.sendmail(self.config.get(<span class="string">'mail'</span>, <span class="string">'sender'</span>), self.config.get(<span class="string">'mail'</span>, <span class="string">'receivers'</span>), message.as_string())</span><br><span class="line">            print(<span class="string">'send mail ok'</span>)</span><br><span class="line">        <span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">            print(<span class="string">'send mail fail'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    send = TestMail()</span><br><span class="line">    send.send_mail()</span><br></pre></td></tr></table></figure></li><li>打开邮箱来看看邮件<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTk3OTJhODE3NmNhOGY1YjQucG5n?x-oss-process=image/format,png" alt="截图来自QQ邮箱"></li></ul><h5 id="6-发送邮件带附件"><a href="#6-发送邮件带附件" class="headerlink" title="6. 发送邮件带附件"></a>6. 发送邮件带附件</h5><ul><li><p>发邮件有时会需要发送附件</p></li><li><p>由于平时看到一些好的文章或者书会喜欢发送到<code>kindle</code>上面查看，其实推到<code>kindle</code>就是相当于给自己的<code>kindle设备</code>发了带有书籍文件附件的邮件，通常是<code>mobi</code>格式</p></li><li><p>登录亚马逊官方，如下图查看自己设备对应的邮箱<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTJkMDVmNzU0Mjg0YWFkZDQucG5n?x-oss-process=image/format,png" alt="截图来自亚马逊"></p></li><li><p>去掉其他多余功能，简化下完，剩邮件部分代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 伊洛Yiluo https://yiluotalk.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_kindle</span><span class="params">()</span>:</span></span><br><span class="line">    mail_host = <span class="string">"smtp.163.com"</span></span><br><span class="line">    mail_user = <span class="string">"@163.com"</span></span><br><span class="line">    mail_pass = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    sender = <span class="string">'@163.com'</span></span><br><span class="line">    receivers = <span class="string">'@kindle.cn'</span></span><br><span class="line"></span><br><span class="line">    message = MIMEMultipart()</span><br><span class="line">    message[<span class="string">'From'</span>] = mail_user</span><br><span class="line">    message[<span class="string">'To'</span>] = receivers</span><br><span class="line">    subject = <span class="string">'&#123;&#125;'</span>.format(filename)</span><br><span class="line">    message[<span class="string">'Subject'</span>] = Header(subject, <span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    message.attach(MIMEText(<span class="string">'&#123;&#125;'</span>.format(filename), <span class="string">'plain'</span>, <span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    att1 = MIMEText(open(<span class="string">'/Users/Documents/book/&#123;&#125;'</span>.format(filename), <span class="string">'rb'</span>).read(), <span class="string">'base64'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    att1[<span class="string">"Content-Type"</span>] = <span class="string">'application/octet-stream'</span></span><br><span class="line">    att1[<span class="string">"Content-Disposition"</span>] = <span class="string">'attachment; filename="book.mobi"'</span></span><br><span class="line">    message.attach(att1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        smtpObj = smtplib.SMTP_SSL(mail_host, <span class="number">465</span>)</span><br><span class="line">        smtpObj.login(mail_user, mail_pass)</span><br><span class="line">        smtpObj.sendmail(sender, receivers, message.as_string())</span><br><span class="line">        print(<span class="string">"书籍已成功推送到您的kindle设备"</span>)</span><br><span class="line">    <span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">        print(<span class="string">"Error: 无法推送书籍"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    filename = input(<span class="string">"请输入您要推动到Kindle的书籍，请带Mobi后缀："</span>)</span><br><span class="line">    os.path.split(filename)</span><br><span class="line">    send_kindle()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200215123514969.jpeg" alt="在这里插入图片描述"></p></li><li><p>运行脚本在如下会成功看到推送的内容<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWU1MzJjZTQ4OGJhZDI5NjMucG5n?x-oss-process=image/format,png" alt="截图来自亚马逊"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWRlNGJmNmY3ODVjYzdmZDMucG5n?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTQ3MTc4NGI5YTgwODY4YjcucG5n?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p><blockquote><p>欢迎下方【戳一下】【点赞】<br>Author：伊洛Yiluo<br>愿你享受每一天，Just Enjoy !</p></blockquote></li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="自动化测试" scheme="https://yiluotalk.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="UI自动化测试" scheme="https://yiluotalk.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="接口自动化测试" scheme="https://yiluotalk.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="测试开发" scheme="https://yiluotalk.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="自动化测试" scheme="https://yiluotalk.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Python configparser 的基础使用（一）</title>
    <link href="https://yiluotalk.com/2020/02/15/Python%20configparser%20%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://yiluotalk.com/2020/02/15/Python%20configparser%20%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-02-15T04:45:59.000Z</published>
    <updated>2020-02-15T04:46:13.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWZjZjY0OGNjZDhhZjVlNTgucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h5><p>在编写程序时，会用到一些配置。一般配置都会写入<code>.ini</code>的文件。如果要使用<code>python</code>读取配置，就可以使用<code>python</code>自带的<code>configparser</code>模块</p><blockquote><p>本文首发于伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote><h5 id="2-ini文件结构"><a href="#2-ini文件结构" class="headerlink" title="2. ini文件结构"></a>2. ini文件结构</h5><ul><li>键值对可以使用<code>&#39; = &#39;</code>、 <code>&#39; : &#39;</code> 分隔</li><li><code>section</code>区分大小写</li><li><code>key</code>的名字不区分大小写</li><li>键值对中头部、尾部的空白符被去掉</li><li>配置文件注释以 <code>#</code>或者<code>;</code>为开头<h5 id="3-简单的使用"><a href="#3-简单的使用" class="headerlink" title="3. 简单的使用"></a>3. 简单的使用</h5></li><li>手写一个段代码生成<code>ini文件</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line">config[<span class="string">'DEFAULT'</span>] = &#123;</span><br><span class="line">    <span class="string">'ServerAliveInterval'</span>: <span class="string">'45'</span>,</span><br><span class="line">    <span class="string">'Compression'</span>: <span class="string">'yes'</span>,</span><br><span class="line">    <span class="string">'CompressionLevel'</span>: <span class="string">'9'</span></span><br><span class="line">&#125;</span><br><span class="line">config[<span class="string">'bitbucket.org'</span>] = &#123;&#125;</span><br><span class="line">config[<span class="string">'bitbucket.org'</span>][<span class="string">'User'</span>] = <span class="string">'hg'</span></span><br><span class="line">config[<span class="string">'topsectet.server.com'</span>] = &#123;&#125;</span><br><span class="line">topsecret = config[<span class="string">'topsectet.server.com'</span>]</span><br><span class="line">topsecret[<span class="string">'Port'</span>] = <span class="string">'50022'</span></span><br><span class="line">topsecret[<span class="string">'ForwardX11'</span>] = <span class="string">'no'</span></span><br><span class="line">config[<span class="string">'DEFAULT'</span>][<span class="string">'ForwardX11'</span>] = <span class="string">'yes'</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'example.ini'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> configfile:</span><br><span class="line">    config.write(configfile)</span><br></pre></td></tr></table></figure></li><li>查看生成的<code>ini文件</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">serveraliveinterval = <span class="number">45</span></span><br><span class="line">compression = yes</span><br><span class="line">compressionlevel = <span class="number">9</span></span><br><span class="line">forwardx11 = yes</span><br><span class="line"></span><br><span class="line">[bitbucket.org]</span><br><span class="line">user = hg</span><br><span class="line"></span><br><span class="line">[topsectet.server.com]</span><br><span class="line">port = <span class="number">50022</span></span><br><span class="line">forwardx11 = no</span><br></pre></td></tr></table></figure><h5 id="4-读取配置文件"><a href="#4-读取配置文件" class="headerlink" title="4. 读取配置文件"></a>4. 读取配置文件</h5></li><li>现在读取配置文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> configparser</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>config = configparser.ConfigParser()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>config.sections()</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></li><li>由于没有读配置文件<code>example.ini</code> ，所以<code>sections</code>为空，现在读取下配置文件再查看下结果<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>config.read(<span class="string">'example.ini'</span>)</span><br><span class="line">[<span class="string">'example.ini'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>config.sections()</span><br><span class="line">[<span class="string">'bitbucket.org'</span>, <span class="string">'topsectet.server.com'</span>]</span><br></pre></td></tr></table></figure></li><li>看到可以正常的读取到配置，再来单独的读取一条配置<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">'bitbucket.org'</span>][<span class="string">'user'</span>]</span><br><span class="line"><span class="string">'hg'</span></span><br></pre></td></tr></table></figure></li><li>读取多条配置<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> config[<span class="string">'DEFAULT'</span>]:</span><br><span class="line"><span class="meta">... </span>    print(i)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">serveraliveinterval</span><br><span class="line">compression</span><br><span class="line">compressionlevel</span><br><span class="line">forwardx11</span><br></pre></td></tr></table></figure><h5 id="5-一般使用"><a href="#5-一般使用" class="headerlink" title="5. 一般使用"></a>5. 一般使用</h5>通常来讲一般公司都会有几套环境：<code>开发环境、测试环境、灰度环境、生产环境</code><br>在做接口自动化时就需要针对不同的环境跑对应的用例或是测试集，不同环境的配置就可以写入<code>ini</code>的配置文件方便后续调用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line">[test_env]</span><br><span class="line"><span class="comment"># 测试服配置</span></span><br><span class="line">tester = 伊洛yiluo</span><br><span class="line">environment = test</span><br><span class="line">host =</span><br><span class="line">login_name =</span><br><span class="line">login_password =</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[grey_env]</span><br><span class="line"><span class="comment"># 灰度服配置</span></span><br><span class="line">tester = 伊洛yiluo</span><br><span class="line">environment = grey</span><br><span class="line">host =</span><br><span class="line">login_name =</span><br><span class="line">login_password =</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[release_env]</span><br><span class="line"><span class="comment"># 正式配置</span></span><br><span class="line">tester = 伊洛yiluo</span><br><span class="line">environment = release</span><br><span class="line">host =</span><br><span class="line">login_name =</span><br><span class="line">login_password =</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[mail]</span><br><span class="line"><span class="comment"># 邮件报告配置</span></span><br><span class="line">smtpserver =</span><br><span class="line">sender =</span><br><span class="line">receiver =</span><br><span class="line">username =</span><br><span class="line">password =</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[dingding]</span><br><span class="line"><span class="comment"># dinging报告配置</span></span><br><span class="line">robot_url =</span><br><span class="line">messageUrl =</span><br></pre></td></tr></table></figure><h5 id="待续……"><a href="#待续……" class="headerlink" title="待续……"></a>待续……</h5><img src="https://img-blog.csdnimg.cn/20200215123514969.jpeg" alt="在这里插入图片描述"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWRlNGJmNmY3ODVjYzdmZDMucG5n?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTQ3MTc4NGI5YTgwODY4YjcucG5n?x-oss-process=image/format,png" alt="关注公众号获取更多内容"><blockquote><p>欢迎下方【戳一下】【点赞】<br>Author：伊洛Yiluo<br>愿你享受每一天，Just Enjoy !</p></blockquote></li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Python模块" scheme="https://yiluotalk.com/tags/Python%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Python基础 logging模块使用（一）</title>
    <link href="https://yiluotalk.com/2020/02/13/Python%E5%9F%BA%E7%A1%80%20logging%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://yiluotalk.com/2020/02/13/Python%E5%9F%BA%E7%A1%80%20logging%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-02-13T03:40:59.000Z</published>
    <updated>2020-02-13T04:19:17.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTc4ZDBlZDNhNDJlOGFkZGIucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="一-日志的作用"><a href="#一-日志的作用" class="headerlink" title="一. 日志的作用"></a>一. 日志的作用</h5><ul><li>日志是对软件执行时所发生事件的一种追踪方式，无论是开发人员还是测试人员，日志的重要的作用应该是不言而喻的；不但可以帮助开发定位缺陷解决问题，也可以辅助在测试过程中的测试工程师定位缺陷。<br>作为测试人员更应该重视日志，无论是单元测试去捕获<code>Traceback</code>，还是做<code>接口／UI自动化</code>都应当输出有必要的日志<blockquote><p>本文首发自伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote></li><li>那么<code>python</code>中，怎么可以做到一个算是标准的日志记录呢？ 很多人会使用<code>print</code>直接输出的方式，但是其实这事极为不规范的做法，来看看官网上怎么说<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTE4YzExNGYxZTVhMTE2MDQucG5n?x-oss-process=image/format,png" alt="截图来自官网"></li><li>今天就来简单的介绍下<code>python logging</code>模块的基本使用方法<h5 id="二-日志的级别"><a href="#二-日志的级别" class="headerlink" title="二. 日志的级别"></a>二. 日志的级别</h5></li><li>5个级别分别是，可以注意到源码中，<code>WARN = WARNING</code>，后续使用中两者是一个意思<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTQ5ZGVhZmNhMjg3MjI4ZjgucG5n?x-oss-process=image/format,png" alt="截图来自官网"></li><li>每个级别都有对应的一个值<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWY0ZDQwOTI4ODQzYmRhNWIucG5n?x-oss-process=image/format,png" alt=""></li></ul><h5 id="三-logging的工作流程"><a href="#三-logging的工作流程" class="headerlink" title="三. logging的工作流程"></a>三. logging的工作流程</h5><ul><li>还是先来看看官网上的流程图<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM1NDY2ZjEwNjA3NTNmNjMucG5n?x-oss-process=image/format,png" alt="截图来自官网"></li><li>可以看到以下几种类型，<code>Logger、LogRecord、Filter、Handler、Formatter</code></li></ul><ol><li><code>Logger</code>：是进行日志记录时创建的对象</li><li><code>LogRecord</code>：日志记录器，将日志传到相应的处理器处理</li><li><code>Handler</code>：即用来处理日志记录的类</li><li><code>Filter</code> ：过滤器</li><li><code>Formatter</code>：格式化器, 指明了最终输出中日志记录的布局<h5 id="四-简单的例子"><a href="#四-简单的例子" class="headerlink" title="四. 简单的例子"></a>四. 简单的例子</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">'调试信息'</span>)</span><br><span class="line">logging.info(<span class="string">'信息消息'</span>)</span><br><span class="line">logging.warning(<span class="string">'错误：config file %s not found'</span>, <span class="string">'server.conf'</span>)</span><br><span class="line">logging.error(<span class="string">'发生错误'</span>)</span><br><span class="line">logging.critical(<span class="string">'关键错误'</span>)</span><br></pre></td></tr></table></figure></li></ol><ul><li>看以下输出结果<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WARNING:root:错误：config file server.conf <span class="keyword">not</span> found</span><br><span class="line">ERROR:root:发生错误</span><br><span class="line">CRITICAL:root:关键错误</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="五-basicConfig-使用方法"><a href="#五-basicConfig-使用方法" class="headerlink" title="五. basicConfig() 使用方法"></a>五. basicConfig() 使用方法</h5></li><li><code>basicConfig()</code>主要做一些基础的配置</li><li>我们将日志的结果输出到一个名为<code>&quot;test.log&quot;</code>的文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(filename=<span class="string">"test.log"</span>, filemode=<span class="string">"w"</span>, level=logging.DEBUG)</span><br><span class="line">logging.debug(<span class="string">'This is a debug message'</span>)</span><br><span class="line">logging.info(<span class="string">'This is an info message'</span>)</span><br><span class="line">logging.warning(<span class="string">'This is a warning message'</span>)</span><br><span class="line">logging.error(<span class="string">'This is an error message'</span>)</span><br><span class="line">logging.critical(<span class="string">'This is a critical message'</span>)</span><br></pre></td></tr></table></figure></li><li>打开<code>&quot;test.log&quot;</code>文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:root:This <span class="keyword">is</span> a debug message</span><br><span class="line">INFO:root:This <span class="keyword">is</span> an info message</span><br><span class="line">WARNING:root:This <span class="keyword">is</span> a warning message</span><br><span class="line">ERROR:root:This <span class="keyword">is</span> an error message</span><br><span class="line">CRITICAL:root:This <span class="keyword">is</span> a critical message</span><br></pre></td></tr></table></figure></li><li><code>filename</code>：即日志输出的文件名</li><li><code>filemode</code>：这个是指定日志文件的写入方式</li><li><code>format</code>：指定日志信息的输出格式</li><li><code>datefmt</code>：指定时间的输出格式</li><li><code>level</code>：指定日志输出的类别<h5 id="六-自定义-Logger"><a href="#六-自定义-Logger" class="headerlink" title="六. 自定义 Logger"></a>六. 自定义 Logger</h5></li><li>定义一个<code>Logger</code>，名字为<code>test_log</code>, 通常默认为 <code>__name__</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, format=<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line">logger = logging.getLogger(<span class="string">'test_log'</span>)</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">'info log1'</span>)</span><br><span class="line">logger.debug(<span class="string">'debug log'</span>)</span><br><span class="line">logger.warning(<span class="string">'warning log'</span>)</span><br><span class="line">logger.info(<span class="string">'info log2'</span>)</span><br><span class="line">logger.info(<span class="string">'info log3'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical log'</span>)</span><br></pre></td></tr></table></figure></li><li>查看文件的日志结果<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">09</span>:<span class="number">49</span>:<span class="number">51</span>,<span class="number">040</span> - test_log - INFO - info log1</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">09</span>:<span class="number">49</span>:<span class="number">51</span>,<span class="number">040</span> - test_log - WARNING - warning log</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">09</span>:<span class="number">49</span>:<span class="number">51</span>,<span class="number">040</span> - test_log - INFO - info log2</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">09</span>:<span class="number">49</span>:<span class="number">51</span>,<span class="number">040</span> - test_log - INFO - info log3</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">09</span>:<span class="number">49</span>:<span class="number">51</span>,<span class="number">040</span> - test_log - CRITICAL - critical log</span><br></pre></td></tr></table></figure><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTI5YzVlMGNlN2JmMmJjMjguanBlZw?x-oss-process=image/format,png" alt=""></li></ul><h5 id="七-设置等级"><a href="#七-设置等级" class="headerlink" title="七. 设置等级"></a>七. 设置等级</h5><ul><li>设置等级为<code>WARNING</code>，打印出包括这个等级及这个等级之上级别的日志<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, format=<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line">logger = logging.getLogger(<span class="string">'test_log'</span>)</span><br><span class="line">logger.setLevel(level=logging.WARNING)</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">'info log1'</span>)</span><br><span class="line">logger.debug(<span class="string">'debug log'</span>)</span><br><span class="line">logger.warning(<span class="string">'warning log'</span>)</span><br><span class="line">logger.info(<span class="string">'info log2'</span>)</span><br><span class="line">logger.info(<span class="string">'info log3'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical log'</span>)</span><br></pre></td></tr></table></figure></li><li>如下按照等级打印出了日志的信息<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">57</span>,<span class="number">325</span> - test_log - WARNING - warning log</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">57</span>,<span class="number">325</span> - test_log - CRITICAL - critical log</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="八-Handler-的使用"><a href="#八-Handler-的使用" class="headerlink" title="八. Handler 的使用"></a>八. Handler 的使用</h5></li><li>重新记录一个日志的文件名为<code>&#39;test_log.log&#39;</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(<span class="string">'test_log'</span>)</span><br><span class="line">logger.setLevel(level=logging.DEBUG)</span><br><span class="line">handler = logging.FileHandler(<span class="string">'test_log.log'</span>)</span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line">handler.setFormatter(formatter)</span><br><span class="line">logger.addHandler(handler)</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">'info log1'</span>)</span><br><span class="line">logger.debug(<span class="string">'debug log'</span>)</span><br><span class="line">logger.warning(<span class="string">'warning log'</span>)</span><br><span class="line">logger.info(<span class="string">'info log2'</span>)</span><br><span class="line">logger.info(<span class="string">'info log3'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical log'</span>)</span><br></pre></td></tr></table></figure></li><li>查看日志文件的结果为<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">55</span>,<span class="number">888</span> - test_log - INFO - info log1</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">55</span>,<span class="number">888</span> - test_log - DEBUG - debug log</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">55</span>,<span class="number">889</span> - test_log - WARNING - warning log</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">55</span>,<span class="number">889</span> - test_log - INFO - info log2</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">55</span>,<span class="number">889</span> - test_log - INFO - info log3</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">55</span>,<span class="number">889</span> - test_log - CRITICAL - critical log</span><br></pre></td></tr></table></figure><h5 id="九-多个handler"><a href="#九-多个handler" class="headerlink" title="九. 多个handler"></a>九. 多个handler</h5></li><li>一个<code>handler</code>输出到<code>控制台</code>，一个<code>handler</code>输出到日志文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(<span class="string">'test_log'</span>)</span><br><span class="line">logger.setLevel(level=logging.INFO)</span><br><span class="line"></span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出到控制台的handler</span></span><br><span class="line">console_handler = logging.StreamHandler(sys.stdout)</span><br><span class="line">console_handler.setLevel(level=logging.INFO)</span><br><span class="line">console_handler.setFormatter(formatter)</span><br><span class="line">logger.addHandler(console_handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出到文件的handler</span></span><br><span class="line">file_handler = logging.FileHandler(<span class="string">'test_log.log'</span>)</span><br><span class="line">file_handler.setLevel(level=logging.DEBUG)</span><br><span class="line">file_handler.setFormatter(formatter)</span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">'info log1'</span>)</span><br><span class="line">logger.debug(<span class="string">'debug log'</span>)</span><br><span class="line">logger.warning(<span class="string">'warning log'</span>)</span><br><span class="line">logger.info(<span class="string">'info log2'</span>)</span><br><span class="line">logger.info(<span class="string">'info log3'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical log'</span>)</span><br></pre></td></tr></table></figure></li><li>输出都控制台<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">11</span>:<span class="number">05</span>:<span class="number">49</span>,<span class="number">000</span> - test_log - INFO - info log1</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">11</span>:<span class="number">05</span>:<span class="number">49</span>,<span class="number">001</span> - test_log - WARNING - warning log</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">11</span>:<span class="number">05</span>:<span class="number">49</span>,<span class="number">001</span> - test_log - INFO - info log2</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">11</span>:<span class="number">05</span>:<span class="number">49</span>,<span class="number">001</span> - test_log - INFO - info log3</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">11</span>:<span class="number">05</span>:<span class="number">49</span>,<span class="number">001</span> - test_log - CRITICAL - critical log</span><br></pre></td></tr></table></figure></li><li>输出到日志<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">11</span>:<span class="number">06</span>:<span class="number">54</span>,<span class="number">721</span> - test_log - INFO - info log1</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">11</span>:<span class="number">06</span>:<span class="number">54</span>,<span class="number">722</span> - test_log - WARNING - warning log</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">11</span>:<span class="number">06</span>:<span class="number">54</span>,<span class="number">722</span> - test_log - INFO - info log2</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">11</span>:<span class="number">06</span>:<span class="number">54</span>,<span class="number">722</span> - test_log - INFO - info log3</span><br><span class="line"><span class="number">2020</span><span class="number">-02</span><span class="number">-13</span> <span class="number">11</span>:<span class="number">06</span>:<span class="number">54</span>,<span class="number">722</span> - test_log - CRITICAL - critical log</span><br></pre></td></tr></table></figure></li></ul><h5 id="待续文件配置，配置共享等……"><a href="#待续文件配置，配置共享等……" class="headerlink" title="待续文件配置，配置共享等……"></a>待续文件配置，配置共享等……</h5><p><img src="https://img-blog.csdnimg.cn/20200112210733483.jpeg" alt="在这里插入图片描述"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTEwOGI2MjEwODkyZTk4ZDIucG5n?x-oss-process=image/format,png" alt=""></p><blockquote><p>欢迎下方【戳一下】【点赞】<br>Author：伊洛Yiluo<br>愿你享受每一天，Just Enjoy !</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWE1YWIwZTk4OTA0NjZhNWUucG5n?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Python模块" scheme="https://yiluotalk.com/tags/Python%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>一篇文学会 Pytest 测试框架</title>
    <link href="https://yiluotalk.com/2020/01/12/%E4%B8%80%E7%AF%87%E6%96%87%E5%AD%A6%E4%BC%9A%20Pytest%20%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>https://yiluotalk.com/2020/01/12/%E4%B8%80%E7%AF%87%E6%96%87%E5%AD%A6%E4%BC%9A%20Pytest%20%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</id>
    <published>2020-01-12T13:18:59.000Z</published>
    <updated>2020-01-12T13:27:51.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWQ2NzU0NzcxYjhkNzRkN2IucG5n?x-oss-process=image/format,png" alt=""></p><p>之前有介绍过<code>python</code>自带的<code>Unittest</code>单元测试框架，<a href="https://www.jianshu.com/p/5bb5340e0693" target="_blank" rel="noopener">Python 自动化测试实战 Zero to Hero 单元测试框架unittest的使用</a>，今天再来简单的讲诉下测试框架<code>pytest</code></p><blockquote><p>本文首发自伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！<br>#####1. 安装开始</p></blockquote><ul><li>直接使用<code>pip</code>安装就可以，<code>pytest</code>支持<code>python</code>的<code>2.0</code>或<code>3.0</code>版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com</span><br><span class="line">pip install -U pytest</span><br></pre></td></tr></table></figure></li><li>检查版本，校验下是否安装成功<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com</span><br><span class="line">(yiluo) ➜  ~ pytest --version</span><br></pre></td></tr></table></figure><h5 id="2-pytest的基础语法规范"><a href="#2-pytest的基础语法规范" class="headerlink" title="2. pytest的基础语法规范"></a>2. pytest的基础语法规范</h5></li><li>文件名应必须以<code>test</code>开头或结尾，例如<code>test_example.py</code>或<code>example_test.py</code></li><li>如果将测试定义为类上的方法，类名应以“ <code>Test</code>”开头。例如，<code>TestExample</code>。且不包含<code>__init__</code>方法</li><li>测试方法名称或函数名称应以<code>test_</code>开头，例如<code>test_example</code>，名称与该模式不匹配的方法将不会作为测试执行</li><li>按照命名的约定举个例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com</span><br><span class="line">- demo_tests&#x2F;</span><br><span class="line">    - test_example.py</span><br></pre></td></tr></table></figure><h5 id="3-开始测试"><a href="#3-开始测试" class="headerlink" title="3. 开始测试"></a>3. 开始测试</h5></li><li><code>例子1</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com</span><br><span class="line">def func(x):</span><br><span class="line">    return x + 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_answer():</span><br><span class="line">    assert func(3) &#x3D;&#x3D; 5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com</span><br><span class="line">(yiluo) ➜  pytest pytest</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform darwin -- Python 3.7.5, pytest-5.3.2, py-1.8.0, pluggy-0.13.1</span><br><span class="line">plugins: allure-pytest-2.8.6, rerunfailures-5.0</span><br><span class="line">collected 1 item</span><br><span class="line"></span><br><span class="line">test_sample.py F                                               [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">____________________________ test_answer _____________________________</span><br><span class="line"></span><br><span class="line">    def test_answer():</span><br><span class="line">&gt;       assert func(3) &#x3D;&#x3D; 5</span><br><span class="line">E       assert 4 &#x3D;&#x3D; 5</span><br><span class="line">E        +  where 4 &#x3D; func(3)</span><br><span class="line"></span><br><span class="line">test_sample.py:6: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure></li><li><code>例子2</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com</span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sum(num1, num2):</span><br><span class="line">    return num1 + num2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_sum():</span><br><span class="line">    assert sum(3, 7) &#x3D;&#x3D; 10</span><br></pre></td></tr></table></figure></li><li>运行查看结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform darwin -- Python 3.7.5, pytest-5.3.2, py-1.8.0, pluggy-0.13.1</span><br><span class="line"></span><br><span class="line">plugins: allure-pytest-2.8.6, rerunfailures-5.0</span><br><span class="line">collected 1 item                                                                        </span><br><span class="line"></span><br><span class="line">test_example.py .                                                                 [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 passed in 0.01s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test_example.py .</span><br></pre></td></tr></table></figure></li><li>注意<code>test_example.py .</code>后面有一个点<code>.</code>，一个点就代表执行了一条测试用例<br>执行多项测试</li><li>如果需要获取更多信息的话，后面加上<code>-v</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">collected 1 item                                                                        </span><br><span class="line"></span><br><span class="line">test_example.py::test_sum PASSED                                                  [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 passed in 0.01s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWY1ZTljOWY5MGRmOGQ2YzIuanBlZw?x-oss-process=image/format,png" alt=""></li><li>再加一条用例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com</span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sum(num1, num2):</span><br><span class="line">    return num1 + num2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_sum():</span><br><span class="line">    assert sum(3, 7) &#x3D;&#x3D; 10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_sum_output_type():</span><br><span class="line">    assert type(sum(1, 2)) is int</span><br></pre></td></tr></table></figure></li><li>运行一下看下结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com</span><br><span class="line">collected 2 items                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py::test_sum PASSED                                                  [ 50%]</span><br><span class="line">test_example.py::test_sum_output_type PASSED                                      [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2 passed in 0.01s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure></li><li>再试下用例执行不成功<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com</span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sum(num1, num2):</span><br><span class="line">    return num1 + num2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_sum():</span><br><span class="line">    assert sum(3, 7) &#x3D;&#x3D; 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_sum_output_type():</span><br><span class="line">    assert type(sum(1, 2)) is int</span><br></pre></td></tr></table></figure></li><li>运行查看结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">test_example.py::test_sum FAILED                                                  [ 50%]</span><br><span class="line">test_example.py::test_sum_output_type PASSED                                      [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">_______________________________________ test_sum ________________________________________</span><br><span class="line"></span><br><span class="line">    def test_sum():</span><br><span class="line">&gt;       assert sum(3, 7) &#x3D;&#x3D; 100</span><br><span class="line">E       assert 10 &#x3D;&#x3D; 100</span><br><span class="line">E         -10</span><br><span class="line">E         +100</span><br><span class="line"></span><br><span class="line">test_example.py:12: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 1 passed in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure></li></ul><ul><li><code>例子3</code></li><li>类的举例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com</span><br><span class="line">class TestClass(object):</span><br><span class="line">    def test_one(self):</span><br><span class="line">        x &#x3D; &#39;Yiluo&#39;</span><br><span class="line">        assert &#39;l&#39; in x</span><br><span class="line"></span><br><span class="line">    def test_two(self):</span><br><span class="line">        x &#x3D; &#39;luoyi&#39;</span><br><span class="line">        assert hasattr(x, &#39;yiluo&#39;)</span><br></pre></td></tr></table></figure></li><li>运行结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  pytest pytest</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform darwin -- Python 3.7.5, pytest-5.3.2, py-1.8.0, pluggy-0.13.1</span><br><span class="line">plugins: allure-pytest-2.8.6, rerunfailures-5.0</span><br><span class="line">collected 2 items</span><br><span class="line"></span><br><span class="line">test_class.py .F                                               [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">_________________________ TestClass.test_two _________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_class.TestClass object at 0x10c5af7d0&gt;</span><br><span class="line"></span><br><span class="line">    def test_two(self):</span><br><span class="line">        x &#x3D; &#39;luoyi&#39;</span><br><span class="line">&gt;       assert hasattr(x, &#39;yiluo&#39;)</span><br><span class="line">E       AssertionError: assert False</span><br><span class="line">E        +  where False &#x3D; hasattr(&#39;luoyi&#39;, &#39;yiluo&#39;)</span><br><span class="line"></span><br><span class="line">test_class.py:8: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 1 passed in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com</span><br><span class="line">- 用法和调用命令行还可以是</span><br><span class="line"></span><br><span class="line">python -m pytest [...]</span><br></pre></td></tr></table></figure><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWNhYTUyYzZlMDc0Yzc2OTcuanBn?x-oss-process=image/format,png" alt=""></li></ul><h5 id="4-参数化测试"><a href="#4-参数化测试" class="headerlink" title="4. 参数化测试"></a>4. 参数化测试</h5><ul><li>让我们对<code>test_sum</code>函数进行更改以使用参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com</span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sum(num1, num2):</span><br><span class="line">    return num1 + num2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.mark.parametrize(&#39;num1 , num2, expected&#39;, [(3, 5, 8)])</span><br><span class="line">def test_sum(num1, num2, expected):</span><br><span class="line">    assert sum(num1, num2) &#x3D;&#x3D; expected</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_sum_output_type():</span><br><span class="line">    assert type(sum(1, 2)) is int</span><br></pre></td></tr></table></figure></li><li>运行查看结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">collected 2 items                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py::test_sum[3-5-8] PASSED                                           [ 50%]</span><br><span class="line">test_example.py::test_sum_output_type PASSED                                      [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2 passed in 0.04s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure></li><li>多传几个参数试验一下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com</span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sum(num1, num2):</span><br><span class="line">    return num1 + num2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.mark.parametrize(&#39;num1 , num2, expected&#39;, [(3, 5, 8),</span><br><span class="line">            (-2, -2, -4), (6, 6, 12), (6, -1, 5), (0, 5, 5)])</span><br><span class="line">def test_sum(num1, num2, expected):</span><br><span class="line">    assert sum(num1, num2) &#x3D;&#x3D; expected</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_sum_output_type():</span><br><span class="line">    assert type(sum(1, 2)) is int</span><br></pre></td></tr></table></figure></li><li>运行查看结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">collected 6 items                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py::test_sum[3-5-8] PASSED                                           [ 16%]</span><br><span class="line">test_example.py::test_sum[-2--2--4] PASSED                                        [ 33%]</span><br><span class="line">test_example.py::test_sum[6-6-12] PASSED                                          [ 50%]</span><br><span class="line">test_example.py::test_sum[6--1-5] PASSED                                          [ 66%]</span><br><span class="line">test_example.py::test_sum[0-5-5] PASSED                                           [ 83%]</span><br><span class="line">test_example.py::test_sum_output_type PASSED                                      [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed in 0.03s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure></li><li>我们还可以进行函数调用以获取这些值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com</span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sum(num1, num2):</span><br><span class="line">    return num1 + num2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_sum_test_data():</span><br><span class="line">    return [(3, 5, 8),</span><br><span class="line">            (-2, -2, -4), (6, 6, 12), (6, -1, 5), (0, 5, 5)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.mark.parametrize(&#39;num1 , num2, expected&#39;, get_sum_test_data() )</span><br><span class="line">def test_sum(num1, num2, expected):</span><br><span class="line">    assert sum(num1, num2) &#x3D;&#x3D; expected</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_sum_output_type():</span><br><span class="line">    assert type(sum(1, 2)) is int</span><br></pre></td></tr></table></figure></li><li>运行查看结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">collected 6 items                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py::test_sum[3-5-8] PASSED                                           [ 16%]</span><br><span class="line">test_example.py::test_sum[-2--2--4] PASSED                                        [ 33%]</span><br><span class="line">test_example.py::test_sum[6-6-12] PASSED                                          [ 50%]</span><br><span class="line">test_example.py::test_sum[6--1-5] PASSED                                          [ 66%]</span><br><span class="line">test_example.py::test_sum[0-5-5] PASSED                                           [ 83%]</span><br><span class="line">test_example.py::test_sum_output_type PASSED                                      [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed in 0.02s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h5 id="5-Pytest之Fixture的使用"><a href="#5-Pytest之Fixture的使用" class="headerlink" title="5. Pytest之Fixture的使用"></a>5. Pytest之Fixture的使用</h5></li><li>用于在测试之间共享测试数据，分别在测试执行之前和之后执行设置方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com</span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sum(num1, num2):</span><br><span class="line">    return num1 + num2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture()</span><br><span class="line">def get_sum_test_data():</span><br><span class="line">    return [(3, 5, 8),</span><br><span class="line">            (-2, -2, -4), (6, 6, 12), (6, -1, 5), (0, 5, 5)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_sum(get_sum_test_data):</span><br><span class="line">    for data in get_sum_test_data:</span><br><span class="line">        num1 &#x3D; data[0]</span><br><span class="line">        num2 &#x3D; data[1]</span><br><span class="line">        expected &#x3D; data[2]</span><br><span class="line">        assert sum(num1, num2) &#x3D;&#x3D; expected</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_sum_output_type():</span><br><span class="line">    assert type(sum(1, 2)) is int</span><br></pre></td></tr></table></figure></li><li>执行查看结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">collected 2 items                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py::test_sum PASSED                                                  [ 50%]</span><br><span class="line">test_example.py::test_sum_output_type PASSED                                      [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2 passed in 0.03s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure></li><li>Scope of fixture<br><code>function</code>: 每次测试运行一次<br><code>class</code>: 每类测试运行一次<br><code>module</code>: 每个模块运行一次<br><code>session</code>: 每个会话运行一次</li><li>权重<br><code>function &lt; class &lt;module&lt;session</code></li><li><code>autouse=True</code><br>将默认使您套件中的每个测试都使用它</li><li><code>例如1</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com</span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sum(num1, num2):</span><br><span class="line">    return num1 + num2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&#39;session&#39;)</span><br><span class="line">def get_sum_test_data():</span><br><span class="line">    return [(3, 5, 8),</span><br><span class="line">            (-2, -2, -4), (6, 6, 12), (6, -1, 5), (0, 5, 5)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture(autouse&#x3D;True)</span><br><span class="line">def setup_and_teardown():</span><br><span class="line">    print(&#39;\n获取数据&#39;)</span><br><span class="line">    yield</span><br><span class="line">    print(&#39;\n保存数据&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_sum(get_sum_test_data):</span><br><span class="line">    for data in get_sum_test_data:</span><br><span class="line">        num1 &#x3D; data[0]</span><br><span class="line">        num2 &#x3D; data[1]</span><br><span class="line">        expected &#x3D; data[2]</span><br><span class="line">        assert sum(num1, num2) &#x3D;&#x3D; expected</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_sum_output_type():</span><br><span class="line">    assert type(sum(1, 2)) is int</span><br></pre></td></tr></table></figure></li><li>执行后查看结果 <code>pytest test_example.py -v -s</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">collected 2 items                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py::test_sum </span><br><span class="line">获取数据</span><br><span class="line">PASSED</span><br><span class="line">保存数据</span><br><span class="line"></span><br><span class="line">test_example.py::test_sum_output_type </span><br><span class="line">获取数据</span><br><span class="line">PASSED</span><br><span class="line">保存数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2 passed in 0.02s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure></li><li><code>例如2</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com</span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture()</span><br><span class="line">def setup():</span><br><span class="line">    print(&#39;在测试之前&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_one(setup):</span><br><span class="line">    print(&#39;测试1&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_two(setup):</span><br><span class="line">    print(&#39;测试2&#39;)</span><br></pre></td></tr></table></figure><ul><li>执行结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  pytest pytest -v -s fixture.py</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform darwin -- Python 3.7.5, pytest-5.3.2, py-1.8.0, pluggy-0.13.1 -- </span><br><span class="line">cachedir: .pytest_cache</span><br><span class="line">rootdir: &#x2F;Users&#x2F;joey&#x2F;Code&#x2F;pytest</span><br><span class="line">plugins: allure-pytest-2.8.6, rerunfailures-5.0</span><br><span class="line">collected 2 items</span><br><span class="line"></span><br><span class="line">fixture.py::test_one 在测试之前</span><br><span class="line">测试1</span><br><span class="line">PASSED</span><br><span class="line">fixture.py::test_two 在测试之前</span><br><span class="line">测试2</span><br><span class="line">PASSED</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2 passed in 0.01s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure></li></ul></li><li><code>fixture</code> 返回值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture(params&#x3D;[1, 2, 3])</span><br><span class="line">def test_data(request):</span><br><span class="line">    return request.param</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_assert_all(test_data):</span><br><span class="line">    print(&#39;test_data: %s&#39; % test_data)</span><br><span class="line">    assert test_data !&#x3D; 5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  pytest pytest -v -s fixture_param.py</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform darwin -- Python 3.7.5, pytest-5.3.2, py-1.8.0, pluggy-0.13.1 -- &#x2F;Users&#x2F;joey&#x2F;yiluo&#x2F;bin&#x2F;python3</span><br><span class="line">cachedir: .pytest_cache</span><br><span class="line">plugins: allure-pytest-2.8.6, rerunfailures-5.0</span><br><span class="line">collected 3 items</span><br><span class="line"></span><br><span class="line">fixture_param.py::test_assert_all[1] test_data: 1</span><br><span class="line">PASSED</span><br><span class="line">fixture_param.py::test_assert_all[2] test_data: 2</span><br><span class="line">PASSED</span><br><span class="line">fixture_param.py::test_assert_all[3] test_data: 3</span><br><span class="line">PASSED</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.01s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWQwY2U5MzI5YjczMWJlNDAuanBlZw?x-oss-process=image/format,png" alt=""></li></ul><h5 id="6-pytest-mark"><a href="#6-pytest-mark" class="headerlink" title="6. pytest.mark"></a>6. pytest.mark</h5><ul><li><a href="https://docs.pytest.org/en/latest/skipping.html#skip" target="_blank" rel="noopener">skip</a> — 跳过测试功能</li><li><a href="https://docs.pytest.org/en/latest/skipping.html#skipif" target="_blank" rel="noopener">skipif</a> — 如果满足特定条件，则跳过测试功能</li><li><a href="https://docs.pytest.org/en/latest/skipping.html#xfail" target="_blank" rel="noopener">xfail</a> —  如果满足特定条件，则会产生“预期的失败”结果</li><li><a href="https://docs.pytest.org/en/latest/parametrize.html#parametrizemark" target="_blank" rel="noopener">parametrize</a>执行对同一测试功能的多次调用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com</span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sum(num1, num2):</span><br><span class="line">    return num1 + num2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.mark.skip</span><br><span class="line">def test_sum():</span><br><span class="line">    assert sum(3, 7) &#x3D;&#x3D; 10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_sum_output_type():</span><br><span class="line">    assert type(sum(1, 2)) is int</span><br></pre></td></tr></table></figure></li></ul><ul><li>执行查看结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">collected 2 items                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py::test_sum SKIPPED                                                 [ 50%]</span><br><span class="line">test_example.py::test_sum_output_type PASSED                                      [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 passed, 1 skipped in 0.01s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure></li><li>成功跳过测试用例</li><li>运行的方式<blockquote><p>名称中带有“ validate”字符串的所有测试<br><code>pytest -k “validate”</code><br>排除名称中带有“ db”的测试，但包括“ validate”<br><code>pytest -k “validate and not db”</code><br>运行文件夹demo_tests中的所有测试文件<br><code>pytest demo_tests/</code><br>运行测试类TestClassDemo的单个方法test_method<br><code>pytest demo_tests/test_example.py::TestClassDemo::test_method</code><br>运行一个名为TestClassDemo的测试类<br><code>pytest demo_tests/test_example.py::TestClassDemo</code><br>运行一个名为test_sum的测试函数<br><code>pytest demo_tests/test_example.py::test_sum</code><br>以详细模式运行测试<br><code>pytest -v demo_tests/</code><br>运行包括打印语句的测试<br><code>pytest -s demo_tests/</code><br>仅运行上次运行失败的测试<br><code>pytest — lf</code></p></blockquote></li></ul><p><img src="https://img-blog.csdnimg.cn/20200112210733483.jpeg" alt="在这里插入图片描述"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTEwOGI2MjEwODkyZTk4ZDIucG5n?x-oss-process=image/format,png" alt=""></p><blockquote><p>欢迎下方【戳一下】【点赞】<br>Author：伊洛Yiluo<br>愿你享受每一天，Just Enjoy !</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWE1YWIwZTk4OTA0NjZhNWUucG5n?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python第三方库" scheme="https://yiluotalk.com/categories/Python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
      <category term="自动化测试" scheme="https://yiluotalk.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="UI自动化测试" scheme="https://yiluotalk.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="接口自动化测试" scheme="https://yiluotalk.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="测试开发" scheme="https://yiluotalk.com/categories/%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="第三方库" scheme="https://yiluotalk.com/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
      <category term="自动化测试" scheme="https://yiluotalk.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>这篇文章可能会提高你的写作能力</title>
    <link href="https://yiluotalk.com/2020/01/05/%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E5%8F%AF%E8%83%BD%E4%BC%9A%E6%8F%90%E9%AB%98%E4%BD%A0%E7%9A%84%E5%86%99%E4%BD%9C%E8%83%BD%E5%8A%9B/"/>
    <id>https://yiluotalk.com/2020/01/05/%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E5%8F%AF%E8%83%BD%E4%BC%9A%E6%8F%90%E9%AB%98%E4%BD%A0%E7%9A%84%E5%86%99%E4%BD%9C%E8%83%BD%E5%8A%9B/</id>
    <published>2020-01-05T05:52:59.000Z</published>
    <updated>2020-01-05T05:53:14.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTg3YzU2NjUxM2FiOWIwOTEucG5n?x-oss-process=image/format,png" alt=""></p><h1 id="01"><a href="#01" class="headerlink" title="01"></a>01</h1><h6 id="不知如何下笔，不知写什么内容"><a href="#不知如何下笔，不知写什么内容" class="headerlink" title="不知如何下笔，不知写什么内容"></a>不知如何下笔，不知写什么内容</h6><p>现在是一个内容为王的时代，很多人都投入到了创造的行列</p><p>刚开始大多会遇到不知写什么，如何去写的时间段。会感觉自己写的内容没有任何观点，内容苍白无力</p><p>甚至大多时候，写出来的文章逻辑混乱不清</p><blockquote><p>本文首发于伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote><h6 id="如何开始"><a href="#如何开始" class="headerlink" title="如何开始"></a>如何开始</h6><p>写就好了！！！</p><p>做一个生活中的观察者，把自己工作中的一些经验，生活中的一些感悟，可能会对其它人有所帮助的内容总结出来，写就好了！</p><h6 id="完成比完美更重要"><a href="#完成比完美更重要" class="headerlink" title="完成比完美更重要"></a>完成比完美更重要</h6><p>让输出倒逼自己对知识的输入</p><h6 id="多向头部学习借鉴"><a href="#多向头部学习借鉴" class="headerlink" title="多向头部学习借鉴"></a>多向头部学习借鉴</h6><p>做任何事情都需要有反馈，有复盘，自己写好的文章多留意下别人给出的建议</p><p>多去看看头部的一些文章，借鉴别人写文中的一些优点，然后复盘自己的文章，多发现自己的不足，下次写新的文章时就要有所改进</p><h6 id="手机系统软件都需要升级，对待文章也应该像对待产品一样，要不断的打磨迭代"><a href="#手机系统软件都需要升级，对待文章也应该像对待产品一样，要不断的打磨迭代" class="headerlink" title="手机系统软件都需要升级，对待文章也应该像对待产品一样，要不断的打磨迭代"></a>手机系统软件都需要升级，对待文章也应该像对待产品一样，要不断的打磨迭代</h6><h1 id="02"><a href="#02" class="headerlink" title="02"></a>02</h1><h6 id="巧用模版"><a href="#巧用模版" class="headerlink" title="巧用模版"></a>巧用模版</h6><p>还记不记得小的生活老师教写作文？ 会有一些固定的句式</p><p>如果你忘记了小学怎样写作文的话</p><h6 id="那么高中或者初中写英语作文的时候，你一定被老师要求背过固定的句式"><a href="#那么高中或者初中写英语作文的时候，你一定被老师要求背过固定的句式" class="headerlink" title="那么高中或者初中写英语作文的时候，你一定被老师要求背过固定的句式"></a>那么高中或者初中写英语作文的时候，你一定被老师要求背过固定的句式</h6><p>比如</p><p>In my opinion<br>我的观点</p><p>Recently, the problem of …has aroused people’s concern.<br>最近，……问题已引起人们的注意</p><p>It is commonly believed that … / It is a common belief that …<br>人们一般认为……</p><p>Different people hold different attitudes toward…….<br>对……人们的态度各不相同</p><p>No doubt, unless we take effective measures, it is very likely that …<br>毫无疑问，除非我们采取有效措施,很可能会……</p><p>######老师会让你背一些“万金油” 的句子 ，然后你在写作文的时候不仅可以完美的凑齐字数，还会“显得” ，没错就是显得你的文章很漂亮</p><h1 id="03"><a href="#03" class="headerlink" title="03"></a>03</h1><p>那么同理，写汉语当然也可以用到模版</p><h6 id="当你引入一些观点"><a href="#当你引入一些观点" class="headerlink" title="当你引入一些观点"></a>当你引入一些观点</h6><p>最近，许多媒体／学者／专家认为……</p><h6 id="当你想表达一些观点"><a href="#当你想表达一些观点" class="headerlink" title="当你想表达一些观点"></a>当你想表达一些观点</h6><p>传统观念认为……<br>在我们的一生中，经常会听到这样的一种说法……<br>你大概会认为……</p><h6 id="自己表达观点"><a href="#自己表达观点" class="headerlink" title="自己表达观点"></a>自己表达观点</h6><p>我一直认为……<br>虽然我现在应该有了更多的了解，但我还是不禁会认为……<br>我即认为……又相信……</p><h6 id="引入假设或推论"><a href="#引入假设或推论" class="headerlink" title="引入假设或推论"></a>引入假设或推论</h6><p>虽然没有……直接说出来，但是他们将成给我一种……<br>从 ……      对   ……看法中可以得出一个结论……</p><h6 id="引入争议"><a href="#引入争议" class="headerlink" title="引入争议"></a>引入争议</h6><p>关于  ……这个主题……大多数人认为……但是，共识之外……这个问题……有人坚信……其他人认为……<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWVhNWI0MDA4NjYzMTNjZTkuanBn?x-oss-process=image/format,png" alt=""></p><h1 id="04"><a href="#04" class="headerlink" title="04"></a>04</h1><h6 id="巧用连词"><a href="#巧用连词" class="headerlink" title="巧用连词"></a>巧用连词</h6><h6 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h6><p>还有，实际上，而且，事实上，此外，另外，不仅如此</p><h6 id="承接"><a href="#承接" class="headerlink" title="承接"></a>承接</h6><p>实际上，换言之，展开来讲，坦率的来讲，简单讲，归根结底</p><h6 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h6><p>毕竟，例如，具体来看，试想，比如</p><h6 id="因果"><a href="#因果" class="headerlink" title="因果"></a>因果</h6><p>据此，所以，那么，于是</p><h6 id="平时多总结别人文章中比较好的连词"><a href="#平时多总结别人文章中比较好的连词" class="headerlink" title="平时多总结别人文章中比较好的连词"></a>平时多总结别人文章中比较好的连词</h6><h1 id="05"><a href="#05" class="headerlink" title="05"></a>05</h1><p>巧用经句<br>如今内容爆发，每个人的阅读都好像是在刷朋友圈</p><p>如何快速的在刷的过程中吸引到读者的注意力就很关键</p><p>就如同大家逛街，在琳琅满目的商品中要吸引到顾客的注意力 ，那么一篇文章中最好的吸引方式就是经典的句子 </p><p>######注意文章中经典的语句最好加粗，让读者很容易留意</p><h1 id="06"><a href="#06" class="headerlink" title="06"></a>06</h1><p>最好有些故事，可以让读者进入心流的状态</p><p>当每个人听故事的时候，其实是注意力最集中也是最感兴趣的时候，你肯定会留意到很多头部的文章几乎都会</p><p>这样开头</p><h6 id="我有一个同事，我有一个闺蜜，我一个发小……"><a href="#我有一个同事，我有一个闺蜜，我一个发小……" class="headerlink" title="我有一个同事，我有一个闺蜜，我一个发小……"></a>我有一个同事，我有一个闺蜜，我一个发小……</h6><p>这样就可以快速的吸引读者的好奇心，很容易让读者带入到你的故事中 </p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWU1ZTk4ZmEzYTEyM2U0ZTUucG5n?x-oss-process=image/format,png" alt=""></p><blockquote><p>欢迎下方【戳一下】【点赞】<br>  Author：伊洛Yiluo<br>  愿你享受每一天，Just Enjoy !</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWEwZjc5NDJkNGM2ZmM4ZGYucG5n?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="生活文集" scheme="https://yiluotalk.com/categories/%E7%94%9F%E6%B4%BB%E6%96%87%E9%9B%86/"/>
    
    
      <category term="伊洛文集" scheme="https://yiluotalk.com/tags/%E4%BC%8A%E6%B4%9B%E6%96%87%E9%9B%86/"/>
    
      <category term="文集" scheme="https://yiluotalk.com/tags/%E6%96%87%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Python requests库(二)</title>
    <link href="https://yiluotalk.com/2020/01/04/Python%20requests%E5%BA%93(%E4%BA%8C)/"/>
    <id>https://yiluotalk.com/2020/01/04/Python%20requests%E5%BA%93(%E4%BA%8C)/</id>
    <published>2020-01-04T08:36:59.000Z</published>
    <updated>2020-01-04T08:36:34.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTAzM2Q3MjFmZDllZDRlYTkucG5n?x-oss-process=image/format,png" alt=""></p><p>本文是<a href="https://www.jianshu.com/p/384aa8b0f3ab" target="_blank" rel="noopener">Python requests库 (一)</a>的后续，简单的介绍一下<code>python</code>第三方库 <code>requests</code>的一些简单的高级用法</p><blockquote><p>本文首发于伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote><h5 id="1-文件上传"><a href="#1-文件上传" class="headerlink" title="1. 文件上传"></a>1. 文件上传</h5><ul><li>通过<code>request</code> 上传一张<code>photo</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>files = &#123;<span class="string">'file'</span>:open(<span class="string">'photo.jpg'</span>, <span class="string">'rb'</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.post(<span class="string">'http://httpbin.org/post'</span>, files=files)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.text)</span><br></pre></td></tr></table></figure><h5 id="2-获取-cookies"><a href="#2-获取-cookies" class="headerlink" title="2. 获取 cookies"></a>2. 获取 cookies</h5></li><li>访问知乎，然后获取<code>cookies</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">"https://www.zhihu.com"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.cookies)</span><br><span class="line">&lt;RequestsCookieJar[&lt;Cookie _xsrf=kpkc08adzcWJ2IZXxQAh85ujvtFiPArj <span class="keyword">for</span> .zhihu.com/&gt;]&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="3-会话维持"><a href="#3-会话维持" class="headerlink" title="3. 会话维持"></a>3. 会话维持</h5><ul><li>如果需要访问的网页是需要登陆之后再使用的话就需要会话维持，一般在做接口自动化测试或者爬虫一些网站的时候，都是需要保持登录态<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">"http://httpbin.org/cookies/set/number/123456789"</span>)</span><br><span class="line">&lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">'http://httpbin.org/cookies'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.text)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"cookies"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>上面并没有获取到<code>cookies</code> ,因为<code>request</code>设置<code>cookie</code>和后来的获取<code>cookie</code>相当于打开了两个浏览器</li><li>如何解决这个问题，我们需要用到<code>session</code> ，这是在自动化接口测试或者爬虫中经常会被用到，有必要掌握<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = requests.Session()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.get(<span class="string">'http://httpbin.org/cookies/set/number/123456789'</span>)</span><br><span class="line">&lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = s.get(<span class="string">'http://httpbin.org/cookies'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.text)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"cookies"</span>: &#123;</span><br><span class="line">    <span class="string">"number"</span>: <span class="string">"123456789"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>以上，成功保持会话</li></ul><h5 id="4-SSL证书验证"><a href="#4-SSL证书验证" class="headerlink" title="4. SSL证书验证"></a>4. SSL证书验证</h5><ul><li>你肯定会有过类似的这种经历，当你打开一个网页的时候会提示你访问的地址不安全，这是由于<code>https</code>协议需要证书</li><li>程序访问后一定会报出 <code>SSLError</code>错误</li><li>解决方式</li></ul><p>1.设置<code>verify = False</code><br>2.传入证书 <code>cert=&quot;你的证书&quot;</code></p><h5 id="5-代理设置"><a href="#5-代理设置" class="headerlink" title="5.代理设置"></a>5.代理设置</h5><ul><li>爬虫的时候通常会设置代理</li><li>方式在<code>proxies=输入你的代理</code></li></ul><h5 id="6-超时设置"><a href="#6-超时设置" class="headerlink" title="6. 超时设置"></a>6. 超时设置</h5><ul><li>限制应答时间，比如访问伊洛的个人博客<a href="https://yiluotalk.com">https://yiluotalk.com</a> ,设置超时<code>1s</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">"https://yiluotalk.com"</span>, timeout = <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.status_code)</span><br><span class="line"><span class="number">200</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="7-身份认证"><a href="#7-身份认证" class="headerlink" title="7.身份认证"></a>7.身份认证</h5><ul><li>一些网站当你访问的时候首先会让你登录做验证</li><li>解决方式，传入<code>auth</code> 参数 <code>auth=HTTPBasicAuth(&#39;user&#39;, &#39;password&#39;)</code></li></ul><p><img src="https://img-blog.csdnimg.cn/20200104163344340.jpeg" alt="在这里插入图片描述"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWJjNTA1ZmY3MzYyYmZmZWUucG5n?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTM0NWZlMWYyMDJmMWJmNDAucG5n?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python第三方库" scheme="https://yiluotalk.com/categories/Python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
      <category term="第三方库" scheme="https://yiluotalk.com/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>爬虫基础原理 Zero to Hero (一)</title>
    <link href="https://yiluotalk.com/2020/01/03/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%20Zero%20to%20Hero%20(%E4%B8%80)/"/>
    <id>https://yiluotalk.com/2020/01/03/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%20Zero%20to%20Hero%20(%E4%B8%80)/</id>
    <published>2020-01-03T09:15:59.000Z</published>
    <updated>2020-01-03T09:45:33.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLThkZTk0OWZjZmExNmJkOGQucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="1-什么是爬虫？"><a href="#1-什么是爬虫？" class="headerlink" title="1.什么是爬虫？"></a>1.什么是爬虫？</h5><p><strong>网络爬虫</strong>（英语：web crawler），也叫<strong>网络蜘蛛</strong>（spider），是一种用来自动浏览<a href="https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91" target="_blank" rel="noopener" title="万维网">万维网</a>的<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E6%9C%BA%E5%99%A8%E4%BA%BA" target="_blank" rel="noopener">网络机器人</a></p><blockquote><p>本文首发于伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote><ul><li>其实通俗的来讲，本质上爬虫就是自动化的程序，自动化模拟人的操作。比如在网站上下载小说，下载图片，下载视频等等。如果让你本人下载<code>1-2</code>张图片可能很容易，但是如果让你下载<code>100</code>张甚至<code>10000</code>张图片的话，就一定会发狂了。所以就交给自动化的爬虫来帮你下载<code>10000</code>张图片！解放你的双手～<h5 id="2-浏览器获取数据过程"><a href="#2-浏览器获取数据过程" class="headerlink" title="2.浏览器获取数据过程"></a>2.浏览器获取数据过程</h5><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWYwODdlZTU2MGJmMTNkZTUucG5n?x-oss-process=image/format,png" alt=""></li><li>浏览器向服务等发送<code>http</code>，<code>request</code>请求</li><li>服务器响应<code>response</code></li><li>浏览器<code>解析数据</code></li><li>展示给用户<h5 id="3-Rquest-和-Response"><a href="#3-Rquest-和-Response" class="headerlink" title="3.Rquest 和 Response"></a>3.Rquest 和 Response</h5></li><li><code>Request</code> 包含内容</li></ul><p>1.请求方式通常有<code>Get</code> <code>Post</code> <code>Put</code> <code>Delete</code><br>2.请求<code>URL</code><br>3.请求头<br>4.请求体</p><ul><li><p>来请求一些伊洛的个人博客 <a href="https://yiluotalk.com">https://yiluotalk.com</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTczMzU3YWQzNjZlNzY2MDcucG5n?x-oss-process=image/format,png" alt=""></p></li><li><p>点击<code>Network</code>,查看<code>headers</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTRkNjUwNWQ1ZTkzN2FjZWUucG5n?x-oss-process=image/format,png" alt=""></p></li><li><p>注意一般服务器会对请求数据做校验，一般在请求头里面需要加<code>user-agent</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWUwNzFiY2JkY2MyNDFiMTEucG5n?x-oss-process=image/format,png" alt=""></p></li><li><p><code>Response</code> 包含内容</p></li></ul><p>1.响应状态 ，<code>状态码</code><br>2.响应头 <code>response</code> <code>headers</code><br>3.响应体信息</p><ul><li>来看一下伊洛博客的返回<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTIyODAyNzJhMWEzOThjZDAucG5n?x-oss-process=image/format,png" alt=""></li><li>返回的是<code>html</code>页面<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTllYjNjNTE4Y2ZiYmQwNzUucG5n?x-oss-process=image/format,png" alt=""></li></ul><h5 id="4-爬虫的过程"><a href="#4-爬虫的过程" class="headerlink" title="4. 爬虫的过程"></a>4. 爬虫的过程</h5><ul><li>通过上面我们已经比较清楚了，浏览器请求服务器到服务器响应，浏览器解析展示给用户的简单过程，那么我们爬虫的话大概分几步呢<br>通常来说分为四个步骤</li><li>1.爬取数据 发起<code>http</code>请求 （来用<code>python</code>代码演示下）<br>可能需要爬取的数据是会有 <code>Html文档</code>，<code>Json格式文本</code>，<code>图片</code>，<code>视频</code>，等<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">"https://yiluotalk.com"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.status_code)</span><br><span class="line"><span class="number">200</span></span><br></pre></td></tr></table></figure></li><li>2.获取响应内容<br>如上获取了响应的状态码为<code>200</code></li><li>3.解析内容<br>解析的方式可能有很多种，后续展开讲述下</li></ul><ol><li>直接处理</li><li><code>Json</code> 解析</li><li><code>正则表达式</code></li><li>有很多好用的第三方库，比如 <code>BeautifulSoup</code> <code>pyquery</code>  <code>scrapy</code> 还有<code>xpath</code>也可以<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></li></ol><ul><li>响应的是<code>html</code>文件<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTYyNDczMzM2MGMwODVmMWEucG5n?x-oss-process=image/format,png" alt=""></li></ul><p>5.保存数据</p><ul><li>保存数据一般分为以下几种，后续展开来讲<br><code>纯文本</code>， <code>Json</code> <code>Xml</code>，<code>关系形数据库（Mysql）</code>，<code>非关系型数据库（Mongodb）</code>，<code>二进制文件</code>等<h5 id="5-找不到要爬取的数据"><a href="#5-找不到要爬取的数据" class="headerlink" title="5. 找不到要爬取的数据"></a>5. 找不到要爬取的数据</h5>由于一些网站的页面是动态获取的，所以最后你看到的页面可能是通过<code>js渲染</code>出来的，那么怎么来处理呢，简单的可以分为</li></ul><p>1.分析<code>ajax</code>请求，<code>json</code>格式字符串<br>2.<code>selenium</code> <code>webdriver</code> 浏览器驱动<br>3.<code>splash</code><br>4.<code>pyv8</code>，<code>ghost8</code></p><ul><li>这里先简单的介绍下模拟人工浏览器的方式，也就是 <code>WEB自动化测试</code>经常用到的，<code>selenium</code> ，可以翻下伊洛之前介绍<code>selenium</code> <code>webdriver</code>自动化测试的的相关文章</li><li>依旧是访问 <a href="https://yiluotalk.com">https://yiluotalk.com</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTIxY2Q3MTFmZTUyODg5MmEucG5n?x-oss-process=image/format,png" alt=""></li><li>输入网址<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTU0OTI1YmMzMGUxNzdlNzIucG5n?x-oss-process=image/format,png" alt=""></li><li>这样通过浏览器驱动的方式访问的就会正确的获得响应的所有信息</li></ul><p><img src="https://img-blog.csdnimg.cn/20200103174004965.jpeg" alt="在这里插入图片描述"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTA5N2JiYmJmNWEyOWY0NzcucG5n?x-oss-process=image/format,png" alt=""></p><blockquote><p>欢迎下方【戳一下】【点赞】<br>  Author：伊洛Yiluo<br>  愿你享受每一天，Just Enjoy !</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWI5ODE4OThiZTY1MzYzOTQucG5n?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python爬虫" scheme="https://yiluotalk.com/categories/Python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python爬虫" scheme="https://yiluotalk.com/tags/Python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>老司机都知道的Python语法小技巧 (三) 放弃 if-elif</title>
    <link href="https://yiluotalk.com/2020/01/02/%E8%80%81%E5%8F%B8%E6%9C%BA%E9%83%BD%E7%9F%A5%E9%81%93%E7%9A%84Python%E8%AF%AD%E6%B3%95%E5%B0%8F%E6%8A%80%E5%B7%A7%20(%E4%B8%89)%20%E6%94%BE%E5%BC%83%20if-elif/"/>
    <id>https://yiluotalk.com/2020/01/02/%E8%80%81%E5%8F%B8%E6%9C%BA%E9%83%BD%E7%9F%A5%E9%81%93%E7%9A%84Python%E8%AF%AD%E6%B3%95%E5%B0%8F%E6%8A%80%E5%B7%A7%20(%E4%B8%89)%20%E6%94%BE%E5%BC%83%20if-elif/</id>
    <published>2020-01-02T03:32:59.000Z</published>
    <updated>2020-01-02T03:32:50.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTU5MDc1MTQyMWJlMDQ0NWIucG5n?x-oss-process=image/format,png" alt=""></p><p>大家新年好呀，今天再来说下<code>Python</code>老司机常用的小技巧，让你告别‘乏味的’<code>if-elif</code>，话不多说直接来看一个输出今天周几的例子</p><blockquote><p>本文首发于伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">week_day = datetime.date(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> week_day.weekday() == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'今天是星期一'</span>)</span><br><span class="line"><span class="keyword">elif</span> week_day.weekday() == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">'今天是星期二'</span>)</span><br><span class="line"><span class="keyword">elif</span> week_day.weekday() == <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">'今天是星期三'</span>)</span><br><span class="line"><span class="keyword">elif</span> week_day.weekday() == <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">'今天是星期四'</span>)</span><br><span class="line"><span class="keyword">elif</span> week_day.weekday() == <span class="number">4</span>:</span><br><span class="line">    print(<span class="string">'今天是星期五'</span>)</span><br><span class="line"><span class="keyword">elif</span> week_day.weekday() == <span class="number">5</span>:</span><br><span class="line">    print(<span class="string">'今天是星期六'</span>)</span><br><span class="line"><span class="keyword">elif</span> week_day.weekday() == <span class="number">6</span>:</span><br><span class="line">    print(<span class="string">'今天是星期日'</span>)</span><br></pre></td></tr></table></figure><ul><li><code>weekday()</code>函数返回的是当前日期所在的星期数</li><li>运行看以下结果<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">今天是星期四</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li>没错今天就是周四</li><li>可以看到上面的代码看上去好像很复杂而且码代码的时候也很容易出现错误，比如你入门<code>python</code>的时候肯定会做一些类似于工资计算器的小程序，你计算公积金或者税率工资分段的时候要不断的用到<code>if-elif</code>，这样很容易出现错误</li><li>那么有没有更好的方式避免或者优化呢</li><li>当然作为<code>python</code>老司机的话都会用到调度表</li><li>简单来看一个例子<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">dispatch = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'今天是星期一'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'今天是星期二'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'今天是星期三'</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">'今天是星期四'</span>,</span><br><span class="line">  <span class="number">4</span>: <span class="string">'今天是星期五'</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="string">'今天是星期六'</span>,</span><br><span class="line">  <span class="number">6</span>: <span class="string">'今天是星期日'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">week_day = datetime.date(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(dispatch[week_day.weekday()])</span><br></pre></td></tr></table></figure></li><li>这里其实就是一个<code>python</code>的字典</li><li>看上去是不是稍微的简洁简化了呢</li><li>重要的是会避免出错（当你<code>if-elif</code>很多的情况下，就一定会有这种体会了）</li><li>最后来输出看看结果<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">今天是星期四</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li>结果一致，适当的放弃<code>if-elif</code>吧，让你的代码不仅美观还少出错</li></ul><p><img src="https://img-blog.csdnimg.cn/20200102112934439.jpeg" alt="在这里插入图片描述"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBmYjk4ZDM3OGIyZmZiZDAucG5n?x-oss-process=image/format,png" alt=""></p><blockquote><p>欢迎下方【戳一下】【点赞】<br>  Author：伊洛Yiluo<br>  愿你享受每一天，Just Enjoy !</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWNjMzQwMWY0YzkxNTU1YjUucG5n?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>超级无敌好用的投屏AirServer</title>
    <link href="https://yiluotalk.com/2019/12/28/%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E5%A5%BD%E7%94%A8%E7%9A%84%E6%8A%95%E5%B1%8FAirServer/"/>
    <id>https://yiluotalk.com/2019/12/28/%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E5%A5%BD%E7%94%A8%E7%9A%84%E6%8A%95%E5%B1%8FAirServer/</id>
    <published>2019-12-28T02:16:12.000Z</published>
    <updated>2019-12-28T02:17:18.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTc5NDJhMzhiZjIwNjRhODUucG5n?x-oss-process=image/format,png" alt=""></p><ul><li>最近开会打算把手机投屏到自己的<code>Mac</code>上演示用，于是就打算用下听了很久好用但是一值没有使用的<code>AirServer</code></li><li>十分简单的操作就可以完美的投屏到<code>Mac</code>电脑，而且不用像<code>Mac</code>自带的<code>QuickTime</code>用线连接手机</li><li>画外音：自动化测试中有个好用的开源项目，<code>Airtest Project</code>，其实不仅可以在电脑显示手机屏幕，而且还可以对手机进行操作，由于本篇内容是讲投屏<code>AirServer</code>，这里不在赘诉，想了解自动化工具的小伙伴可以自行谷歌或百度<code>Airtest Project</code><blockquote><p>本文首发于伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote></li></ul><h5 id="1-安装-AirServer"><a href="#1-安装-AirServer" class="headerlink" title="1. 安装 AirServer"></a>1. 安装 AirServer</h5><ul><li><p>打开官网，然后<code>download</code><br><a href="https://www.airserver.com/" target="_blank" rel="noopener">https://www.airserver.com/</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWIyYzVkNTdjMmNmMDYyODQucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="2-Mac电脑将程序拖动到-App"><a href="#2-Mac电脑将程序拖动到-App" class="headerlink" title="2. Mac电脑将程序拖动到 App"></a>2. <code>Mac</code>电脑将程序拖动到 <code>App</code></h5></li><li><p>官网下载的是试用的版本，如果激活的话可以购买正版</p></li><li><p>富裕的小伙伴还是尽量支持正版，不太方便的小伙伴可以考虑万能的谷歌或百度寻求新大陆</p><h5 id="3-启动Air-Server"><a href="#3-启动Air-Server" class="headerlink" title="3. 启动Air Server"></a>3. 启动Air Server</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTIzYmQ5MGI5NDRlNGJhMGIucG5n?x-oss-process=image/format,png" alt="启动成功"></p><h5 id="3-配置投屏连接权限"><a href="#3-配置投屏连接权限" class="headerlink" title="3. 配置投屏连接权限"></a>3. 配置投屏连接权限</h5></li><li><p>同一网络下默认是可以直接投屏到服务上的，所以为了安全起见还是设置以下投屏的权限<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWMxYWRkZjljMzAzZWFkYWQucG5n?x-oss-process=image/format,png" alt="设置"></p></li><li><p>四种方式分别是：没有密码，固定密码，屏幕显示code, 询问</p></li><li><p>这里伊洛选择了请求投屏的时候，屏幕显示<code>code</code></p><h5 id="4-手机端下拉（iPhone）选择屏幕镜像，然后选择你的Mac设备"><a href="#4-手机端下拉（iPhone）选择屏幕镜像，然后选择你的Mac设备" class="headerlink" title="4. 手机端下拉（iPhone）选择屏幕镜像，然后选择你的Mac设备"></a>4. 手机端下拉（<code>iPhone</code>）选择屏幕镜像，然后选择你的Mac设备</h5></li><li><p>这样屏幕上就会显示<code>code</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWVmMTZjMTYwNDljMjIzY2EucG5n?x-oss-process=image/format,png" alt="屏幕上显示code"></p></li><li><p>手机端输入屏幕上的<code>code</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWY4YmY2OWRkMWZjZjYzMWYucG5n?x-oss-process=image/format,png" alt="成功投屏到Mac"><br><img src="https://img-blog.csdnimg.cn/2019122810121958.jpeg" alt="在这里插入图片描述"></p><h5 id="5-横屏可以看视频或玩游戏都行，可以放大。声音也可以配置-游戏画面还是会有延迟的，看视频效果还不错-（图片来自爱奇艺截图）"><a href="#5-横屏可以看视频或玩游戏都行，可以放大。声音也可以配置-游戏画面还是会有延迟的，看视频效果还不错-（图片来自爱奇艺截图）" class="headerlink" title="5. 横屏可以看视频或玩游戏都行，可以放大。声音也可以配置(游戏画面还是会有延迟的，看视频效果还不错)（图片来自爱奇艺截图）"></a>5. 横屏可以看视频或玩游戏都行，可以放大。声音也可以配置(游戏画面还是会有延迟的，看视频效果还不错)（图片来自爱奇艺截图）</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTc4YzE3ZjA5MGEzZDBmYTYucG5n?x-oss-process=image/format,png" alt="截图来自爱奇艺"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTQ1OWMyMGExYjBhYTQxMjAucG5n?x-oss-process=image/format,png" alt="关注公众号获取更多内容"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWI5ODM4YjIzMTBhMDljZTgucG5n?x-oss-process=image/format,png" alt=""></p></li></ul><blockquote><p>欢迎下方【戳一下】【点赞】<br>  Author：伊洛Yiluo<br>  愿你享受每一天，Just Enjoy !</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="好用软件" scheme="https://yiluotalk.com/categories/%E5%A5%BD%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="好用软件" scheme="https://yiluotalk.com/tags/%E5%A5%BD%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>你的Python程序需要进度条</title>
    <link href="https://yiluotalk.com/2019/12/27/%E4%BD%A0%E7%9A%84Python%E7%A8%8B%E5%BA%8F%E9%9C%80%E8%A6%81%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <id>https://yiluotalk.com/2019/12/27/%E4%BD%A0%E7%9A%84Python%E7%A8%8B%E5%BA%8F%E9%9C%80%E8%A6%81%E8%BF%9B%E5%BA%A6%E6%9D%A1/</id>
    <published>2019-12-27T07:27:45.000Z</published>
    <updated>2019-12-27T07:09:49.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTEyNTUzNjgzMWNlMjkwZmEucG5n?x-oss-process=image/format,png" alt=""></p><ul><li>生活中很多事情都会有反馈机制，比如考试完，成绩就是对这段时间学习效果的反馈；玩游戏经验值就是对你在游戏中投入精力的反馈等等。那么对于程序来说也需要反馈，比如安装一个软件，如果没有进度条，那么你一定会很抓狂。因为你根本无法确认程序是否在正常工作，还是任务已经被已系统挂起。那么本文就简单的介绍几种<code>python</code>常用到的反馈进度条方式（包括<code>GUI</code>进度条）<blockquote><p>本文首发于伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote></li></ul><h5 id="1-使用-Progress"><a href="#1-使用-Progress" class="headerlink" title="1. 使用 Progress"></a>1. 使用 Progress</h5><ul><li>安装<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  ~ pip install progress</span><br><span class="line">Collecting progress</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/<span class="number">38</span>/ef/<span class="number">2e887</span>b3d2b248916fc2121889ce68af8a16aaddbe82f9ae6533c24ff0d2b/progress<span class="number">-1.5</span>.tar.gz</span><br><span class="line">Installing collected packages: progress</span><br><span class="line">    Running setup.py install <span class="keyword">for</span> progress ... done</span><br><span class="line">Successfully installed progress<span class="number">-1.5</span></span><br></pre></td></tr></table></figure></li><li>创建一个脚本，写入以下代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo </span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> progress.bar <span class="keyword">import</span> IncrementalBar</span><br><span class="line"></span><br><span class="line">bar_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">bar = IncrementalBar(<span class="string">'progress bar'</span>, max=len(bar_list))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> bar_list:</span><br><span class="line">        bar.next()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    bar.finish()</span><br></pre></td></tr></table></figure></li><li>命令行运行<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  AllDemo python demo.py</span><br><span class="line">progress bar |████████████                    | <span class="number">3</span>/<span class="number">8</span></span><br></pre></td></tr></table></figure><h5 id="2-使用-Tqdm"><a href="#2-使用-Tqdm" class="headerlink" title="2. 使用 Tqdm"></a>2. 使用 Tqdm</h5></li><li>安装<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip install tqdm</span><br><span class="line">Collecting tqdm</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/<span class="number">8</span>c/c3/d049cf3fb31094ee045ec1ee29fffac218c91e82c8838c49ab4c3e52627b/tqdm<span class="number">-4.41</span><span class="number">.0</span>-py2.py3-none-any.whl (<span class="number">56</span>kB)</span><br><span class="line">     |████████████████████████████████| <span class="number">61</span>kB <span class="number">239</span>kB/s</span><br><span class="line">Installing collected packages: tqdm</span><br><span class="line">Successfully installed tqdm<span class="number">-4.41</span><span class="number">.0</span></span><br></pre></td></tr></table></figure></li><li>写入以下代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">_bar = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> tqdm(_bar):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li>命令行运行<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  AllDemo python demo.py</span><br><span class="line"> <span class="number">62</span>%|█████████████████████████████████▊                    | <span class="number">5</span>/<span class="number">8</span></span><br></pre></td></tr></table></figure><h5 id="3-使用-Alive-Progress"><a href="#3-使用-Alive-Progress" class="headerlink" title="3. 使用 Alive Progress"></a>3. 使用 Alive Progress</h5></li><li>也是很常用的，和之前例子相差不大，有兴趣的可以看以下具体的使用文档<br><a href="https://github.com/rsalmei/alive-progress" target="_blank" rel="noopener">Alive Progress 传送门</a><h5 id="4-使用-Pysimplegui（GUI）"><a href="#4-使用-Pysimplegui（GUI）" class="headerlink" title="4. 使用 Pysimplegui（GUI）"></a>4. 使用 Pysimplegui（GUI）</h5></li><li>安装<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  ~ pip install pysimplegui</span><br><span class="line">Collecting pysimplegui</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/<span class="number">22</span>/a8/ec06b5ce8997411c542dc0f65848a89b6f852b1b9c0fde8ace89aec6703e/PySimpleGUI<span class="number">-4.14</span><span class="number">.1</span>-py3-none-any.whl (<span class="number">288</span>kB)</span><br><span class="line">     |████████████████████████████████| <span class="number">296</span>kB <span class="number">286</span>kB/s</span><br><span class="line">Installing collected packages: pysimplegui</span><br><span class="line">Successfully installed pysimplegui<span class="number">-4.14</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> PySimpleGUI <span class="keyword">as</span> sg</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">bar_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, item <span class="keyword">in</span> enumerate(bar_list):</span><br><span class="line">    sg.one_line_progress_meter(<span class="string">'我是进度条!'</span>, i+<span class="number">1</span>, len(bar_list), <span class="string">'key'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li>来看看GUI的效果<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTZlMGZjYjIzNjMzYTVjNzUucG5n?x-oss-process=image/format,png" alt=""><br><img src="https://img-blog.csdnimg.cn/20191227150511558.jpeg" alt="在这里插入图片描述"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLThmMDY1OGQ1NzhjZmFhMmUucG5n?x-oss-process=image/format,png" alt="关注公众号获取更多内容"><blockquote><p>欢迎下方【戳一下】【点赞】<br>Author：伊洛Yiluo<br>愿你享受每一天，Just Enjoy !</p></blockquote></li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>老司机都知道的Python语法小技巧 (二)</title>
    <link href="https://yiluotalk.com/2019/12/26/%E8%80%81%E5%8F%B8%E6%9C%BA%E9%83%BD%E7%9F%A5%E9%81%93%E7%9A%84Python%E8%AF%AD%E6%B3%95%E5%B0%8F%E6%8A%80%E5%B7%A7%20(%E4%BA%8C)/"/>
    <id>https://yiluotalk.com/2019/12/26/%E8%80%81%E5%8F%B8%E6%9C%BA%E9%83%BD%E7%9F%A5%E9%81%93%E7%9A%84Python%E8%AF%AD%E6%B3%95%E5%B0%8F%E6%8A%80%E5%B7%A7%20(%E4%BA%8C)/</id>
    <published>2019-12-26T06:52:59.000Z</published>
    <updated>2019-12-26T06:52:29.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTM1MGEzN2IwZWY5NjU2N2QucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="写在前面—Python的优势在于"><a href="#写在前面—Python的优势在于" class="headerlink" title="写在前面—Python的优势在于"></a>写在前面—Python的优势在于</h5><p>1.与主要平台和操作系统兼容<br>2.许多开源框架和工具<br>3.可读且可维护的代码<br>4.强大的标准库<br>5.标准测试驱动的开发</p><blockquote><p>本文首发于伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote><ul><li>话不多说了，本文是第二部分，将讲简单的列出几条日常工作中使用<code>Python</code>可能会用到的语法小技巧，希望会对你的工作有所帮助 just enjoy！<br>第一部分是：<a href="https://www.jianshu.com/p/ae0943ccf0ba" target="_blank" rel="noopener">老司机都知道的Python语法小技巧 (一)</a><h5 id="14-列表中元素出现的个数"><a href="#14-列表中元素出现的个数" class="headerlink" title="14.列表中元素出现的个数"></a>14.列表中元素出现的个数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>count = Counter(list)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>count</span><br><span class="line">Counter(&#123;<span class="number">1</span>: <span class="number">2</span>, <span class="number">2</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">2</span>, <span class="number">4</span>: <span class="number">2</span>, <span class="number">5</span>: <span class="number">2</span>, <span class="number">6</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h5 id="15-列表中查找出现最多的元素"><a href="#15-列表中查找出现最多的元素" class="headerlink" title="15.列表中查找出现最多的元素"></a>15.列表中查找出现最多的元素</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">most_frequement</span><span class="params">(list)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> max(set(list), key = list.count)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>number = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>most_frequement(number)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h5 id="16-将角度从度转换为弧度"><a href="#16-将角度从度转换为弧度" class="headerlink" title="16. 将角度从度转换为弧度"></a>16. 将角度从度转换为弧度</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">degrees_to_radians</span><span class="params">(deg)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> (deg * math.pi) / <span class="number">180</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>degrees_to_radians(<span class="number">90</span>)</span><br><span class="line"><span class="number">1.5707963267948966</span></span><br></pre></td></tr></table></figure><h5 id="17-计算执行一段代码所花费的时间-非装饰器"><a href="#17-计算执行一段代码所花费的时间-非装饰器" class="headerlink" title="17. 计算执行一段代码所花费的时间(非装饰器)"></a>17. 计算执行一段代码所花费的时间(非装饰器)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">start_time = time.time()</span><br><span class="line">a, b = <span class="number">10</span>, <span class="number">20</span></span><br><span class="line">c = a + b</span><br><span class="line">end_time = time.time()</span><br><span class="line">time_taken = (end_time- start_time)*(<span class="number">10</span>**<span class="number">6</span>)</span><br><span class="line">print(<span class="string">'耗时'</span>, time_taken)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output</span><br><span class="line">耗时 <span class="number">2.1457672119140625</span></span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="18-字符串去重"><a href="#18-字符串去重" class="headerlink" title="18. 字符串去重"></a>18. 字符串去重</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"aabbccddeeffgg"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>unique = set(string)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>unique</span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'f'</span>, <span class="string">'b'</span>, <span class="string">'g'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_string = <span class="string">''</span>.join(unique)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_string</span><br><span class="line"><span class="string">'afbgced'</span></span><br></pre></td></tr></table></figure><h5 id="19-使用lambda表达式"><a href="#19-使用lambda表达式" class="headerlink" title="19. 使用lambda表达式"></a>19. 使用lambda表达式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="keyword">lambda</span> a, b, c :a + b + c</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><h5 id="20-使用-filter"><a href="#20-使用-filter" class="headerlink" title="20. 使用 filter"></a>20. 使用 filter</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr = list(filter(<span class="keyword">lambda</span> x : x%<span class="number">2</span> == <span class="number">0</span>, arr))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(arr)</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h5 id="21-列表"><a href="#21-列表" class="headerlink" title="21. 列表"></a>21. 列表</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>number = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>squares = [number**<span class="number">2</span> <span class="keyword">for</span> number <span class="keyword">in</span> number]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(squares)</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h5 id="22-切片"><a href="#22-切片" class="headerlink" title="22. 切片"></a>22. 切片</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(arr, d)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> arr[d:] + arr[:d]</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr = rotate(arr, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(arr)</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><h5 id="23-链式函数"><a href="#23-链式函数" class="headerlink" title="23. 链式函数"></a>23. 链式函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伊洛Yiluo</span></span><br><span class="line"><span class="comment"># https://yiluotalk.com</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">subtract</span><span class="params">(a, b)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> a - b</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> a + b</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">subtract</span><span class="params">(a, b)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> a - b</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print((subtract <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> add)(a, b))</span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = <span class="number">10</span>, <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print((subtract <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> add)(a, b))</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20191226144707930.jpeg" alt="在这里插入图片描述"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWNkM2Y4MjBmYmY3OTYyNDAucG5n?x-oss-process=image/format,png" alt=""></li></ul><blockquote><p>欢迎下方【戳一下】【点赞】<br>  Author：伊洛Yiluo<br>  愿你享受每一天，Just Enjoy !</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLThlMGMyNjNkYjU3MDAzNDUucG5n?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
