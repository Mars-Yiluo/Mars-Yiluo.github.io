<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YiluoTalk</title>
  
  <subtitle>享受每一天，Just Enjoy !</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yiluotalk.com/"/>
  <updated>2020-09-02T06:20:49.000Z</updated>
  <id>https://yiluotalk.com/</id>
  
  <author>
    <name>伊洛</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python13--生成器</title>
    <link href="https://yiluotalk.com/2020/09/02/Python13--%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>https://yiluotalk.com/2020/09/02/Python13--%E7%94%9F%E6%88%90%E5%99%A8/</id>
    <published>2020-09-02T06:19:59.000Z</published>
    <updated>2020-09-02T06:20:49.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM2YjAxODdmNzM5M2Q1MmEucG5n?x-oss-process=image/format,png" alt=""></p><blockquote><p>本文首发自伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote><h5 id="1-生成器"><a href="#1-生成器" class="headerlink" title="1.生成器"></a>1.生成器</h5><ul><li><code>Generator</code>是一个用于创建迭代器的简单而强大的工具。 它们的写法类似标准的函数</li><li>生成器首先它是一个迭代器，和迭代器一样，生成器只能被遍历迭代一次，因为每次迭代的元素不是像列表元素一样，已经在内存中，每迭代一次，生成一个元素</li><li>生成器和迭代器的主要区别在于：<br>1、它们的创建方式不同<br>2、生成器有一些特殊方法是迭代器不具有的<h5 id="2-创建生成器的两中方法"><a href="#2-创建生成器的两中方法" class="headerlink" title="2.创建生成器的两中方法"></a>2.创建生成器的两中方法</h5><h6 id="（一）yield-编写生成器函数，函数的返回值就是生成器"><a href="#（一）yield-编写生成器函数，函数的返回值就是生成器" class="headerlink" title="（一）yield 编写生成器函数，函数的返回值就是生成器"></a>（一）yield 编写生成器函数，函数的返回值就是生成器</h6></li><li><code>yield</code> 的使用方法和<code>return</code> 类似。不同的是，<code>return</code>可以返回有效的 Python 对象，而 <code>yield</code>返回的是一个生成器，函数碰到 <code>return</code> 就直接返回了，而使用了 <code>yield</code>的函数，到<code>yield</code> 返回一个元素，当再次迭代生成器时，会从 <code>yield</code> 后面继续执行，直到遇到下一个<code>yield</code>或者函数结束退出</li><li>承接上文迭代器，还是用游戏中的英雄技能举例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line"></span><br><span class="line">def hero(*skills):</span><br><span class="line">    print(&#39;英雄的释放技能分别如下&#39;)</span><br><span class="line">    for release_skill in skills:</span><br><span class="line">         yield release_skill</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">skill &#x3D; hero(&#39;一骑当千&#39;,&#39;单刀赴会&#39;,&#39;青龙偃月&#39;,&#39;刀锋铁骑&#39;)</span><br><span class="line">for s in skill:</span><br><span class="line">    print(s)</span><br></pre></td></tr></table></figure></li><li><code>hero</code>函数中传入英雄的<code>1-4</code>技能</li><li>来看一下运行结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 微信搜索：伊洛的小屋</span><br><span class="line"># 个人主页：https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">(yiluo) ➜  Code python hero.py</span><br><span class="line">英雄的释放技能分别如下</span><br><span class="line">一骑当千</span><br><span class="line">单刀赴会</span><br><span class="line">青龙偃月</span><br><span class="line">刀锋铁骑</span><br></pre></td></tr></table></figure></li><li>这样使用比迭代器的好处是，生成器不会像迭代器放在内存中，是用户传入数值动态生成的<h6 id="（二）生成器表达式"><a href="#（二）生成器表达式" class="headerlink" title="（二）生成器表达式"></a>（二）生成器表达式</h6></li><li>另一种创建生成器的方式就是通过表达式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python3</span><br><span class="line">Python 3.7.5 (default, Nov 29 2019, 14:32:46)</span><br><span class="line">[Clang 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; s &#x3D; (x+x for x in range(0,4))</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at 0x1058537d0&gt;</span><br><span class="line">&gt;&gt;&gt; for x in s:</span><br><span class="line">...     print(x)</span><br><span class="line">...</span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br></pre></td></tr></table></figure></li><li><code>s</code> 就是生成器，然后遍历查看结果</li><li>迭代完一次之后再迭代这个生成器，它不会打印元素，也不会报错</li><li>使用生成器有什么好处呢？因为生成器不是把所有元素存在内存，而是动态生成的，所以当你要迭代的对象有非常多的元素时，使用生成器能为你节约很多内存，这是一个内存友好的特性</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python12--迭代器</title>
    <link href="https://yiluotalk.com/2020/09/01/Python12--%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>https://yiluotalk.com/2020/09/01/Python12--%E8%BF%AD%E4%BB%A3%E5%99%A8/</id>
    <published>2020-09-01T07:13:59.000Z</published>
    <updated>2020-09-01T07:14:51.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM2YjAxODdmNzM5M2Q1MmEucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="1-迭代器"><a href="#1-迭代器" class="headerlink" title="1.迭代器"></a>1.迭代器</h5><p>要理解迭代器，首先需要明白迭代器和可迭代对象的区别。一个一个读取、操作对象称为迭代，Python 中，可迭代<code>（Iterable）</code>对象就是你能用<code>for</code>循环迭代它的元素，比如列表是可迭代的</p><ul><li><p>大多数容器对象都可以使用 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#for" target="_blank" rel="noopener"><code>for</code></a> 语句，承接上文装饰器的例子，还是拿英雄的技能举例子</p></li><li><p>王者荣耀中英雄关羽的技能有<code>一骑当千</code> <code>单刀赴会</code> <code>青龙偃月</code> <code>刀锋铁骑</code>   用  <code>for</code>语句分别迭代出<code>1-4</code>技能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python3</span><br><span class="line">Python 3.7.5 (default, Nov 29 2019, 14:32:46)</span><br><span class="line">[Clang 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; skills &#x3D; [&#39;一骑当千&#39;,&#39;单刀赴会&#39;,&#39;青龙偃月&#39;,&#39;刀锋铁骑&#39;]</span><br><span class="line">&gt;&gt;&gt; for skill in skills:</span><br><span class="line">...     print(skill)</span><br><span class="line">...</span><br><span class="line">一骑当千</span><br><span class="line">单刀赴会</span><br><span class="line">青龙偃月</span><br><span class="line">刀锋铁骑</span><br></pre></td></tr></table></figure></li><li><p>在幕后，<a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#for" target="_blank" rel="noopener"><code>for</code></a> 语句会调用容器对象中的 <a href="https://docs.python.org/zh-cn/3/library/functions.html#iter" target="_blank" rel="noopener" title="iter"><code>iter()</code></a>。 该函数返回一个定义了 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#iterator.__next__" target="_blank" rel="noopener" title="iterator.__next__"><code>__next__()</code></a> 方法的迭代器对象，该方法将逐一访问容器中的元素</p></li><li><p>我们现在利用一下  <code>iter()</code>函数 和 <code>next()</code>函数</p></li></ul><p>你能用 next 函数不断的去获取它的下一个值，直到迭代器返回 <code>StopIteration</code>异常。所有的可迭代对象都可以通过 iter 函数去获取它的迭代器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 作者：伊洛Yiluo 公众号：伊洛的小屋</span><br><span class="line"># 个人主页：https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line"># 博客园：https:&#x2F;&#x2F;www.cnblogs.com&#x2F;yiluotalk&#x2F;</span><br><span class="line">&gt;&gt;&gt; skills &#x3D; [&#39;一骑当千&#39;,&#39;单刀赴会&#39;,&#39;青龙偃月&#39;,&#39;刀锋铁骑&#39;]</span><br><span class="line">&gt;&gt;&gt; skill &#x3D; iter(skills)</span><br><span class="line">&gt;&gt;&gt; print(skill)</span><br><span class="line">&lt;list_iterator object at 0x1037ea5d0&gt;</span><br><span class="line">&gt;&gt;&gt; next(skill)</span><br><span class="line">&#39;一骑当千&#39;</span><br><span class="line">&gt;&gt;&gt; next(skill)</span><br><span class="line">&#39;单刀赴会&#39;</span><br><span class="line">&gt;&gt;&gt; next(skill)</span><br><span class="line">&#39;青龙偃月&#39;</span><br><span class="line">&gt;&gt;&gt; next(skill)</span><br><span class="line">&#39;刀锋铁骑&#39;</span><br><span class="line">&gt;&gt;&gt; next(skill)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><ul><li><code>skill</code>就是迭代器</li><li><code>next</code>迭代到没有值的时候就会报错</li><li>所有的迭代器其实都实现了<code>__iter__</code> 和 <code>__next__</code> 这俩个魔法方法，<code>iter</code>与 <code>next</code> 函数实际上调用的是这两个魔法方法，上面的例子背后其实是这样的</li></ul><h5 id="2-另一种实现方式"><a href="#2-另一种实现方式" class="headerlink" title="2.另一种实现方式"></a>2.另一种实现方式</h5><ul><li>迭代器的另一种实现方式，<code>__iter__</code> + <code>__next__：</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class Test:</span><br><span class="line">...     def __init__(self, a, b):</span><br><span class="line">...         self.a &#x3D; a</span><br><span class="line">...         self.b &#x3D; b</span><br><span class="line">...     def __iter__(self):</span><br><span class="line">...         return self</span><br><span class="line">...     def __next__(self):</span><br><span class="line">...         self.a +&#x3D; 1</span><br><span class="line">...         if self.a &gt; self.b:</span><br><span class="line">...             raise StopIteration()</span><br><span class="line">...         return self.a</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; test &#x3D; Test(0, 5)</span><br><span class="line">&gt;&gt;&gt; next(test)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; next(test)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; next(test)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; next(test)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; next(test)</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; next(test)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 10, in __next__</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure></li><li>能被 for 循环访问的都是可迭代对象，能被 next 函数获取下一个值的是迭代器</li></ul><blockquote><p>欢迎下方【戳一下】【点赞】<br>  Author：伊洛Yiluo<br>  愿你享受每一天，Just Enjoy !</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python11--装饰器</title>
    <link href="https://yiluotalk.com/2020/08/31/Python11--%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>https://yiluotalk.com/2020/08/31/Python11--%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
    <published>2020-08-31T06:33:59.000Z</published>
    <updated>2020-08-31T06:34:22.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWQwNzRhZjUzM2I5MWMwZWIucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="1-装饰器定义"><a href="#1-装饰器定义" class="headerlink" title="1.装饰器定义"></a>1.装饰器定义</h5><ul><li><code>装饰器</code>本质上是一个<code>函数</code>，可以接受一个<code>函数</code>作为<code>参数</code><h5 id="2-装饰器简单的例子"><a href="#2-装饰器简单的例子" class="headerlink" title="2.装饰器简单的例子"></a>2.装饰器简单的例子</h5></li><li>承接之前的内容，英雄释放火焰技能。打印出英雄释放技能的时间<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">def release_skills(hero):</span><br><span class="line">    def release_skill(*skill, **skills):</span><br><span class="line">        print(datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;))</span><br><span class="line">        return hero(*skill, **skills)</span><br><span class="line">    return release_skill</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@release_skills</span><br><span class="line">def hero(name, skill):</span><br><span class="line">    return (name + &#39;--&gt;&#39;+&#39;释放技能：&#39;+ skill)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(hero(&#39;关羽&#39;, &#39;fire&#39;))</span><br><span class="line">print(hero.__name__)</span><br></pre></td></tr></table></figure></li><li>如上，<code>release_skills</code>装饰器负责打印释放技能的时间<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python hero.py</span><br><span class="line">2019-12-12 11:11:49</span><br><span class="line">关羽--&gt;释放技能：fire</span><br><span class="line">release_skill</span><br></pre></td></tr></table></figure></li><li>我们运行<code>hero</code>函数的时候，同时打印出了英雄释放火焰技能的时间</li><li>可是我们发现了一个比较严重的问题，<code>hero</code> 函数应变成了<code>release_skill</code>函数了，看上面的代码，确实<code>hero</code>已经被<code>release_skill</code>改变了</li><li>那如何解决这个被改变的问题呢？ 总不能用完装饰器，被装饰的函数已经不是之前的函数吧，还好<code>Python</code> 提供了方法解决这个问题<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 作者：伊洛Yiluo 公众号：伊洛的小屋</span><br><span class="line"># 个人主页：https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line"># 博客园：https:&#x2F;&#x2F;www.cnblogs.com&#x2F;yiluotalk&#x2F;</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line">from datetime import datetime</span><br><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line">def release_skills(hero):</span><br><span class="line">    @wraps(hero)</span><br><span class="line">    def release_skill(*skill, **skills):</span><br><span class="line">        print(datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;))</span><br><span class="line">        return hero(*skill, **skills)</span><br><span class="line">    return release_skill</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@release_skills</span><br><span class="line">def hero(name, skill):</span><br><span class="line">    return (name + &#39;--&gt;&#39;+&#39;释放技能：&#39;+ skill)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(hero(&#39;关羽&#39;, &#39;fire&#39;))</span><br><span class="line">print(hero.__name__)</span><br></pre></td></tr></table></figure></li><li>上面的代码用到了<code>wraps()</code>，然后我们运行一下看下结果函数是否被改变<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python hero.py</span><br><span class="line">2019-12-12 11:25:38</span><br><span class="line">关羽--&gt;释放技能：fire</span><br><span class="line">hero</span><br></pre></td></tr></table></figure></li><li>函数依旧是<code>hero</code>，看来是完美解决了这个问题</li><li><code>@</code>是 <code>Python</code> 提供的语法糖，语法糖指计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用<h5 id="3-property-装饰器"><a href="#3-property-装饰器" class="headerlink" title="3.property 装饰器"></a>3.property 装饰器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"></span><br><span class="line">class Animal:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.age &#x3D; 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    cat &#x3D; Animal()</span><br><span class="line">    print(cat.age)</span><br><span class="line">    cat.age &#x3D; &#39;age&#39;</span><br><span class="line">    print(cat.age)</span><br></pre></td></tr></table></figure></li><li>执行结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  code python3 demo.py</span><br><span class="line">3</span><br><span class="line">age</span><br></pre></td></tr></table></figure></li><li>以看到如果 age 属性值可以被公开访问，用户赋值为字符串，很明显这不符合实际情况<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"></span><br><span class="line">class Animal:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.__age &#x3D; 3</span><br><span class="line">    def get_age(self):</span><br><span class="line">        return self.__age</span><br><span class="line">    def set_age(self, value):</span><br><span class="line">        if isinstance(value, int):</span><br><span class="line">            self.__age &#x3D; value</span><br><span class="line">        else:</span><br><span class="line">            raise ValueError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    cat &#x3D; Animal()</span><br><span class="line">    print(cat.get_age)</span><br><span class="line">    cat.set_age(&#39;age&#39;)</span><br></pre></td></tr></table></figure></li><li>执行结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;demo.py&quot;, line 18, in &lt;module&gt;</span><br><span class="line">    cat.set_age(&#39;age&#39;)</span><br><span class="line">  File &quot;demo.py&quot;, line 12, in set_age</span><br><span class="line">    raise ValueError</span><br><span class="line">ValueError</span><br></pre></td></tr></table></figure></li><li>@property 装饰器可以将一个方法变成一个属性来使用，通过 @property 装饰器可以获得和修改对象的某一个属性。</li><li>使用 @property 装饰器的方法如下：</li></ul><p>1.只有 @property 表示只读<br>2.同时有 @property 和 @<em>.setter 表示可读可写<br>3.同时有 @property、@</em>.setter、和 @<em>.deleter 表示可读可写可删除<br>4.@property 必须定义在 @</em>.setter 的前面<br>5.类必须继承 object 父类，否则 @property 不会生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"></span><br><span class="line">class Animal:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.__age &#x3D; 3</span><br><span class="line">    @property</span><br><span class="line">    def age(self):</span><br><span class="line">        return self.__age</span><br><span class="line">    @age.setter</span><br><span class="line">    def age(self, value):</span><br><span class="line">        if isinstance(value, int):</span><br><span class="line">            self.__age &#x3D; value</span><br><span class="line">        else:</span><br><span class="line">            raise ValueaError</span><br><span class="line">    @age.deleter</span><br><span class="line">    def age(self):</span><br><span class="line">        print(&#39;delete age&#39;)</span><br><span class="line">        del self.__age</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    cat &#x3D; Animal()</span><br><span class="line">    print(cat.age)</span><br><span class="line">    cat.age &#x3D; 6</span><br><span class="line">    print(cat.age)</span><br><span class="line">    del cat.age</span><br><span class="line">    print(cat.age)</span><br></pre></td></tr></table></figure><ul><li>执行结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  code python3 demo.py</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">delete age</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;demo.py&quot;, line 26, in &lt;module&gt;</span><br><span class="line">    print(cat.age)</span><br><span class="line">  File &quot;demo.py&quot;, line 8, in age</span><br><span class="line">    return self.__age</span><br><span class="line">AttributeError: &#39;Animal&#39; object has no attribute &#39;_Animal__age&#39;</span><br></pre></td></tr></table></figure></li><li>从这个简单的例子中我们可以发现 age 由一个函数转变为一个属性，并且通过增加一个 setter 函数的方式来支持 age 的设置。通过 property 和 setter ，可以有效地实现 get_age（获取对象的属性） 和 set_age（设置对象的属性）这两个操作，而不需要直接将内部的 __age 属性暴露出来，同时可以在 setter 函数中对设置的参数进行检查，避免了直接对 __age 内部属性进行赋值的潜在风险</li></ul><blockquote><p>欢迎下方【戳一下】【点赞】<br>  Author：伊洛Yiluo<br>  愿你享受每一天，Just Enjoy !</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Django基础7--模板系统</title>
    <link href="https://yiluotalk.com/2020/08/30/Django%E5%9F%BA%E7%A1%807--%E6%A8%A1%E6%9D%BF%E7%B3%BB%E7%BB%9F/"/>
    <id>https://yiluotalk.com/2020/08/30/Django%E5%9F%BA%E7%A1%807--%E6%A8%A1%E6%9D%BF%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-08-30T02:08:59.000Z</published>
    <updated>2020-08-30T02:14:08.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM2YjAxODdmNzM5M2Q1MmEucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="1-使用模板系统"><a href="#1-使用模板系统" class="headerlink" title="1.使用模板系统"></a>1.使用模板系统</h5><ul><li><p>在之前的<code>model.py</code>文件中新增加<code>Detail</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ProjectInfo(models.Model):</span><br><span class="line">    &quot;&quot;&quot; 项目信息模型 &quot;&quot;&quot;</span><br><span class="line">    project_name &#x3D; models.CharField(max_length&#x3D;30)</span><br><span class="line">    dev &#x3D; models.CharField(max_length&#x3D;20)</span><br><span class="line">    tester &#x3D; models.CharField(max_length&#x3D;20)</span><br><span class="line">    add_data &#x3D; models.DateTimeField(auto_now_add&#x3D;True)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        # 返回项目名称</span><br><span class="line">        return self.project_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Detail(models.Model):</span><br><span class="line">    project &#x3D; models.ForeignKey(ProjectInfo, on_delete&#x3D;models.CASCADE)</span><br><span class="line">    detail_text &#x3D; models.CharField(max_length&#x3D;200)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.detail_text</span><br></pre></td></tr></table></figure><p>使用 <code>ForeignKey</code>定义了一个关系。这将告诉 Django，每个 <code>detail</code> 对象都关联到一个 <code>ProjectInfo</code> 对象。Django 支持所有常用的数据库关系：多对一、多对多和一对一</p></li><li><p>在管了后台添加数据<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWI1YmRkZWM0NGQyYjAzZjQucG5n?x-oss-process=image/format,png" alt=""></p></li><li><p>对应项目添加详情<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTIxZDk3Y2JkMTQ4OGQ4ZjUucG5n?x-oss-process=image/format,png" alt=""></p></li><li><p>重新改写一下<code>project.html</code>的模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;AutoPlarform Home&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123; project.project_name &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&#123;% for detail in project.detail_set.all %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; detail.detail_text &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>模板系统统一使用点符号来访问变量的属性</p></li><li><p>现在我们来访问下每个项目对应的url，来看一下项目的信息详情有没有正确的显示出来<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWY3YzdlYzRlNTRhNjcyNGIucG5n?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWUwODNjNWU2ZDJiZTc3MjgucG5n?x-oss-process=image/format,png" alt=""><br>显示内容正确</p><h5 id="2-去除模板中的硬编码URL"><a href="#2-去除模板中的硬编码URL" class="headerlink" title="2. 去除模板中的硬编码URL"></a>2. 去除模板中的硬编码URL</h5></li><li><p>我们修改一下之前<code>home</code>的页面，让对应内容可以跳转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;AutoPlarform Home&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&#123;% if project_list %&#125;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">    &#123;% for project in project_list %&#125;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;&#x2F;autoapi&#x2F;&#123;&#123; project.id &#125;&#125;&#x2F;&quot;&gt;&#123;&#123; project.project_name &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li><li><p>打开<code>home</code>页面<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTY4Mjg2M2ViNjBkZGU0YTgucG5n?x-oss-process=image/format,png" alt=""></p></li><li><p>然后点击接口自动化<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTVjM2JmNGM2Nzc0N2ExZjkucG5n?x-oss-process=image/format,png" alt=""><br>成功跳转到接口自动化的介绍页面</p></li><li><p>但是以上内容你会发现一个问题，我们的挑战链接是硬编码的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&#x2F;autoapi&#x2F;&#123;&#123; project.id &#125;&#125;&#x2F;&quot;&gt;&#123;&#123; project.project_name &#125;&#125;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>硬编码和强耦合的链接，对于一个包含很多应用的项目来说，修改起来是十分困难的<br>不过的还记得之前在<code>url</code>配置页面的内容嘛</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 作者：伊洛Yiluo 公众号：伊洛的小屋</span><br><span class="line"># 个人主页：https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line"># 博客园：https:&#x2F;&#x2F;www.cnblogs.com&#x2F;yiluotalk&#x2F;</span><br><span class="line">from django.urls import path</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;home&#x2F;&#39;, views.home, name&#x3D;&#39;index&#39;),</span><br><span class="line">    path(&#39;&lt;int:project_id&gt;&#x2F;&#39;, views.project_list, name&#x3D;&#39;project list&#39;),</span><br><span class="line">    path(&#39;register&#x2F;&#39;, views.register, name&#x3D;&#39;register&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>之前我们通过<code>name</code>参数为<code>url</code>定义了名字，现在我们可以通过% url %代替它</p></li><li><p>来改一下<code>home.html</code>代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;AutoPlarform Home&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&#123;% if project_list %&#125;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">    &#123;% for project in project_list %&#125;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;&#123;% url &#39;project list&#39; project.id %&#125;&quot;&gt;&#123;&#123; project.project_name &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li><li><p>再次打开一个页面验证下跳转<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWJhMmQ2ZDdhNTA1ODM2ZWYucG5n?x-oss-process=image/format,png" alt=""><br>成功的跳转</p></li><li><p>这样做的好处也可以不动模板的内容改URL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;home&#x2F;&#39;, views.home, name&#x3D;&#39;index&#39;),</span><br><span class="line">    path(&#39;detail&#x2F;&lt;int:project_id&gt;&#x2F;&#39;, views.project_list, name&#x3D;&#39;project list&#39;),</span><br><span class="line">    path(&#39;register&#x2F;&#39;, views.register, name&#x3D;&#39;register&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>打开home首页点击跳转<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLThmYzE2Y2I0NGI1ZDM4YmYucG5n?x-oss-process=image/format,png" alt=""><br>URL已经按预设置发生了变化</p><h5 id="3-为URL名称添加命名空间"><a href="#3-为URL名称添加命名空间" class="headerlink" title="3.为URL名称添加命名空间"></a>3.为<code>URL</code>名称添加命名空间</h5><p>现在再Django项目中，只有一个APP，但是实际开发过程中会有很多。Django如何分辨重名的URL<br>答案就是：在<code>URLconf</code>中添加命名空，加上app_name 设置命名空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app_name &#x3D; &#39;autoapi&#39;</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;home&#x2F;&#39;, views.home, name&#x3D;&#39;index&#39;),</span><br><span class="line">    path(&#39;detail&#x2F;&lt;int:project_id&gt;&#x2F;&#39;, views.project_list, name&#x3D;&#39;project list&#39;),</span><br><span class="line">    path(&#39;register&#x2F;&#39;, views.register, name&#x3D;&#39;register&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>HTML页面再改动下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;AutoPlarform Home&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&#123;% if project_list %&#125;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">    &#123;% for project in project_list %&#125;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;&#123;% url &#39;autoapi:project list&#39; project.id %&#125;&quot;&gt;&#123;&#123; project.project_name &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li><li><p>打开网页查看效果<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWY4NTk2Njc2MmIwYTM2N2YucG5n?x-oss-process=image/format,png" alt=""></p></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Django基础" scheme="https://yiluotalk.com/categories/Django%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Django基础" scheme="https://yiluotalk.com/tags/Django%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
  </entry>
  
  <entry>
    <title>Python10--类中的魔法方法</title>
    <link href="https://yiluotalk.com/2020/08/29/Python10--%E7%B1%BB%E4%B8%AD%E7%9A%84%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/"/>
    <id>https://yiluotalk.com/2020/08/29/Python10--%E7%B1%BB%E4%B8%AD%E7%9A%84%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/</id>
    <published>2020-08-29T09:38:59.000Z</published>
    <updated>2020-08-29T09:39:11.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM2YjAxODdmNzM5M2Q1MmEucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="1-类中的特殊方法（魔法方法）"><a href="#1-类中的特殊方法（魔法方法）" class="headerlink" title="1.类中的特殊方法（魔法方法）"></a>1.类中的特殊方法（魔法方法）</h5><ul><li>在 Python 中有一些特殊的方法，它们是 Python 内置的方法，通常以双下划线来命名，比如<code>__init__</code>、<code>__repr__</code> 等等，在类中使用它们时往往较少的代码就可以发挥很大的作用，提高开发效率，因此在 Python 中称这些方法为<code>“魔法方法”</code></li><li>在 Python 中最常使用的是<code>__init__</code>方法，它可以用于新建实例对象的时候给对象绑定属性，但是在新建对象的时候第一个调用的不是<code>__init__</code>方法，而是 <code>__new__(cls, [...])</code>方法，这两个方法的区别在于</li></ul><p>1.<code>__init__</code>方法是在实例对象创建完成后调用的，主要用于设置实例对象的初始值，它的第一个参数为 <code>self</code>，可以不需要返回值<br>2. <code>__new__</code>方法是在实例对象被创建之前调用的，主要用于创建实例对象并返回实例对象，它的第一个参数为<code>cls</code> ，它只会取 <code>cls</code>参数，其余参数都传给了 <code>__init__</code>方法，必须要有返回值可以是 <code>super().__new__(cls)</code> 或是 <code>object.__new__(cls)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 作者：伊洛Yiluo 公众号：伊洛的小屋</span><br><span class="line"># 个人主页：https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line"># 博客园：https:&#x2F;&#x2F;www.cnblogs.com&#x2F;yiluotalk&#x2F;</span><br><span class="line">In [1]: class People:</span><br><span class="line">   ...:     def __new__(cls, name):</span><br><span class="line">   ...:         print(&#39;__new__&#39;)</span><br><span class="line">   ...:         return super(People, cls).__new__(cls)</span><br><span class="line">   ...:     def __init__(self, name):</span><br><span class="line">   ...:         print(&#39;__init__&#39;)</span><br><span class="line">   ...:         self.name &#x3D; name</span><br><span class="line">   ...:     def __del__(self):</span><br><span class="line">   ...:         print(&#39;__del__&#39;)</span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [2]: man &#x3D; People(&#39;Yiluo&#39;)</span><br><span class="line">__new__</span><br><span class="line">__init__</span><br><span class="line"></span><br><span class="line">In [3]: man.name</span><br><span class="line">Out[3]: &#39;Yiluo&#39;</span><br><span class="line"></span><br><span class="line">In [4]: del man</span><br><span class="line">__del__</span><br></pre></td></tr></table></figure><ul><li>由于 Python 是动态语言，因此定义一个实例对象后可以绑定任意的属性，如果需要限制绑定属性类别，可以使用<code>__slots__</code> 变量，可以绑定的属性值以元组的形式赋予给它。需要注意的是：<code>__slots__</code>的作用只在定义的类中有效，在继承该类的子类中是无效的。如果想要在子类中限制属性则需要重新定义，重新定以后，父类中的<code>__slots__</code>则会被子类继承</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class People:</span><br><span class="line">...     __slots__ &#x3D; (&#39;name&#39;, &#39;age&#39;)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; somebody &#x3D; People()</span><br><span class="line">&gt;&gt;&gt; somebody.name &#x3D; &#39;Yiluo&#39;</span><br><span class="line">&gt;&gt;&gt; somebody.age &#x3D; 18</span><br><span class="line">&gt;&gt;&gt; somebody.name</span><br><span class="line">&#39;Yiluo&#39;</span><br><span class="line">&gt;&gt;&gt; somebody.age</span><br><span class="line">18</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; class Man(People):</span><br><span class="line">...     __slots__ &#x3D; (&#39;city&#39;)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; person &#x3D; Man()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; person.name &#x3D; &#39;Yiluo&#39;</span><br><span class="line">&gt;&gt;&gt; person.age &#x3D; 18</span><br><span class="line">&gt;&gt;&gt; person.address &#x3D; &#39;shenzhen&#39;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#39;Man&#39; object has no attribute &#39;address&#39;</span><br><span class="line">&gt;&gt;&gt; person.city &#x3D; &#39;shenzhen&#39;</span><br><span class="line">&gt;&gt;&gt; person.name</span><br><span class="line">&#39;Yiluo&#39;</span><br><span class="line">&gt;&gt;&gt; person.age</span><br><span class="line">18</span><br><span class="line">&gt;&gt;&gt; person.city</span><br><span class="line">&#39;shenzhen&#39;</span><br></pre></td></tr></table></figure><h5 id="2-getattribute-和-getattr"><a href="#2-getattribute-和-getattr" class="headerlink" title="2. __getattribute__ 和 __getattr__"></a>2. <code>__getattribute__</code> 和 <code>__getattr__</code></h5><ul><li>在 Python 类中，当访问实例对象属性的时候，其实默认会调用<code>__getattribute__</code>方法，如果没有该属性就会报 <code>AttributeErro</code>r 错误，这个时候可以考虑使用 <code>__getattr__</code>方法进行自定义</li></ul><h5 id="3-call"><a href="#3-call" class="headerlink" title="3.__call__"></a>3.<code>__call__</code></h5><ul><li>在 Python 中一切皆对象，对象分为可调用的和不可调用的，凡是可以通过一对括号 () 来调用的都是可调用对象，比如函数、类等，可以通过 <code>callable()</code> 函数来判断一个对象是否是可调用对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class People:</span><br><span class="line">...     pass</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; person &#x3D; People()</span><br><span class="line">&gt;&gt;&gt; callable(person)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; callable(People())</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; callable(People)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li>通常情况下实例对象都是不可调用对象，但是如果在类中使用了 <strong>call</strong> 方法就可以将实例对象转换为可调用对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class People:</span><br><span class="line">...     def __call__(self):</span><br><span class="line">...         print(&#39;__call__&#39;)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; person &#x3D; People()</span><br><span class="line">&gt;&gt;&gt; person()</span><br><span class="line">__call__</span><br><span class="line">&gt;&gt;&gt; callable(person)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h5 id="4-iter-和-next"><a href="#4-iter-和-next" class="headerlink" title="4.__iter__和 __next__"></a>4.<code>__iter__</code>和 <code>__next__</code></h5></li><li>使用 <code>__iter__</code>方法就可以让类成为一个可迭代对象，如果使用 for 循环遍历类对象还需要在类中定义<code>__next__</code>方法，在<code>__next__</code>方法中可以定义取值的规则，当超出取值规则会抛出 <code>StopIteration</code> 异常从而退出当前循环<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"></span><br><span class="line">class Test:</span><br><span class="line">    def __init__(self, data&#x3D;0):</span><br><span class="line">        self.data &#x3D; data</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br><span class="line">    def __next__(self):</span><br><span class="line">        if self.data &gt; 5:</span><br><span class="line">            raise StopIteration</span><br><span class="line">        else:</span><br><span class="line">            self.data +&#x3D; 1</span><br><span class="line">            return self.data</span><br><span class="line"></span><br><span class="line">for i in Test():</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></li><li>执行结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  code python3 demo.py</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Django基础6--抛出404异常</title>
    <link href="https://yiluotalk.com/2020/08/28/Django%E5%9F%BA%E7%A1%806--%E6%8A%9B%E5%87%BA404%E5%BC%82%E5%B8%B8/"/>
    <id>https://yiluotalk.com/2020/08/28/Django%E5%9F%BA%E7%A1%806--%E6%8A%9B%E5%87%BA404%E5%BC%82%E5%B8%B8/</id>
    <published>2020-08-28T13:44:59.000Z</published>
    <updated>2020-08-28T13:44:40.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM2YjAxODdmNzM5M2Q1MmEucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="1-抛出404错误"><a href="#1-抛出404错误" class="headerlink" title="1.抛出404错误"></a>1.抛出404错误</h5><ul><li><p>当内容不存在时，需要返回404</p></li><li><p>回到<code>views.py</code>,改写<code>project_list</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from django.http import HttpResponse, Http404</span><br><span class="line">from django.shortcuts import render</span><br><span class="line"></span><br><span class="line">from .models import ProjectInfo</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def home(request):</span><br><span class="line">    project_list &#x3D; ProjectInfo.objects.order_by(&#39;add_data&#39;)[:5]</span><br><span class="line">    context &#x3D; &#123;&#39;project_list&#39;: project_list&#125;</span><br><span class="line">    return render(request, &#39;autoapi&#x2F;home.html&#39;, context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def project_list(request, project_id):</span><br><span class="line">    try:</span><br><span class="line">        project &#x3D; ProjectInfo.objects.get(pk&#x3D;project_id)</span><br><span class="line">        context &#x3D; &#123;&#39;project&#39;: project&#125;</span><br><span class="line">    except ProjectInfo.DoesNotExist:</span><br><span class="line">        raise Http404(&#39;project list dose not exist&#39;)</span><br><span class="line">    return render(request, &#39;autoapi&#x2F;project.html&#39;, context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register(request):</span><br><span class="line">    return HttpResponse(&#39;You\&#39;re looking at the register page&#39;)</span><br></pre></td></tr></table></figure></li><li><p>回到<code>url.py</code> 改写一下, <code>project_list</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;home&#x2F;&#39;, views.home, name&#x3D;&#39;index&#39;),</span><br><span class="line">    path(&#39;&lt;int:project_id&gt;&#x2F;&#39;, views.project_list, name&#x3D;&#39;project list&#39;),</span><br><span class="line">    path(&#39;register&#x2F;&#39;, views.register, name&#x3D;&#39;register&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>在/AutoPlatform/autoapi/templates下新建一个<code>project.html</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;AutoPlarform Home&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&#123;&#123; project &#125;&#125;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li><li><p>来先看下全面的列表<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM5ODNiMWY1YWYwMTFkZjUucG5n?x-oss-process=image/format,png" alt=""></p></li><li><p>数据中只有4个列表，那么如果输入id 为5的话，按照上面的代码逻辑应该就会抛出404异常的错误了</p></li><li><p>来先看看id = 1<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTI2MzEyZjkyNzJjYzgyNTUucG5n?x-oss-process=image/format,png" alt=""></p></li><li><p>再看看id = 4<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWE4NmE2ZGNhZGRjYzY4NWEucG5n?x-oss-process=image/format,png" alt=""></p></li><li><p>边界值都看过了，那么现在我们来输入一个不存在数据的id,测试一下是否会抛出404的异常<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTZkOTNhMTBmODUxYzE2MzYucG5n?x-oss-process=image/format,png" alt=""></p></li><li><p>抛出了project list dose not exist的异常</p><h5 id="2-快捷函数：-get-object-or-404"><a href="#2-快捷函数：-get-object-or-404" class="headerlink" title="2.快捷函数： get_object_or_404()"></a>2.快捷函数： <code>get_object_or_404()</code></h5><p>Django还提供了一个快捷的函数来实现上面的功能</p></li><li><p>现在来再改写一个views.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 作者：伊洛Yiluo 公众号：伊洛的小屋</span><br><span class="line"># 个人主页：https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line"># 博客园：https:&#x2F;&#x2F;www.cnblogs.com&#x2F;yiluotalk&#x2F;</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line">from django.shortcuts import get_object_or_404, render</span><br><span class="line"></span><br><span class="line">from .models import ProjectInfo</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def home(request):</span><br><span class="line">    project_list &#x3D; ProjectInfo.objects.order_by(&#39;add_data&#39;)[:5]</span><br><span class="line">    context &#x3D; &#123;&#39;project_list&#39;: project_list&#125;</span><br><span class="line">    return render(request, &#39;autoapi&#x2F;home.html&#39;, context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def project_list(request, project_id):</span><br><span class="line">    project &#x3D; get_object_or_404(ProjectInfo, pk&#x3D;project_id)</span><br><span class="line">    context &#x3D; &#123;&#39;project&#39;: project&#125;</span><br><span class="line">    return render(request, &#39;autoapi&#x2F;project.html&#39;, context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register(request):</span><br><span class="line">    return HttpResponse(&#39;You\&#39;re looking at the register page&#39;)</span><br></pre></td></tr></table></figure></li><li><p>打开一个存在的id<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWUzYjAyNjUwNWY1M2RkNGYucG5n?x-oss-process=image/format,png" alt=""></p></li><li><p>打开一个不存在的id<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWMzMGM5ZjRjNmYxM2ZkNmYucG5n?x-oss-process=image/format,png" alt=""></p></li><li><p>这样就简化了一开始的过程，看上去更加的简洁，而且会降低模型层和视图层的耦合性</p></li></ul><blockquote><p>欢迎下方【戳一下】【点赞】<br>  Author：伊洛Yiluo<br>  愿你享受每一天，Just Enjoy !</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Django基础" scheme="https://yiluotalk.com/categories/Django%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Django基础" scheme="https://yiluotalk.com/tags/Django%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
  </entry>
  
  <entry>
    <title>Django基础5--主页及模板</title>
    <link href="https://yiluotalk.com/2020/08/27/Django%E5%9F%BA%E7%A1%805--%E4%B8%BB%E9%A1%B5%E5%8F%8A%E6%A8%A1%E6%9D%BF/"/>
    <id>https://yiluotalk.com/2020/08/27/Django%E5%9F%BA%E7%A1%805--%E4%B8%BB%E9%A1%B5%E5%8F%8A%E6%A8%A1%E6%9D%BF/</id>
    <published>2020-08-27T06:16:59.000Z</published>
    <updated>2020-08-27T06:16:32.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM2YjAxODdmNzM5M2Q1MmEucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="1-创建主页"><a href="#1-创建主页" class="headerlink" title="1. 创建主页"></a>1. 创建主页</h5><ul><li>使用Django创建网页的过程通常分三个阶段：定义URL、编写视图和编写模板</li><li>每个URL都被映射到特定的视图，视图函数获取并处理网页所需的数据<h5 id="2-编写更多视图"><a href="#2-编写更多视图" class="headerlink" title="2.编写更多视图"></a>2.编写更多视图</h5></li><li>现在在<code>views.py</code> 里添加更多视图<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def home(request):</span><br><span class="line">    return HttpResponse(&quot;Hello, Welcome to Home Page&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def project_list(request):</span><br><span class="line">    return HttpResponse(&#39;You\&#39;re looking at the list of project list&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register(request):</span><br><span class="line">    return HttpResponse(&#39;You\&#39;re looking at the register page&#39;)</span><br></pre></td></tr></table></figure></li><li>把这些新视图添加进 <code>urls</code> 模块里<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 作者：伊洛Yiluo 公众号：伊洛的小屋</span><br><span class="line"># 个人主页：https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line"># 博客园：https:&#x2F;&#x2F;www.cnblogs.com&#x2F;yiluotalk&#x2F;</span><br><span class="line">from django.urls import path</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;home&#x2F;&#39;, views.home, name&#x3D;&#39;index&#39;),</span><br><span class="line">    path(&#39;project_list&#x2F;&#39;, views.project_list, name&#x3D;&#39;project list&#39;),</span><br><span class="line">    path(&#39;register&#x2F;&#39;, views.register, name&#x3D;&#39;register&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li>分别输入网址查看结果<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTIxMTgxN2FkZWFkMTIzMjIucG5n?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBiYjk3YmJiMDAzYTljNzIucG5n?x-oss-process=image/format,png" alt=""></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWVjMjUxOWQ4NzAwYzg5YmEucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="3-写一个真正有用的视图"><a href="#3-写一个真正有用的视图" class="headerlink" title="3. 写一个真正有用的视图"></a>3. 写一个真正有用的视图</h5><ul><li>每个视图必须要做的只有两件事：返回一个包含被请求页面内容的 [<code>HttpResponse</code>]对象，或者抛出一个异常，比如 [<code>Http404</code>]</li><li>回到<code>views.py</code></li><li>之前我们在管理后台添加过project的数据<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTI1ZDY1MDRiMDlmYjNiYjcucG5n?x-oss-process=image/format,png" alt=""></li><li>来修改一下主页的代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line">from .models import ProjectInfo</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def home(request):</span><br><span class="line">    project_list &#x3D; ProjectInfo.objects.order_by(&#39;add_data&#39;)[:5]</span><br><span class="line">    output &#x3D; &#39;, &#39;.join([q.project_name for q in project_list])</span><br><span class="line">    return HttpResponse(output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def project_list(request):</span><br><span class="line">    return HttpResponse(&#39;You\&#39;re looking at the list of project list&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register(request):</span><br><span class="line">    return HttpResponse(&#39;You\&#39;re looking at the register page&#39;)</span><br></pre></td></tr></table></figure><ul><li>打开网页查看<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTRjN2QxYjNjNzllN2EzNjgucG5n?x-oss-process=image/format,png" alt=""><br>内容已经成功的展示<h5 id="4-模板"><a href="#4-模板" class="headerlink" title="4.模板"></a>4.模板</h5></li><li>虽然上面实现了暂时页面，但是存在一个比较严重的问题。内容是写在代码里面的，这样不适合管理。下面创建一个视图，就可以将页面的设计从代码中分离出来</li><li>首先来创建一个<code>templates</code> 目录，用来存放静态文件,再创建一个目录 autoapi，然后在其中新建一个文件<code>home.html</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;AutoPlarform Home&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&#123;% if project_list %&#125;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">    &#123;% for project in project_list %&#125;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;&#x2F;autoapi&#x2F;register&#x2F;&quot;&gt;&#123;&#123; project.project_name &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li><li>下面在更新下<code>views.py</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line">from django.template import loader</span><br><span class="line"></span><br><span class="line">from .models import ProjectInfo</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def home(request):</span><br><span class="line">    project_list &#x3D; ProjectInfo.objects.order_by(&#39;add_data&#39;)[:5]</span><br><span class="line">    template &#x3D; loader.get_template(&#39;autoapi&#x2F;home.html&#39;)</span><br><span class="line">    context &#x3D; &#123;</span><br><span class="line">        &#39;project_list&#39;: project_list,</span><br><span class="line">    &#125;</span><br><span class="line">    return HttpResponse(template.render(context, request))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def project_list(request):</span><br><span class="line">    return HttpResponse(&#39;You\&#39;re looking at the list of project list&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register(request):</span><br><span class="line">    return HttpResponse(&#39;You\&#39;re looking at the register page&#39;)</span><br></pre></td></tr></table></figure></li><li>我们来打开主页查看下有没有效果<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTRlM2RmN2JiYTZjN2RlODMucG5n?x-oss-process=image/format,png" alt=""></li><li>信息成功的显示在了主页上<h5 id="5-一个快捷函数：-render"><a href="#5-一个快捷函数：-render" class="headerlink" title="5.一个快捷函数： render()"></a>5.一个快捷函数： render()</h5></li><li>Django 提供了一个快捷函数，我们用它来重写<code>views.py</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line">from django.shortcuts import render</span><br><span class="line"></span><br><span class="line">from .models import ProjectInfo</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def home(request):</span><br><span class="line">    project_list &#x3D; ProjectInfo.objects.order_by(&#39;add_data&#39;)[:5]</span><br><span class="line">    context &#x3D; &#123;&#39;project_list&#39;: project_list&#125;</span><br><span class="line">    return render(request, &#39;autoapi&#x2F;home.html&#39;, context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def project_list(request):</span><br><span class="line">    return HttpResponse(&#39;You\&#39;re looking at the list of project list&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def register(request):</span><br><span class="line">    return HttpResponse(&#39;You\&#39;re looking at the register page&#39;)</span><br></pre></td></tr></table></figure></li><li>再次刷新主页查看一下效果<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWU3NTUxZDZmNzUwZWZhYjkucG5n?x-oss-process=image/format,png" alt=""></li><li>同刚才是一个效果<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Django基础" scheme="https://yiluotalk.com/categories/Django%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Django基础" scheme="https://yiluotalk.com/tags/Django%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
  </entry>
  
  <entry>
    <title>Python9--面向对象编程</title>
    <link href="https://yiluotalk.com/2020/08/27/Python9--%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>https://yiluotalk.com/2020/08/27/Python9--%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</id>
    <published>2020-08-27T06:13:59.000Z</published>
    <updated>2020-08-27T06:14:21.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM2YjAxODdmNzM5M2Q1MmEucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="1-面向对象编程简介"><a href="#1-面向对象编程简介" class="headerlink" title="1. 面向对象编程简介"></a>1. 面向对象编程简介</h5><p><strong>面向对象程序设计</strong>（英语：Object-oriented programming，<a href="https://zh.wikipedia.org/wiki/%E7%BC%A9%E5%86%99" target="_blank" rel="noopener" title="缩写">缩写</a>：OOP）是种具有<a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%B1%A1_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)" target="_blank" rel="noopener" title="对象 (计算机科学)">对象</a>概念的<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%9E%8B" target="_blank" rel="noopener" title="编程范型">程序编程典范</a>，同时也是一种程序开发的抽象方针。它可能包含<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener" title="数据">数据</a>、<a href="https://zh.wikipedia.org/w/index.php?title=%E5%B1%9E%E6%80%A7_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)&action=edit&redlink=1" target="_blank" rel="noopener">属性</a>、<a href="https://zh.wikipedia.org/wiki/%E6%BA%90%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener" title="源代码">代码</a>与<a href="https://zh.wikipedia.org/wiki/%E6%96%B9%E6%B3%95_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8)" target="_blank" rel="noopener" title="方法 (计算机科学)">方法</a>。对象则指的是<a href="https://zh.wikipedia.org/wiki/%E7%B1%BB_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)" target="_blank" rel="noopener" title="类 (计算机科学)">类</a>的实例。它将<a href="https://zh.wikipedia.org/wiki/%E7%89%A9%E4%BB%B6_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8)" target="_blank" rel="noopener" title="对象 (计算机科学)">对象</a>作为<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F" target="_blank" rel="noopener" title="计算机程序">程序</a>的基本单元，将程序和<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener" title="数据">数据</a><a href="https://zh.wikipedia.org/wiki/%E5%B0%81%E8%A3%9D_(%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88)" target="_blank" rel="noopener" title="封装 (面向对象编程)">封装</a>其中，以提高软件的重用性、灵活性和扩展性，对象里的程序可以访问及经常修改对象相关连的数据。在面向对象程序编程里，计算机程序会被设计成彼此相关的对象（引自维基百科）</p><h5 id="2-面向对象4个核心概念"><a href="#2-面向对象4个核心概念" class="headerlink" title="2.面向对象4个核心概念"></a>2.面向对象4个核心概念</h5><ul><li><p>抽象</p></li><li><p>封装 </p></li><li><p>继承 </p></li><li><p>多态<br>######3.类的定义</p></li><li><p>类和对象<br><code>面向对象</code>的两个基本概念<code>类</code>和<code>实例</code>，而<code>实例</code>是根据类创建出来的一个个具体的<code>“对象”</code>,一个类中既会定义<code>属性</code>，也会定义<code>方法</code></p></li><li><p>类的命名规则遵循<code>大驼峰命名法</code>：每个单词的第一个字母都大写，私有类使用<code>下划线</code>开头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class ClassName:</span><br><span class="line">    &lt;statement-1&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure></li><li><p>下面定义一个<code>People</code>的类，并且实例化为<code>student</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class People():</span><br><span class="line">...     pass</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; student &#x3D; People()</span><br><span class="line">&gt;&gt;&gt; print(student)</span><br><span class="line">&lt;__main__.People object at 0x10e1796d0&gt;</span><br><span class="line">&gt;&gt;&gt; People()</span><br><span class="line">&lt;__main__.People object at 0x10e179750&gt;</span><br><span class="line">&gt;&gt;&gt; People</span><br><span class="line">&lt;class &#39;__main__.People&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; student.name &#x3D; &#39;yiluo&#39;</span><br><span class="line">&gt;&gt;&gt; student.name</span><br><span class="line">&#39;yiluo&#39;</span><br></pre></td></tr></table></figure></li><li><p><code>0x10e1796d0</code>为内存地址</p></li><li><p>实例方法<br>在 <code>Python</code> 中只要新建一个类就会自动创建它的<code>内置类方法</code>或<code>属性</code>，可以通过 <code>dir(类名)</code>查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class People():</span><br><span class="line">...     pass</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; dir(People)</span><br><span class="line">[&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;]</span><br></pre></td></tr></table></figure></li><li><p>其中最常用的是 <code>__init__</code> 方法，它可以对实例进行<code>初始化设置</code>（类的<code>内置方法</code>前后各有两个下划线 <code>_</code>，简称：“<code>双下划线</code>”）</p></li><li><p>下面重新写一个类并初始化名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code touch people.py</span><br><span class="line">(yiluo) ➜  Code vim people.py</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"></span><br><span class="line">class People():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name &#x3D; &#39;yiluo&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student &#x3D; People()</span><br><span class="line">print(student.name)</span><br></pre></td></tr></table></figure></li><li><p>执行文件打印出了名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python people.py</span><br><span class="line">yiluo</span><br></pre></td></tr></table></figure></li><li><p>类中的函数通常称作方法，<code>self</code>所指的是就是实例本身，下面修改下类中的属性，也就是年龄</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 作者：伊洛Yiluo 公众号：伊洛的小屋</span><br><span class="line"># 个人主页：https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line"># 博客园：https:&#x2F;&#x2F;www.cnblogs.com&#x2F;yiluotalk&#x2F;</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"></span><br><span class="line">class People():</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; &#39;20&#39;</span><br><span class="line"></span><br><span class="line">student &#x3D; People(&#39;yiluo&#39;)</span><br><span class="line">print(student.name)</span><br><span class="line">student.age &#x3D; &#39;18&#39;</span><br><span class="line">print(student.age)</span><br></pre></td></tr></table></figure></li><li><p>年龄被修改为了18岁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python people.py</span><br><span class="line">yiluo</span><br><span class="line">18</span><br></pre></td></tr></table></figure></li><li><p><code>__repr__</code> 来格式化实例的打印格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"></span><br><span class="line">class People():</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &#39;Student: &#123;&#125;&#39;.format(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student &#x3D; People(&#39;yiluo&#39;, 20)</span><br><span class="line">print(student.name)</span><br><span class="line">print(student.age)</span><br><span class="line">print(student)</span><br></pre></td></tr></table></figure></li><li><p>格式化打印输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python people.py</span><br><span class="line">yiluo</span><br><span class="line">20</span><br><span class="line">Student:yiluo</span><br></pre></td></tr></table></figure><hr>![](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTIyNzhlZmYzMzU4ZGI5NTQuanBlZw?x-oss-process=image/format,png)</li></ul><h5 id="4-类的封装"><a href="#4-类的封装" class="headerlink" title="4.类的封装"></a>4.类的封装</h5><p>在<code>面向对象</code>的语言中，<code>封装</code>就是用类将<code>数据</code>和<code>基于数据</code>的操作封装在一起，隐藏<code>内部数据</code>，对外提供公共的访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"></span><br><span class="line">class People():</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self._name &#x3D; name</span><br><span class="line">        self._age &#x3D; age</span><br><span class="line"></span><br><span class="line">    def get_name(self):</span><br><span class="line">        return self._name</span><br><span class="line"></span><br><span class="line">    def get_age(self):</span><br><span class="line">        return self._age</span><br><span class="line"></span><br><span class="line">    def set_name(self, name):</span><br><span class="line">        self._name &#x3D; name</span><br><span class="line"></span><br><span class="line">    def set_age(self, age):</span><br><span class="line">        self._age &#x3D; age</span><br><span class="line"></span><br><span class="line">    def score(self, score):</span><br><span class="line">        print(&#39;姓名：&#123;&#125;&#39;.format(self.get_name()) + &#39; &#39;+ &#39;年龄：&#123;&#125;&#39;.format(self.get_age())+ &#39; &#39; +  &#39;得分:&#123;&#125;&#39;.format(score) )</span><br><span class="line"></span><br><span class="line"># 创建实例对象student</span><br><span class="line">student &#x3D; People(&#39;yiluo&#39;, &#39;20&#39;)</span><br><span class="line">student.get_name()</span><br><span class="line">student.get_age()</span><br><span class="line">student.score(&#39;98&#39;)</span><br><span class="line"></span><br><span class="line">#重新设置名字和年龄</span><br><span class="line">student.set_name(&#39;luoyi&#39;)</span><br><span class="line">student.set_age(&#39;19&#39;)</span><br><span class="line"></span><br><span class="line">#重新获得名字和年龄</span><br><span class="line">student.get_name()</span><br><span class="line">student.get_age()</span><br><span class="line">student.score(&#39;99&#39;)</span><br></pre></td></tr></table></figure><ul><li>Python 的<code>私有属性</code>用一个或两个下划线开头表示，一个下划线表示外部调用者不应该直接调用这个<code>属性</code>，但其实还是可以调用的； 如果是<code>两个下划线</code>就不能调用</li><li>执行一下，看下结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python people.py</span><br><span class="line">姓名：yiluo 年龄：20 得分:98</span><br><span class="line">姓名：luoyi 年龄：19 得分:99</span><br></pre></td></tr></table></figure><h5 id="5-类的继承与方法重写"><a href="#5-类的继承与方法重写" class="headerlink" title="5.类的继承与方法重写"></a>5.类的继承与方法重写</h5></li><li>继承分为两种：<code>单继承</code>和<code>多继承</code>。<code>单继承</code>是指子类只继承于一个父类，相应的<code>多继承</code>是指子类继承于多个父类</li><li><code>单继承</code>与<code>方法重写</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"></span><br><span class="line">class People(object):</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self._name &#x3D; name</span><br><span class="line">        self._age &#x3D; age</span><br><span class="line"></span><br><span class="line">    def get_name(self):</span><br><span class="line">        return self._name</span><br><span class="line"></span><br><span class="line">    def get_age(self):</span><br><span class="line">        return self._age</span><br><span class="line"></span><br><span class="line">    def set_name(self, name):</span><br><span class="line">        self._name &#x3D; name</span><br><span class="line"></span><br><span class="line">    def set_age(self, age):</span><br><span class="line">        self._age &#x3D; age</span><br><span class="line"></span><br><span class="line">    def title(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Student(People):</span><br><span class="line">    def title(self):</span><br><span class="line">        print(&#39;姓名&#123;&#125;&#39;.format(self.get_name()) + &#39; &#39; + &#39;年龄&#123;&#125;&#39;.format(self.get_age()) + &#39; &#39; + &#39;职业：学生&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Teacher(People):</span><br><span class="line">    def title(self):</span><br><span class="line">        print(&#39;姓名&#123;&#125;&#39;.format(self.get_name()) + &#39; &#39; + &#39;年龄&#123;&#125;&#39;.format(self.get_age()) + &#39; &#39; + &#39;职业：教师&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student &#x3D; Student(&#39;yiluo&#39;, &#39;20&#39;)</span><br><span class="line">teacher &#x3D; Teacher(&#39;luoyi&#39;, &#39;19&#39;)</span><br><span class="line">student.title()</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python people.py</span><br><span class="line">姓名yiluo 年龄20 职业：学生</span><br><span class="line">姓名luoyi 年龄19 职业：教师</span><br></pre></td></tr></table></figure><ul><li>所谓重写父类的方法就是指：在子类中定义和父类同名的方法，那么子类中的该方法就会覆盖掉父类中对应的方法<h5 id="6-类的多继承"><a href="#6-类的多继承" class="headerlink" title="6.类的多继承"></a>6.类的多继承</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 作者：伊洛Yiluo 公众号：伊洛的小屋</span><br><span class="line"># 个人主页：https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line"># 博客园：https:&#x2F;&#x2F;www.cnblogs.com&#x2F;yiluotalk&#x2F;</span><br><span class="line">class Name():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name &#x3D; &#39;yiluo&#39;</span><br><span class="line">    def demo1(self):</span><br><span class="line">        print(&#39;打印名字&#39;)</span><br><span class="line"></span><br><span class="line">class Age():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.age &#x3D; 20</span><br><span class="line">    def demo2(self):</span><br><span class="line">        print(&#39;打印年龄&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Somebody(Name, Age):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        Name.__init__(self)</span><br><span class="line">        Age.__init__(self)</span><br><span class="line">    def demo3(self):</span><br><span class="line">        print(&#39;打印某人&#39;)</span><br><span class="line"></span><br><span class="line">somebody &#x3D; Somebody()</span><br><span class="line">print(somebody.name)</span><br><span class="line">print(somebody.age)</span><br><span class="line">somebody.demo1()</span><br><span class="line">somebody.demo2()</span><br><span class="line">somebody.demo3()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yiluo) ➜  Code python demo.py</span><br><span class="line">yiluo</span><br><span class="line">20</span><br><span class="line">打印名字</span><br><span class="line">打印年龄</span><br><span class="line">打印某人</span><br></pre></td></tr></table></figure><h5 id="7-多态"><a href="#7-多态" class="headerlink" title="7.多态"></a>7.多态</h5>多态就是使用同一方法对不同对象可以产生不同的结果<h5 id="8-私有属性和方法"><a href="#8-私有属性和方法" class="headerlink" title="8.私有属性和方法"></a>8.私有属性和方法</h5></li><li><code>Python</code> 在属性方法名前添加 <code>__</code>（<code>两个下划线 __</code>）来拒绝外部的访问</li><li>两个下划线是设置私有<code>属性/方法</code>的标准样式， 还有一种设置<code>私有属性/方法</code>的样式，就是在<code>属性/方法</code>名字前加一个下划线<code>_</code> 但是其实这样的<code>私有属性/方法</code>只仅仅是视为不能直接访问，但是实际上还是可以访问的<h5 id="9-类属性，类方法"><a href="#9-类属性，类方法" class="headerlink" title="9.类属性，类方法"></a>9.类属性，类方法</h5><code>类属性</code>和<code>类方法</code>是可以直接使用类访问，不需要<code>实例化</code></li><li>类属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class Hero(object):</span><br><span class="line">...     skill &#x3D; &#39;fire&#39;</span><br><span class="line">...     def __init__(self, name):</span><br><span class="line">...         self._name &#x3D; name</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; Hero.skill</span><br><span class="line">&#39;fire&#39;</span><br><span class="line">&gt;&gt;&gt; xiangyu&#x3D; Hero(&#39;项羽&#39;)</span><br><span class="line">&gt;&gt;&gt; xiangyu.skill</span><br><span class="line">&#39;fire&#39;</span><br></pre></td></tr></table></figure><blockquote><p>1.创建一个英雄类</p></blockquote></li></ul><p>2.英雄的技能是火焰<br>3.初始化英雄的名字<br>4.实例一个英雄<br>5.调用英雄的技能属性</p><ul><li>类方法<br>类方法用装饰器 <code>@classmethod</code>装饰，类方法中可以访问类属性<br>类方法的第一个参数传入的是类对象，而不是<code>实例对象</code>，约定俗成的，<code>类方法</code>中要指代类对象本身都使用 <code>cls</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class Hero(object):</span><br><span class="line">...     skill &#x3D; &#39;fire&#39;</span><br><span class="line">...     def __init__(self, name):</span><br><span class="line">...         self._name &#x3D; name</span><br><span class="line">...     @classmethod</span><br><span class="line">...     def get_skill(cls):</span><br><span class="line">...         return cls.skill</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; Hero.get_skill()</span><br><span class="line">&#39;fire&#39;</span><br><span class="line">&gt;&gt;&gt; liubei &#x3D; Hero(&#39;刘备&#39;)</span><br><span class="line">&gt;&gt;&gt; liubei._name</span><br><span class="line">&#39;刘备&#39;</span><br><span class="line">&gt;&gt;&gt; liubei.get_skill()</span><br><span class="line">&#39;fire&#39;</span><br></pre></td></tr></table></figure><blockquote><p>1.不需要实例化就可以调用</p></blockquote></li><li>静态方法<br>静态方法用装饰器 <code>@staticmethod</code> 装饰，和 <code>@classmethod</code> 有点类似。静态方法在运行时不需要实例的参与，并且也不需要传递<code>cls</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"></span><br><span class="line">class Hero(object):</span><br><span class="line">     skill &#x3D; &#39;fire&#39;</span><br><span class="line">     def __init__(self, name):</span><br><span class="line">         self._name &#x3D; name</span><br><span class="line">     @staticmethod</span><br><span class="line">     def release_skills():</span><br><span class="line">         print(guanyu._name + &#39; &#39; +&#39;释放技能&#39; + &#39;: &#39;+ Hero.skill)</span><br><span class="line"></span><br><span class="line">guanyu &#x3D; Hero(&#39;关羽&#39;)</span><br><span class="line">Hero.release_skills()</span><br></pre></td></tr></table></figure><blockquote><p>1.静态方法 ，英雄释放技能</p></blockquote></li></ul><p>2.不需要实例化直接释放火焰技能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python test.py</span><br><span class="line">关羽 释放技能: fire</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTU4MDIzNmRhZDg4NDBiZmQuanBlZw?x-oss-process=image/format,png" alt=""></p><h5 id="10-property-装饰器"><a href="#10-property-装饰器" class="headerlink" title="10.property 装饰器"></a>10.property 装饰器</h5><p><code>@property</code> 装饰器可以将一个<code>方法</code>变成一个<code>属性</code>来使用，通过 <code>@property</code> 装饰器可以获得和修改对象的某一个<code>属性</code></p><blockquote><p>@property 表示只读<br>    @property 和 @<em>.setter 表示可读可写<br>    @property、@</em>.setter、和 @<em>.deleter 表示可读可写可删除<br>    @property 必须定义在 @</em>.setter 的前面<br>    类必须继承 object 父类，否则 @property 不会生效</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line"></span><br><span class="line">class Hero(object):</span><br><span class="line">     skill &#x3D; &#39;fire&#39;</span><br><span class="line">     def __init__(self, name):</span><br><span class="line">         self._name &#x3D; name</span><br><span class="line">     @property</span><br><span class="line">     def name(self):</span><br><span class="line">         return self._name</span><br><span class="line">     @name.setter</span><br><span class="line">     def name(self, value):</span><br><span class="line">         if isinstance(value, str):</span><br><span class="line">             self._name &#x3D; value</span><br><span class="line">         else:</span><br><span class="line">             raise ValueError</span><br><span class="line">     @name.deleter</span><br><span class="line">     def name(self):</span><br><span class="line">         print(&#39;del name&#39;)</span><br><span class="line">         del self._name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">liubei &#x3D; Hero(&#39;刘备&#39;)</span><br><span class="line">print(liubei.name)</span><br><span class="line">liubei.name &#x3D; &#39;关羽&#39;</span><br><span class="line">print(liubei.name)</span><br><span class="line">liubei.name &#x3D; 100</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python test.py</span><br><span class="line">刘备</span><br><span class="line">关羽</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;test.py&quot;, line 26, in &lt;module&gt;</span><br><span class="line">    liubei.name &#x3D; 100</span><br><span class="line">  File &quot;test.py&quot;, line 15, in name</span><br><span class="line">    raise ValueError</span><br><span class="line">ValueError</span><br></pre></td></tr></table></figure><blockquote><p>1.这样的好处是可以在方法中对用户传入的数据进行校验（校验了英雄名称是字符串）</p></blockquote><ul><li>删除英雄<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">liubei &#x3D; Hero(&#39;刘备&#39;)</span><br><span class="line">print(liubei.name)</span><br><span class="line">liubei.name &#x3D; &#39;关羽&#39;</span><br><span class="line">print(liubei.name)</span><br><span class="line">del liubei.name</span><br><span class="line">print(liubei.name)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python test.py</span><br><span class="line">刘备</span><br><span class="line">关羽</span><br><span class="line">删除名字</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;test.py&quot;, line 27, in &lt;module&gt;</span><br><span class="line">    print(liubei.name)</span><br><span class="line">  File &quot;test.py&quot;, line 9, in name</span><br><span class="line">    return self._name</span><br><span class="line">AttributeError: &#39;Hero&#39; object has no attribute &#39;_name&#39;</span><br></pre></td></tr></table></figure>1.英雄已经被成功删除</li></ul><blockquote><p>如果你觉得文章对你有些帮助，欢迎微信搜索「伊洛的小屋」第一时间阅读</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Django基础4--Shell及管理页面</title>
    <link href="https://yiluotalk.com/2020/08/26/Django%E5%9F%BA%E7%A1%804--Shell%E5%8F%8A%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2/"/>
    <id>https://yiluotalk.com/2020/08/26/Django%E5%9F%BA%E7%A1%804--Shell%E5%8F%8A%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2/</id>
    <published>2020-08-26T06:17:59.000Z</published>
    <updated>2020-08-26T06:18:37.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM2YjAxODdmNzM5M2Q1MmEucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="1-Django-Shell"><a href="#1-Django-Shell" class="headerlink" title="1.Django Shell"></a>1.Django Shell</h5><ul><li>打开Django的命令交互模式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(django) ➜  AutoPlatform python manage.py shell</span><br><span class="line">Python <span class="number">3.7</span><span class="number">.5</span> (default, Nov <span class="number">29</span> <span class="number">2019</span>, <span class="number">14</span>:<span class="number">32</span>:<span class="number">46</span>) </span><br><span class="line">[Clang <span class="number">9.0</span><span class="number">.0</span> (clang<span class="number">-900.0</span><span class="number">.39</span><span class="number">.2</span>)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">(InteractiveConsole)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><ul><li>还记得之前模型嘛</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 作者：伊洛Yiluo 公众号：伊洛的小屋</span></span><br><span class="line"><span class="comment"># 个人主页：https://yiluotalk.com/</span></span><br><span class="line"><span class="comment"># 博客园：https://www.cnblogs.com/yiluotalk/</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProjectInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">""" 项目信息模型 """</span></span><br><span class="line">    project_name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    dev = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    tester = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    add_data = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 返回项目名称</span></span><br><span class="line">        <span class="keyword">return</span> self.project_name</span><br></pre></td></tr></table></figure><ul><li>尝试用Shell操作一下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> autoapi.models <span class="keyword">import</span> ProjectInfo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ProjectInfo.objects.all()</span><br><span class="line">&lt;QuerySet []&gt;</span><br></pre></td></tr></table></figure><h5 id="2-Django管理页面"><a href="#2-Django管理页面" class="headerlink" title="2.Django管理页面"></a>2.Django管理页面</h5><p>Django提供的管理网站（admin site）让你能够轻松地处理模型。网站的管理员可使用管理网站，但普通用户不能使用</p><ul><li>首先需要创建一个超级管理的账户</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(django) ➜  AutoPlatform python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>这里的username设置为admin， 密码也设置为admin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bypass password validation and create user anyway? [y/N]: y</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure><h5 id="3-查看Django管理页面"><a href="#3-查看Django管理页面" class="headerlink" title="3.查看Django管理页面"></a>3.查看Django管理页面</h5><ul><li>启动服务</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(django) ➜  AutoPlatform python manage.py runserver </span><br><span class="line">Watching <span class="keyword">for</span> file changes <span class="keyword">with</span> StatReloader</span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (<span class="number">0</span> silenced).</span><br><span class="line">August <span class="number">25</span>, <span class="number">2020</span> - <span class="number">15</span>:<span class="number">12</span>:<span class="number">38</span></span><br><span class="line">Django version <span class="number">3.1</span>, using settings <span class="string">'AutoPlatform.settings'</span></span><br><span class="line">Starting development server at http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/</span><br><span class="line">Quit the server <span class="keyword">with</span> CONTROL-C.</span><br></pre></td></tr></table></figure><ul><li>打开浏览器，然后输入网址： ‘<a href="https://127.0.0.1/admin/’,会出现如下的页面" target="_blank" rel="noopener">https://127.0.0.1/admin/’,会出现如下的页面</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTJmOTY5YzQxYmJkMTRkMjAucG5n?x-oss-process=image/format,png" alt=""></li></ul><h5 id="4-进入到管理站点页面"><a href="#4-进入到管理站点页面" class="headerlink" title="4. 进入到管理站点页面"></a>4. 进入到管理站点页面</h5><ul><li>输入用户名和密码，进入到管理后台<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWY3MzVkMGQ0MGJhODUxYTEucG5n?x-oss-process=image/format,png" alt=""></li></ul><h5 id="5-管理后台页面加入应用"><a href="#5-管理后台页面加入应用" class="headerlink" title="5.管理后台页面加入应用"></a>5.管理后台页面加入应用</h5><p>我们创建的模型，必须手工进行注册</p><ul><li>打开admin.py文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> ProjectInfo</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line">admin.site.register(ProjectInfo)</span><br></pre></td></tr></table></figure><ul><li><p>再打开管理后台页面可见<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTRmNDA3ZGQ3ODllN2M1OTMucG5n?x-oss-process=image/format,png" alt=""></p></li><li><p>来尝试着添加一条项目数据</p></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTc2MzVmNDI0NzIyNDgzNzkucG5n?x-oss-process=image/format,png" alt=""></p><ul><li>点击保存</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTE1YmFkMmM0NDUyMDlkZjUucG5n?x-oss-process=image/format,png" alt=""></p><ul><li>再进入到Django shell中查看</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(django) ➜  AutoPlatform python manage.py shell</span><br><span class="line">Python <span class="number">3.7</span><span class="number">.5</span> (default, Nov <span class="number">29</span> <span class="number">2019</span>, <span class="number">14</span>:<span class="number">32</span>:<span class="number">46</span>) </span><br><span class="line">[Clang <span class="number">9.0</span><span class="number">.0</span> (clang<span class="number">-900.0</span><span class="number">.39</span><span class="number">.2</span>)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">(InteractiveConsole)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> autoapi.models <span class="keyword">import</span> ProjectInfo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ProjectInfo.objects.all()</span><br><span class="line">&lt;QuerySet [&lt;ProjectInfo: 接口自动化&gt;]&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>本文首发公众号： 伊洛的小屋，欢迎关注并查看更多内容！！！</p></blockquote><p>和上面最开始相比，已经有了数据</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Django基础" scheme="https://yiluotalk.com/categories/Django%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Django基础" scheme="https://yiluotalk.com/tags/Django%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
  </entry>
  
  <entry>
    <title>Django基础3--数据库配置及创建模型</title>
    <link href="https://yiluotalk.com/2020/08/26/Django%E5%9F%BA%E7%A1%803--%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%9E%8B/"/>
    <id>https://yiluotalk.com/2020/08/26/Django%E5%9F%BA%E7%A1%803--%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-08-26T06:16:59.000Z</published>
    <updated>2020-08-26T06:17:45.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM2YjAxODdmNzM5M2Q1MmEucG5n?x-oss-process=image/format,png" alt=""></p><blockquote><p>本文首发公众号： 伊洛的小屋，欢迎关注并查看更多内容！！！</p></blockquote><h5 id="1-数据库配置"><a href="#1-数据库配置" class="headerlink" title="1.数据库配置"></a>1.数据库配置</h5><ul><li>打开 settings.py 。这是个包含了 Django 项目设置的 Python 模块，配置文件使用 SQLite 作为默认数据库，后面实际开发项目中也可以换成其他的数据库（MySQL，MongoDB….）</li><li><a href="https://docs.djangoproject.com/zh-hans/3.1/ref/settings/#std:setting-DATABASE-ENGINE" target="_blank" rel="noopener"><code>ENGINE</code></a> – 可选值有 <code>&#39;django.db.backends.sqlite3&#39;</code>，<code>&#39;django.db.backends.postgresql&#39;</code>，<code>&#39;django.db.backends.mysql&#39;</code>，或 <code>&#39;django.db.backends.oracle&#39;</code><h5 id="2-注册APP"><a href="#2-注册APP" class="headerlink" title="2.注册APP"></a>2.注册APP</h5></li><li>settings.py 下INSTALLED_APPS都是注册的应用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Application definition</span><br><span class="line"></span><br><span class="line">INSTALLED_APPS &#x3D; [</span><br><span class="line">    &#39;django.contrib.admin&#39;,</span><br><span class="line">    &#39;django.contrib.auth&#39;,</span><br><span class="line">    &#39;django.contrib.contenttypes&#39;,</span><br><span class="line">    &#39;django.contrib.sessions&#39;,</span><br><span class="line">    &#39;django.contrib.messages&#39;,</span><br><span class="line">    &#39;django.contrib.staticfiles&#39;,</span><br></pre></td></tr></table></figure>‘django.contrib.admin’, 管理员站点<br>‘django.contrib.auth’, 认证系统<br>‘django.contrib.contenttypes’, 内容类型框架<br>‘django.contrib.sessions’, 会话框架<br>‘django.contrib.messages’, 消息框架<br>‘django.contrib.staticfiles’, 管理静态文件框架<h5 id="3-数据库迁移"><a href="#3-数据库迁移" class="headerlink" title="3.数据库迁移"></a>3.数据库迁移</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo 公众号：伊洛的小屋</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></li><li><code>migrate</code>命令只会为在 <code>INSTALLED_APPS</code> 里声明了的应用进行数据库迁移<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(django) ➜  AutoPlatform python manage.py migrate </span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, contenttypes, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying contenttypes.0001_initial... OK</span><br><span class="line">  Applying auth.0001_initial... OK</span><br><span class="line">  Applying admin.0001_initial... OK</span><br><span class="line">  Applying admin.0002_logentry_remove_auto_add... OK</span><br><span class="line">  Applying admin.0003_logentry_add_action_flag_choices... OK</span><br><span class="line">  Applying contenttypes.0002_remove_content_type_name... OK</span><br><span class="line">  Applying auth.0002_alter_permission_name_max_length... OK</span><br><span class="line">  Applying auth.0003_alter_user_email_max_length... OK</span><br><span class="line">  Applying auth.0004_alter_user_username_opts... OK</span><br><span class="line">  Applying auth.0005_alter_user_last_login_null... OK</span><br><span class="line">  Applying auth.0006_require_contenttypes_0002... OK</span><br><span class="line">  Applying auth.0007_alter_validators_add_error_messages... OK</span><br><span class="line">  Applying auth.0008_alter_user_username_max_length... OK</span><br><span class="line">  Applying auth.0009_alter_user_last_name_max_length... OK</span><br><span class="line">  Applying auth.0010_alter_group_name_max_length... OK</span><br><span class="line">  Applying auth.0011_update_proxy_permissions... OK</span><br><span class="line">  Applying auth.0012_alter_user_first_name_max_length... OK</span><br><span class="line">  Applying sessions.0001_initial... OK</span><br></pre></td></tr></table></figure></li><li>如上迁移完成</li><li>数据库里已经生成对应的表<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWYyZWZlNmRjM2VjZmZkN2UucG5n?x-oss-process=image/format,png" alt=""><h5 id="4-创建模型"><a href="#4-创建模型" class="headerlink" title="4.创建模型"></a>4.创建模型</h5></li><li>定义模型 - 也就是数据库结构设计和附加的其它元数据</li><li>设计自己的模型，首先看看需要哪些数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 作者：伊洛Yiluo 公众号：伊洛的小屋</span><br><span class="line"># 个人主页：https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line"># 博客园：https:&#x2F;&#x2F;www.cnblogs.com&#x2F;yiluotalk&#x2F;</span><br><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ProjectInfo(models.Model):</span><br><span class="line">    &quot;&quot;&quot; 项目信息模型 &quot;&quot;&quot;</span><br><span class="line">    project_name &#x3D; models.CharField(max_length&#x3D;30)</span><br><span class="line">    dev &#x3D; models.CharField(max_length&#x3D;20)</span><br><span class="line">    tester &#x3D; models.CharField(max_length&#x3D;20)</span><br><span class="line">    add_data &#x3D; models.DateTimeField(auto_now_add&#x3D;True)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        # 返回项目名称</span><br><span class="line">        return self.project_name</span><br></pre></td></tr></table></figure></li><li>创建一个项目信息的类继承<code>model</code>，其中属性分别为项目名称，开发人员，测试人员，添加日期</li><li>DateTimeField记录日期和时间的数据，<code>auto_now_add=True</code>指的是每当用户创建新主题时，这都让Django将这个属性自动设置成当前日期和时间</li><li>Django调用方法<code>__str__()</code>来显示模型的简单表示<h5 id="5-激活模型"><a href="#5-激活模型" class="headerlink" title="5.激活模型"></a>5.激活模型</h5></li><li>要使用模型，必须让Django将应用程序包含到项目中，来打开settings.py，找到下面这段代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; [</span><br><span class="line">    &#39;django.contrib.admin&#39;,</span><br><span class="line">    &#39;django.contrib.auth&#39;,</span><br><span class="line">    &#39;django.contrib.contenttypes&#39;,</span><br><span class="line">    &#39;django.contrib.sessions&#39;,</span><br><span class="line">    &#39;django.contrib.messages&#39;,</span><br><span class="line">    &#39;django.contrib.staticfiles&#39;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li>将自己的应用添加到<code>INSTALLED_APPS</code>中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; [</span><br><span class="line">    &#39;django.contrib.admin&#39;,</span><br><span class="line">    &#39;django.contrib.auth&#39;,</span><br><span class="line">    &#39;django.contrib.contenttypes&#39;,</span><br><span class="line">    &#39;django.contrib.sessions&#39;,</span><br><span class="line">    &#39;django.contrib.messages&#39;,</span><br><span class="line">    &#39;django.contrib.staticfiles&#39;,</span><br><span class="line">    # My app</span><br><span class="line">    &#39;autoapi&#39;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li>让Django修改数据库，使其能够存储模型<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(django) ➜  AutoPlatformpython manage.py makemigrations autoapi</span><br><span class="line">Migrations for &#39;autoapi&#39;:</span><br><span class="line">  autoapi&#x2F;migrations&#x2F;0001_initial.py</span><br><span class="line">    - Create model ProjectInfo</span><br></pre></td></tr></table></figure></li><li>命令makemigrations让Django确定该如何修改数据库，使其能够存储与我们定义的新模型相关联的数据。输出表明Django创建了一个名为0001_initial.py的迁移文件</li><li>再次migrate一下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(django) ➜  AutoPlatform python manage.py migrate </span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, autoapi, contenttypes, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying autoapi.0001_initial... OK</span><br></pre></td></tr></table></figure></li><li>迁移OK <h5 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h5>模型需要这三步</li></ul><ul><li>编辑 <code>models.py</code> 文件，改变模型。</li><li>运行 [<code>python manage.py makemigrations</code>] 为模型的改变生成迁移文件。</li><li>运行 [<code>python manage.py migrate</code>] 来应用数据库迁移。</li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Django基础" scheme="https://yiluotalk.com/categories/Django%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Django基础" scheme="https://yiluotalk.com/tags/Django%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
  </entry>
  
  <entry>
    <title>Django基础2--创建应用</title>
    <link href="https://yiluotalk.com/2020/08/25/Django%E5%9F%BA%E7%A1%802--%E5%88%9B%E5%BB%BA%E5%BA%94%E7%94%A8/"/>
    <id>https://yiluotalk.com/2020/08/25/Django%E5%9F%BA%E7%A1%802--%E5%88%9B%E5%BB%BA%E5%BA%94%E7%94%A8/</id>
    <published>2020-08-25T05:35:59.000Z</published>
    <updated>2020-08-25T05:35:44.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM2YjAxODdmNzM5M2Q1MmEucG5n?x-oss-process=image/format,png" alt=""></p><blockquote><p>本文首发自伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote><h5 id="1-创建应用"><a href="#1-创建应用" class="headerlink" title="1.创建应用"></a>1.创建应用</h5><ul><li>“项目”  已经配置好了，现在来创建一个应用</li><li>在 Django 中，每一个应用都是一个 Python 包，并且遵循着相同的约定。Django 自带一个工具，可以帮你生成应用的基础目录结构，这样你就能专心写代码，而不是创建目录了</li><li>Django项目由一系列应用程序组成，它们协同工作，让项目成为一个整体。我们暂时只创建一个应用程序<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(django) ➜  AutoPlatform python manage.py startapp autoapi</span><br></pre></td></tr></table></figure></li><li>命令startapp appname让Django建立创建应用程序所需的基础设施</li><li>这将会创建一个 autoapi 目录，它的目录结构大致如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(django) ➜  autoapi tree</span><br><span class="line">.</span><br><span class="line">├── __init__.py</span><br><span class="line">├── admin.py</span><br><span class="line">├── apps.py</span><br><span class="line">├── migrations</span><br><span class="line">│   └── __init__.py</span><br><span class="line">├── models.py</span><br><span class="line">├── tests.py</span><br><span class="line">└── views.py</span><br><span class="line"></span><br><span class="line">1 directory, 7 files</span><br></pre></td></tr></table></figure><h5 id="2-编写一个视图"><a href="#2-编写一个视图" class="headerlink" title="2.编写一个视图"></a>2.编写一个视图</h5></li><li>打开 views.py<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    return HttpResponse(&quot;Hello, Welcome to Auto Api Platform !!!&quot;)</span><br></pre></td></tr></table></figure></li><li>需要将一个 URL 映射到它——需要 URLconf ， 在 autoapi 目录里新建一个 urls.py 文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(django) ➜  autoapi tree</span><br><span class="line">.</span><br><span class="line">├── __init__.py</span><br><span class="line">├── admin.py</span><br><span class="line">├── apps.py</span><br><span class="line">├── migrations</span><br><span class="line">│   └── __init__.py</span><br><span class="line">├── models.py</span><br><span class="line">├── tests.py</span><br><span class="line">├── urls.py</span><br><span class="line">└── views.py</span><br><span class="line"></span><br><span class="line">1 directory, 8 files</span><br></pre></td></tr></table></figure></li><li>在 urls.py 中，输入代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;&#39;, views.index, name&#x3D;&#39;index&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>下一步是要在根 URLconf 文件中指定我们创建的 autoapi.urls 模块。在 AutoPlatform/urls.py 文件的 urlpatterns 列表里插入一个 include()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import include, path</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;autoapi&#x2F;&#39;, include(&#39;autoapi.urls&#39;)),</span><br><span class="line">    path(&#39;admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="3-查看结果"><a href="#3-查看结果" class="headerlink" title="3.查看结果"></a>3.查看结果</h5>现在把 index 视图添加进了 URLconf。通过以下命令验证是否正常工作：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure></li><li>浏览器访问 <a href="http://127.0.0.1:8000/autoapi/" target="_blank" rel="noopener">http://127.0.0.1:8000/autoapi/</a></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTczN2U1ZGNlNWU1NjkzMmIucG5n?x-oss-process=image/format,png" alt=""></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Django基础" scheme="https://yiluotalk.com/categories/Django%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Django基础" scheme="https://yiluotalk.com/tags/Django%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
  </entry>
  
  <entry>
    <title>Django基础1--安装及启动</title>
    <link href="https://yiluotalk.com/2020/08/25/Django%E5%9F%BA%E7%A1%801--%E5%AE%89%E8%A3%85%E5%8F%8A%E5%90%AF%E5%8A%A8/"/>
    <id>https://yiluotalk.com/2020/08/25/Django%E5%9F%BA%E7%A1%801--%E5%AE%89%E8%A3%85%E5%8F%8A%E5%90%AF%E5%8A%A8/</id>
    <published>2020-08-25T05:34:59.000Z</published>
    <updated>2020-08-25T05:34:37.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM2YjAxODdmNzM5M2Q1MmEucG5n?x-oss-process=image/format,png" alt=""></p><blockquote><p>本文首发自伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote><h5 id="1-Web框架"><a href="#1-Web框架" class="headerlink" title="1.Web框架"></a>1.Web框架</h5><ul><li><p>提到Python就一定会听过Python出名的web框架–Django和Flask，Django是比较重量级的框架，Flask就会轻量些</p></li><li><p>Django 是一套用于帮助开发交互式网站的工具。Django能够响应网页请求，还能让你更轻松地读写数据库、管理用户</p></li><li><p>Django 最初被设计用于具有快速开发需求的新闻类站点，目的是要实现简单快捷的网站开发。以下内容简要介绍了如何使用 Django 实现一个数据库驱动的 Web 应用</p><h5 id="2-开始Django"><a href="#2-开始Django" class="headerlink" title="2.开始Django"></a>2.开始Django</h5></li><li><p>首先先安装个Django项目的虚拟环境,虚拟环境是系统的一个位置，你可以在其中安装包，并将其与其他Python包隔离</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Learn: python3 -m venv django</span><br></pre></td></tr></table></figure></li><li><p>激活虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  Learn source django&#x2F;bin&#x2F;activate</span><br><span class="line">(django) ➜  Learn</span><br></pre></td></tr></table></figure><h5 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h5></li><li><p>首先当然是有装好Python的前提了</p></li><li><p>数据库的话Django包含了一个名为 <a href="https://sqlite.org/" target="_blank" rel="noopener">SQLite</a> 的轻量级数据库<br>后期开发的时候也可以换成<code>MySQL</code>，<code>MongoDB</code>等适合项目开发的数据库</p></li><li><p>安装Django</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install django</span><br></pre></td></tr></table></figure></li><li><p>查看版本号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(django) ➜  Learn python3</span><br><span class="line">Python 3.7.5 (default, Nov 29 2019, 14:32:46)</span><br><span class="line">[Clang 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; import django</span><br><span class="line">&gt;&gt;&gt; print(django.get_version())</span><br><span class="line">3.1</span><br></pre></td></tr></table></figure><h5 id="4-创建Django项目"><a href="#4-创建Django项目" class="headerlink" title="4.创建Django项目"></a>4.创建Django项目</h5></li><li><p>打开命令行，cd 到一个想放置代码的目录，然后运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(django) ➜  PycharmProjects django-admin startproject AutoPlatform</span><br></pre></td></tr></table></figure></li><li><p>来查看一下目录的结构<br>如果你是Mac 电脑，可以先安装一下tree</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">brew install tree</span><br><span class="line">➜  ~ tree --help</span><br><span class="line">usage: tree [-acdfghilnpqrstuvxACDFJQNSUX] [-H baseHREF] [-T title ]</span><br><span class="line">[-L level [-R]] [-P pattern] [-I pattern] [-o filename] [--version]</span><br><span class="line">[--help] [--inodes] [--device] [--noreport] [--nolinks] [--dirsfirst]</span><br><span class="line">[--charset charset] [--filelimit[&#x3D;]#] [--si] [--timefmt[&#x3D;]&lt;f&gt;]</span><br><span class="line">[--sort[&#x3D;]&lt;name&gt;] [--matchdirs] [--ignore-case] [--fromfile] [--]</span><br><span class="line">[&lt;directory list&gt;]</span><br><span class="line">  ------- Listing options -------</span><br><span class="line">  -a            All files are listed.</span><br><span class="line">  -d            List directories only.</span><br><span class="line">  -l            Follow symbolic links like directories.</span><br><span class="line">  -f            Print the full path prefix for each file.</span><br><span class="line">  -x            Stay on current filesystem only.</span><br><span class="line">  -L level      Descend only level directories deep.</span><br></pre></td></tr></table></figure></li><li><p>这回来看一下Django的目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(django) ➜  AutoPlatform tree</span><br><span class="line">.</span><br><span class="line">├── AutoPlatform</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── asgi.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">└── manage.py</span><br><span class="line"></span><br><span class="line">1 directory, 6 files</span><br></pre></td></tr></table></figure></li><li><p>最外层的 <code>AutoPlatform/</code>根目录是项目的容器， 根目录名称对Django没有影响，可以将它重命名为任何喜欢的名称</p></li><li><p><code>manage.py</code>: 各种方式管理 Django 项目的命令行工具<br>里面一层的 AutoPlatform/ 目录包含你的项目，一个纯 Python 包。它的名字就是当你引用它内部任何东西时需要用到的 Python 包名。 (AutoPlatform.urls)</p></li><li><p><code>AutoPlatform/__init__.py</code>：一个空文件，告诉 Python 这个目录应该被认为是一个 Python 包</p></li><li><p><code>AutoPlatform/settings.py</code>：Django 项目的配置文件</p></li><li><p><code>AutoPlatform/urls.py</code>：Django 项目的 URL 声明，就像网站的“目录”,文件urls.py告诉Django应创建哪些网页来响应浏览器请求</p></li><li><p><code>AutoPlatform/asgi.py</code>：作为项目的运行在 ASGI 兼容的Web服务器上的入口</p></li><li><p><code>AutoPlatform/wsgi.py</code>：作为你的项目的运行在 WSGI 兼容的Web服务器上的入口,文件名是web server gateway interface（Web服务器网关接口）的首字母缩写</p><h5 id="5-启动项目"><a href="#5-启动项目" class="headerlink" title="5.启动项目"></a>5.启动项目</h5></li><li><p>来确认一下Django 项目是否真的创建成功了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(django) ➜  AutoPlatform python manage.py runserver</span><br><span class="line">Watching for file changes with StatReloader</span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">Run &#39;python manage.py migrate&#39; to apply them.</span><br><span class="line">August 24, 2020 - 10:14:06</span><br><span class="line">Django version 3.1, using settings &#39;AutoPlatform.settings&#39;</span><br><span class="line">Starting development server at http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure></li><li><p>忽略有关未应用最新数据库迁移的警告,刚刚启动的是 Django 自带的用于开发的简易服务器，它是一个用纯 Python 写的轻量级的 Web 服务器</p></li><li><p>现在，服务器正在运行，浏览器访问 <a href="https://127.0.0.1:8000/" target="_blank" rel="noopener">https://127.0.0.1:8000/</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTgxM2Y0NGIxODNmOTE0NzYucG5n?x-oss-process=image/format,png" alt=""></p></li><li><p>小火箭正在飞，一切正常，这就启动了Django</p></li></ul><p>NOTE： 用于开发的服务器在需要的情况下会对每一次的访问请求重新载入一遍 Python 代码。所以不需要为了让修改的代码生效而频繁的重新启动服务器。然而，一些动作，比如添加新文件，将不会触发自动重新加载，这时得自己手动重启服务器</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Django基础" scheme="https://yiluotalk.com/categories/Django%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Django基础" scheme="https://yiluotalk.com/tags/Django%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
  </entry>
  
  <entry>
    <title>Python8--函数</title>
    <link href="https://yiluotalk.com/2020/08/25/Python8--%E5%87%BD%E6%95%B0/"/>
    <id>https://yiluotalk.com/2020/08/25/Python8--%E5%87%BD%E6%95%B0/</id>
    <published>2020-08-25T05:33:59.000Z</published>
    <updated>2020-08-25T05:33:34.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM2YjAxODdmNzM5M2Q1MmEucG5n?x-oss-process=image/format,png" alt=""></p><blockquote><p>本文首发自伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！<br>#####1.什么是函数<br>我们在写程序的时候会多次使用重复的代码，函数就可以简化这种重复。我们在函数里写重复的内容， 然后等需要使用的时候直接调用就可以</p></blockquote><ul><li><code>Python</code>函数定义的通常格式为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def 函数名（参数列表）:</span><br><span class="line">    #函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明</span><br><span class="line">    函数体</span><br><span class="line">    #return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None</span><br></pre></td></tr></table></figure><h5 id="2-定义函数"><a href="#2-定义函数" class="headerlink" title="2. 定义函数"></a>2. 定义函数</h5>先进入到<code>python</code>的命令行模式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ source yiluo&#x2F;bin&#x2F;activate</span><br><span class="line">(yiluo) ➜  ~ python3</span><br><span class="line">Python 3.7.5 (default, Nov 29 2019, 14:32:46)</span><br><span class="line">[Clang 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li>创建一个输出任意范围内 <code>Fibonacci</code>数列的函数:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def fib(n):</span><br><span class="line">...     a, b &#x3D; 0, 1</span><br><span class="line">...     while a&lt;n:</span><br><span class="line">...         print(a, end&#x3D;&#39; &#39;)</span><br><span class="line">...         a, b &#x3D; b, a+b</span><br><span class="line">...     print()</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; fib(2000)</span><br><span class="line">0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597</span><br></pre></td></tr></table></figure>【1】.<code>def</code> 关键字定义函数<br>【2】.函数体的第一个语句可以（可选的）是<code>字符串</code>文字<br>【3】.函数的 执行 会引入一个用于函数<code>局部变量</code>的新符号表<br>【4】.在函数被调用时，实际参数（<code>实参</code>）会被引入被调用函数的本地符号表中<br>【5】.函数名称的值具有<code>解释器</code>将其识别为用户定义函数的类型。这个值可以分配给另一个名称<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; fib</span><br><span class="line">&lt;function fib at 0x10726a290&gt;</span><br><span class="line">&gt;&gt;&gt; f &#x3D; fib</span><br><span class="line">&gt;&gt;&gt; f(100)</span><br><span class="line">0 1 1 2 3 5 8 13 21 34 55 89</span><br></pre></td></tr></table></figure></li><li>写一个返回<code>斐波那契数列</code>的列表（而不是把它打印出来）的函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def fib2(n):</span><br><span class="line">...     result &#x3D; []</span><br><span class="line">...     a, b &#x3D; 0, 1</span><br><span class="line">...     while a&lt;n:</span><br><span class="line">...         result.append(a)</span><br><span class="line">...         a, b &#x3D;b ,a+b</span><br><span class="line">...     return result</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; f100 &#x3D; fib2(100)</span><br><span class="line">&gt;&gt;&gt; f100</span><br><span class="line">[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>#####3.内置函数<br>内置函数就是 <code>Python</code>解释器中不用引入任何包，一直可以使用的函数义和调用<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWNkMDVmMmRkNjlmMGNhYzUucG5n?x-oss-process=image/format,png" alt="图片来自官方文档"></li><li>常用的<code>len</code> <code>type</code>  <code>abs</code>来看一下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; &#39;hello&#39;</span><br><span class="line">&gt;&gt;&gt; len(a)</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;str&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; b &#x3D; -1</span><br><span class="line">&gt;&gt;&gt; abs(b)</span><br><span class="line">1</span><br></pre></td></tr></table></figure><code>len</code>获取来字符串的个数<br><code>type</code>获取了类型是字符串<br><code>abs</code>是绝对值函数  <code>-1</code>的绝对值是<code>1</code></li></ul><h5 id="4-变量作用域"><a href="#4-变量作用域" class="headerlink" title="4.变量作用域"></a>4.变量作用域</h5><p><code>局部变量</code>和<code>全局变量</code></p><ul><li>创建一个文件，然后<code>vim</code>进行编辑<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code touch a.py</span><br><span class="line">(yiluo) ➜  Code vim a.py</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">def demo():</span><br><span class="line">    n &#x3D; 100</span><br><span class="line">    print(n)</span><br><span class="line"></span><br><span class="line">n &#x3D; 1</span><br><span class="line">print(&quot;Before demo &quot;, n)</span><br><span class="line">print(&quot;Inside demo&quot;, end&#x3D;&#39; &#39;)</span><br><span class="line">demo()</span><br><span class="line">print(&quot;After demo&quot;, n)</span><br></pre></td></tr></table></figure></li><li>保存文件然后命令行执行看一下结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python a.py</span><br><span class="line">Before demo  1</span><br><span class="line">Inside demo 100</span><br><span class="line">After demo 1</span><br></pre></td></tr></table></figure>以上 <code>n=1</code> 是全局变量，  <code>n=100</code>是局部变量</li><li>例子2<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">def test_local():</span><br><span class="line">    name &#x3D; &quot;Yiluo&quot;</span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line">name &#x3D; &#39;Tom&#39;</span><br><span class="line"></span><br><span class="line">print(&#39;Before&#39;, name)</span><br><span class="line">print(&#39;inside&#39;,end &#x3D; &#39; &#39;)</span><br><span class="line">test_local()</span><br><span class="line">print(&#39;After&#39;, name)</span><br></pre></td></tr></table></figure></li><li>执行结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  code python3 local.py</span><br><span class="line">Before Tom</span><br><span class="line">inside Yiluo</span><br><span class="line">After Tom</span><br></pre></td></tr></table></figure><h5 id="5-global关键字"><a href="#5-global关键字" class="headerlink" title="5. global关键字"></a>5. <code>global</code>关键字</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">def demo2():</span><br><span class="line">    global n</span><br><span class="line">    n &#x3D; 100</span><br><span class="line">    print(n)</span><br><span class="line"></span><br><span class="line">n &#x3D; 1</span><br><span class="line">print(&quot;Before demo2&quot;, n)</span><br><span class="line">print(&quot;Inside demo2&quot;, end&#x3D;&#39; &#39;)</span><br><span class="line">demo2()</span><br><span class="line">print(&quot;After demo2&quot;, n)</span><br></pre></td></tr></table></figure></li><li>保存文件，然后在命令行模式下运行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python b.py</span><br><span class="line">Before demo2 1</span><br><span class="line">Inside demo2 100</span><br><span class="line">After demo2 100</span><br></pre></td></tr></table></figure></li><li>举例2<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name &#x3D; &#39;Yiluo&#39;</span><br><span class="line">&gt;&gt;&gt; def test_local():</span><br><span class="line">...     print(name)</span><br><span class="line">...     name &#x3D; &#39;Tom&#39;</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; test_local()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 2, in test_local</span><br><span class="line">UnboundLocalError: local variable &#39;name&#39; referenced before assignment</span><br></pre></td></tr></table></figure></li><li>当执行到 <code>print(name)</code> 的时候会报错，因为 <code>name</code>作为函数局部变量是在 <code>print(name)</code>之后才定义的</li><li>现在我们使用 <code>global</code> 关键字，对函数中的 <code>name</code> 标志为全局变量，让函数内部使用全局变量的<code>name</code>，那么整个程序中出现的 <code>name</code>都将是这个<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name &#x3D; &#39;Tom&#39;</span><br><span class="line">&gt;&gt;&gt; def name_global():</span><br><span class="line">...     global name</span><br><span class="line">...     print(name)</span><br><span class="line">...     name &#x3D; &#39;Yiluo&#39;</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; print(name)</span><br><span class="line">Tom</span><br><span class="line">&gt;&gt;&gt; name_global()</span><br><span class="line">Tom</span><br><span class="line">&gt;&gt;&gt; print(name)</span><br><span class="line">Yiluo</span><br></pre></td></tr></table></figure></li><li>关键字 <code>global</code>来告诉 <code>name</code> 的定义是全局的，因此在函数内部更改了 <code>name</code>的值，函数外 <code>name</code> 的值也实际上更改了<h5 id="6-函数的参数"><a href="#6-函数的参数" class="headerlink" title="6.函数的参数"></a>6.函数的参数</h5><code>Python</code> 常用参数有四种：<code>必选参数</code>、<code>默认参数</code>、<code>可变参数</code>和<code>关键字参数</code>，复合使用时各类参数的定义顺序须同上<h6 id="1-必选参数"><a href="#1-必选参数" class="headerlink" title="1. 必选参数"></a>1. 必选参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def student(name, age):</span><br><span class="line">...     print(&quot;NAME: &quot;, name)</span><br><span class="line">...     print(&quot;AGE: &quot;, age)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; student(&#39;yiluo&#39;, 18)</span><br><span class="line">NAME:  yiluo</span><br><span class="line">AGE:  18</span><br></pre></td></tr></table></figure>也可是使用参数名进行传参<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; student(name&#x3D;&#39;yiluo&#39;, age&#x3D;18)</span><br><span class="line">NAME:  yiluo</span><br><span class="line">AGE:  18</span><br></pre></td></tr></table></figure></li><li>必选参数可以不写参数名，但必须对其赋值，参数赋值顺序是定义的时候指定的，所以必选参数又称为位置参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def info(student_id, student_name):</span><br><span class="line">...     print(&quot;Student ID: &quot;, student_id)</span><br><span class="line">...     print(&quot;Student Name: &quot;, student_name)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; info(1, &#39;Yiluo&#39;)</span><br><span class="line">Student ID:  1</span><br><span class="line">Student Name:  Yiluo</span><br><span class="line">&gt;&gt;&gt; info(&#39;Yiluo&#39;, 2)</span><br><span class="line">Student ID:  Yiluo</span><br><span class="line">Student Name:  2</span><br><span class="line">&gt;&gt;&gt; info(student_name&#x3D;&#39;Yiluo&#39;, student_id&#x3D;1)</span><br><span class="line">Student ID:  1</span><br><span class="line">Student Name:  Yiluo</span><br></pre></td></tr></table></figure>######2. 默认参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def student(name, age&#x3D;18):</span><br><span class="line">...     print(&quot;NAME: &quot;, name)</span><br><span class="line">...     print(&quot;AGE: &quot;, age)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; student(&#39;yiluo&#39;)</span><br><span class="line">NAME:  yiluo</span><br><span class="line">AGE:  18</span><br><span class="line">&gt;&gt;&gt; student(&#39;yiluo&#39;, 20)</span><br><span class="line">NAME:  yiluo</span><br><span class="line">AGE:  20</span><br></pre></td></tr></table></figure>如果不传年龄会自动给出默认年龄值</li><li>例子2<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def info(student_name, student_id, city&#x3D;&#39;深圳&#39;):</span><br><span class="line">...     print(&quot;Student ID: &quot;, student_id)</span><br><span class="line">...     print(&quot;Student Name: &quot;, student_name)</span><br><span class="line">...     print(&#39;City: &#39;, city)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; info(&#39;Yiluo&#39;, 1)</span><br><span class="line">Student ID:  1</span><br><span class="line">Student Name:  Yiluo</span><br><span class="line">City:  深圳</span><br><span class="line">&gt;&gt;&gt; info(&#39;Yiluo&#39;, 1, &#39;上海&#39;)</span><br><span class="line">Student ID:  1</span><br><span class="line">Student Name:  Yiluo</span><br><span class="line">City:  上海</span><br></pre></td></tr></table></figure></li><li>默认参数没有赋值，则会自动赋其默认值</li><li>默认参数后面不能再有必选参数，例如 f(a,b=90,c) 就是错误的</li><li>默认参数的默认值必须设为不可变的数据类型（如字符串、元组、数字、布尔值、None 等）</li></ul><p>######3. 可变参数<br>可变参数的定义格式是在参数名前面加上 <code>*</code> ，参数名可以自定义，通常写成 <code>*args</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def student(name, age&#x3D;19, *score):</span><br><span class="line">...     print(&quot;NAME: &quot;, name)</span><br><span class="line">...     print(&quot;AGE: &quot;, age)</span><br><span class="line">...     print(&quot;SCORE: &quot;, score)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; student(&#39;yiluo&#39;,19,88,90,100)</span><br><span class="line">NAME:  yiluo</span><br><span class="line">AGE:  19</span><br><span class="line">SCORE:  (88, 90, 100)</span><br></pre></td></tr></table></figure><p>学生的得分分别是 <code>88</code>，<code>90</code>，<code>100</code></p><p>######4. 关键字参数<br>关键字参数的定义格式是在参数名前面加上 <code>**</code> ，参数名可以自定义，通常写成 <code>**kw</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def student(name, age, **score):</span><br><span class="line">...     print(&quot;NAME: &quot;, name)</span><br><span class="line">...     print(&quot;AGE: &quot;, age)</span><br><span class="line">...     print(&quot;SCORE: &quot;, score)</span><br><span class="line">&gt;&gt;&gt; score &#x3D; &#123;&#39;数学&#39;:&#39;88&#39;, &#39;语文&#39;:&#39;90&#39;,&#39;英语&#39;:&#39;100&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; student(&#39;yiluo&#39;, 19, **score)</span><br><span class="line">NAME:  yiluo</span><br><span class="line">AGE:  19</span><br><span class="line">SCORE:  &#123;&#39;数学&#39;: &#39;88&#39;, &#39;语文&#39;: &#39;90&#39;, &#39;英语&#39;: &#39;100&#39;&#125;</span><br></pre></td></tr></table></figure><ul><li>（必选参数、默认参数、可变参数）在赋值时都可以不写参数名，而关键字参数允许传入零个或任意多个带参数名的参数，其中参数名可自定义</li><li>关键字参数会在函数内部自动生成一个字典</li><li>关键字参数的定义格式是在参数名前面加上 ** </li><li>参数名可以自定义，通常写成 **kw </li><li>函数体内部使用该参数时，前面不要加 ** </li></ul><p>######5. 命名关键字参数<br>前文提到，<code>必选参数</code>、<code>默认参数</code>、<code>可变参数</code>在赋值时都可以不写参数名，而<code>命名关键字参数</code>恰好相反， 赋值时必须写上参数名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def student(*, name):</span><br><span class="line">...     print(&quot;Hello&quot;, name)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; student(&#39;yiluo&#39;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: student() takes 0 positional arguments but 1 was given</span><br><span class="line">&gt;&gt;&gt; student(name&#x3D;&#39;yiluo&#39;)</span><br><span class="line">Hello yiluo</span><br></pre></td></tr></table></figure><ul><li>赋值时必须写上参数名</li><li>此参数的特征就是前面有一个用逗号隔开的 *</li><li>用户调用函数时，每一个命名关键字参数都必须使用相应的参数名赋值，否则会抛出 TypeError <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def hi(*, name):</span><br><span class="line">...     print(&#39;hi &#39;, name)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; hi(&#39;Yiluo&#39;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: hi() takes 0 positional arguments but 1 was given</span><br><span class="line">&gt;&gt;&gt; hi(name&#x3D;&#39;Yiluo&#39;)</span><br><span class="line">hi  Yiluo</span><br></pre></td></tr></table></figure>######6. 函数中修改参数值</li><li>函数参数传值的意思是函数调用过程中，在函数内部使用到的参数只是一个局部变量，在函数执行结束后就销毁了。不影响调用该函数的外部参数变量的值</li><li>函数参数传引用的意思是传递给函数的参数就是外部使用的参数，函数执行过程中对该参数进行的任何修改都会保留，当函数调用结束后，这个参数被其他代码使用中都是函数修改过后的数据</li><li>Python 函数的参数是没有类型的，可以传递任意类型的对象作为参数。但不同类型的参数在函数中，有的可以修改（例如列表对象），有的不可以修改（例如字符串对象）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ipaddress &#x3D; &#39;192.168.1.168&#39;</span><br><span class="line">&gt;&gt;&gt; ports &#x3D; [11, 12, 13]</span><br><span class="line">&gt;&gt;&gt; def connect(ipaddress, ports):</span><br><span class="line">...     print(&quot;IP: &quot;, ipaddress)</span><br><span class="line">...     print(&#39;Ports: &#39;, ports)</span><br><span class="line">...     ipaddress &#x3D; &#39;10.10.10.1&#39;</span><br><span class="line">...     ports.append(8000)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; print(ipaddress, ports)</span><br><span class="line">192.168.1.168 [11, 12, 13]</span><br><span class="line">&gt;&gt;&gt; connect(ipaddress, ports)</span><br><span class="line">IP:  192.168.1.168</span><br><span class="line">Ports:  [11, 12, 13]</span><br><span class="line">&gt;&gt;&gt; connect(ipaddress, ports)</span><br><span class="line">IP:  192.168.1.168</span><br><span class="line">Ports:  [11, 12, 13, 8000]</span><br><span class="line">&gt;&gt;&gt; connect(ipaddress, ports)</span><br><span class="line">IP:  192.168.1.168</span><br><span class="line">Ports:  [11, 12, 13, 8000, 8000]</span><br><span class="line">&gt;&gt;&gt; print(ipaddress, ports)</span><br><span class="line">192.168.1.168 [11, 12, 13, 8000, 8000, 8000]</span><br></pre></td></tr></table></figure></li><li>ipaddress 的值没有起到效果，但 ports 列表的值却改变了</li><li>Python 中的对象有不可变对象，指的是数值、字符串、元组等，和可变对象，指的是列表、字典等。如果是不可变对象作为参数，函数中对该参数的修改只能用等号赋值，实际上是创建了一个新的局部变量。如果是可变对象作为参数，函数中的修改会保留<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python7--元组、集合、字典</title>
    <link href="https://yiluotalk.com/2020/08/25/Python7--%E5%85%83%E7%BB%84%E3%80%81%E9%9B%86%E5%90%88%E3%80%81%E5%AD%97%E5%85%B8/"/>
    <id>https://yiluotalk.com/2020/08/25/Python7--%E5%85%83%E7%BB%84%E3%80%81%E9%9B%86%E5%90%88%E3%80%81%E5%AD%97%E5%85%B8/</id>
    <published>2020-08-25T05:32:59.000Z</published>
    <updated>2020-08-25T05:32:39.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM2YjAxODdmNzM5M2Q1MmEucG5n?x-oss-process=image/format,png" alt=""></p><blockquote><p>本文首发自伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote><h5 id="1-元组"><a href="#1-元组" class="headerlink" title="1.元组"></a>1.元组</h5><ul><li>tuple（元组）是一种特殊的列表，不同点是元组一旦创建就不能修改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name_list &#x3D; (&#39;Yiluo&#39;, &#39;Tom&#39;, &#39;Lucy&#39;, &#39;Joe&#39;)</span><br><span class="line">&gt;&gt;&gt; name_list.pop()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#39;tuple&#39; object has no attribute &#39;pop&#39;</span><br><span class="line">&gt;&gt;&gt; name_list.remove(&#39;Tom&#39;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#39;tuple&#39; object has no attribute &#39;remove&#39;</span><br></pre></td></tr></table></figure></li><li>如果是只读的数据，尽可能使用元组</li><li>元组中如果包含可变的数据元素，这些数据元素是可以修改的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name_list &#x3D; (&#39;Yiluo&#39;, &#39;Tom&#39;, &#39;Lucy&#39;, [&#39;Joe&#39;])</span><br><span class="line">&gt;&gt;&gt; name_list[3].append(&#39;Morgan&#39;)</span><br><span class="line">&gt;&gt;&gt; name_list</span><br><span class="line">(&#39;Yiluo&#39;, &#39;Tom&#39;, &#39;Lucy&#39;, [&#39;Joe&#39;, &#39;Morgan&#39;])</span><br></pre></td></tr></table></figure></li><li>如果要创建只有一个元素的元组，是不可以直接使用括号中一个元素的，需要在元素值后面跟一个逗号<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name_list &#x3D; (&#39;Yiluo&#39;)</span><br><span class="line">&gt;&gt;&gt; type(name_list)</span><br><span class="line">&lt;class &#39;str&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; name_list &#x3D; (&#39;Yiluo&#39;, )</span><br><span class="line">&gt;&gt;&gt; type(name_list)</span><br><span class="line">&lt;class &#39;tuple&#39;&gt;</span><br></pre></td></tr></table></figure><h5 id="2-集合"><a href="#2-集合" class="headerlink" title="2.集合"></a>2.集合</h5></li><li>set（集合）是一个无序不重复元素的数据集，对比列表的区别首先是无序的，不可以使用索引进行顺序的访问，另外一个特点是不能够有重复的数据</li><li>使用大括号或者 set 函数，需要注意空的集合不能够使用 {} 创建，只能使用 set 函数，因为{} 创建的是一个空的字典<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name_list &#x3D; (&#39;Yiluo&#39;, &#39;Tom&#39;, &#39;Lucy&#39;, &#39;Joe&#39;, &#39;Joe&#39;)</span><br><span class="line">&gt;&gt;&gt; type(name_list)</span><br><span class="line">&lt;class &#39;tuple&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; name_list &#x3D; set(name_list)</span><br><span class="line">&gt;&gt;&gt; type(name_list)</span><br><span class="line">&lt;class &#39;set&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; name_list</span><br><span class="line">&#123;&#39;Lucy&#39;, &#39;Yiluo&#39;, &#39;Tom&#39;, &#39;Joe&#39;&#125;</span><br></pre></td></tr></table></figure></li><li>多余的字符串已经被自动去除</li><li>集合还可以直接由字符串与 set 函数进行创建，会将字符串拆散为不同的字符，并去除重复的字符<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; nameset &#x3D; set(&#39;Yiluol&#39;)</span><br><span class="line">&gt;&gt;&gt; nameset</span><br><span class="line">&#123;&#39;l&#39;, &#39;Y&#39;, &#39;i&#39;, &#39;u&#39;, &#39;o&#39;&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h5 id="3-集合操作"><a href="#3-集合操作" class="headerlink" title="3.集合操作"></a>3.集合操作</h5></li><li>in<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name_list</span><br><span class="line">&#123;&#39;Lucy&#39;, &#39;Yiluo&#39;, &#39;Tom&#39;, &#39;Joe&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; type(name_list)</span><br><span class="line">&lt;class &#39;set&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; &#39;Lucy&#39; in name_list</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &#39;haha&#39; in name_list</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li>使用 add() 向集合中增加元素，使用 remove() 从集合中删除元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name_list</span><br><span class="line">&#123;&#39;Lucy&#39;, &#39;Yiluo&#39;, &#39;Tom&#39;, &#39;Joe&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; name_list.add(&#39;Rachel&#39;)</span><br><span class="line">&gt;&gt;&gt; name_list</span><br><span class="line">&#123;&#39;Rachel&#39;, &#39;Lucy&#39;, &#39;Joe&#39;, &#39;Tom&#39;, &#39;Yiluo&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; name_list.remove(&#39;Joe&#39;)</span><br><span class="line">&gt;&gt;&gt; name_list</span><br><span class="line">&#123;&#39;Rachel&#39;, &#39;Lucy&#39;, &#39;Tom&#39;, &#39;Yiluo&#39;&#125;</span><br></pre></td></tr></table></figure><h5 id="4-字典"><a href="#4-字典" class="headerlink" title="4. 字典"></a>4. 字典</h5></li><li>dict（字典）是无序的键值对集合。字典中的每一个元素都是一个key 和 一个 value 的组合，key 值在字典中必须是唯一的，因此可以很方便的从字典中使用 key 获得其对应的 value 的值</li><li>创建字典的时候使用大括号，这一点与集合相同<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; student_list &#x3D; &#123;1:&#39;Yiluo&#39;, 2:&#39;Tom&#39;, 3:&#39;Lucy&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; student_list[1]</span><br><span class="line">&#39;Yiluo&#39;</span><br><span class="line">&gt;&gt;&gt; student_list[3]</span><br><span class="line">&#39;Lucy&#39;</span><br></pre></td></tr></table></figure></li><li>如果 key 不存在 dict[key] 则会抛出 KeyError<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; student_list[6]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">KeyError: 6</span><br></pre></td></tr></table></figure></li><li>我们会使用 get() 函数获取 key 对应的 value，如果此时 key 不存在则默认返回 None，也可以在 get() 函数中给定一个默认值，如果 key 不存在则返回默认值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; student_list.get(6)</span><br><span class="line">&gt;&gt;&gt; student_list.get(6, &#39;None&#39;)</span><br><span class="line">&#39;None&#39;</span><br></pre></td></tr></table></figure></li><li>字典也可以使用 dict 函数进行创建<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; new_dict &#x3D; dict(((1, &#39;Yiluo&#39;), (2, &#39;Tom&#39;)))</span><br><span class="line">&gt;&gt;&gt; type(new_dict)</span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; new_dict</span><br><span class="line">&#123;1: &#39;Yiluo&#39;, 2: &#39;Tom&#39;&#125;</span><br></pre></td></tr></table></figure></li><li>字典是无序的，不能够通过索引进行访问</li><li>注意字典的 key 必须为不可变的类型，列表是不能够当作 key 的</li><li>从字典中删除一个元素，只需要使用 del 删除，如果 key 不存在则抛出 KeyError<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; new_dict</span><br><span class="line">&#123;1: &#39;Yiluo&#39;, 2: &#39;Tom&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; del new_dict[2]</span><br><span class="line">&gt;&gt;&gt; new_dict</span><br><span class="line">&#123;1: &#39;Yiluo&#39;&#125;</span><br></pre></td></tr></table></figure><h5 id="5-items-函数获取所有的字典元素"><a href="#5-items-函数获取所有的字典元素" class="headerlink" title="5.items() 函数获取所有的字典元素"></a>5.items() 函数获取所有的字典元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name_dict &#x3D; &#123;1: &#39;Yiluo&#39;, 2: &#39;Tom&#39;, 3: &#39;Joe&#39;, 4: &#39;Lucy&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; type(name_dict)</span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; for key, value in name_dict.items():</span><br><span class="line">...     print(key, value)</span><br><span class="line">...</span><br><span class="line">1 Yiluo</span><br><span class="line">2 Tom</span><br><span class="line">3 Joe</span><br><span class="line">4 Lucy</span><br></pre></td></tr></table></figure></li><li>使用 keys() 和 values() 分别只获取字典中的所有 key 或 value 的列表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name_dict.keys()</span><br><span class="line">dict_keys([1, 2, 3, 4])</span><br><span class="line">&gt;&gt;&gt; name_dict.values()</span><br><span class="line">dict_values([&#39;Yiluo&#39;, &#39;Tom&#39;, &#39;Joe&#39;, &#39;Lucy&#39;])</span><br></pre></td></tr></table></figure></li><li>pop(key) 函数，可以返回 key 对应的 value，并将该 key:value 键值对删除<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name_dict</span><br><span class="line">&#123;1: &#39;Yiluo&#39;, 2: &#39;Tom&#39;, 3: &#39;Joe&#39;, 4: &#39;Lucy&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; name_dict.pop(1)</span><br><span class="line">&#39;Yiluo&#39;</span><br><span class="line">&gt;&gt;&gt; name_dict</span><br><span class="line">&#123;2: &#39;Tom&#39;, 3: &#39;Joe&#39;, 4: &#39;Lucy&#39;&#125;</span><br></pre></td></tr></table></figure><h5 id="6-数据类型转换"><a href="#6-数据类型转换" class="headerlink" title="6.数据类型转换"></a>6.数据类型转换</h5></li><li>int(x, base) 将 x 转换为一个整数</li><li>float(x) 将 x 转换为一个浮点数</li><li>str(x) 将对象 x 转换为字符串</li><li>list(s) 将序列 s 转换为一个列表</li><li>tuple(s) 将序列 s 转换为一个元组</li><li>set(s) 将序列 s 转换为可变集合</li><li>dict(d) 创建一个字典，d 必须是一个序列 (key,value) 元组<h6 id="7-简单总结"><a href="#7-简单总结" class="headerlink" title="7.简单总结"></a>7.简单总结</h6></li><li>列表：可修改有序的数据集合</li><li>元组：不可修改的有序的数据集合</li><li>集合：无序的不重复的数据集合</li><li>字典：无序的存储 key:value 键值对的数据集合</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python6--数据结构列表</title>
    <link href="https://yiluotalk.com/2020/08/25/Python6--%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%97%E8%A1%A8/"/>
    <id>https://yiluotalk.com/2020/08/25/Python6--%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%97%E8%A1%A8/</id>
    <published>2020-08-25T05:31:59.000Z</published>
    <updated>2020-08-25T05:31:56.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM2YjAxODdmNzM5M2Q1MmEucG5n?x-oss-process=image/format,png" alt=""></p><blockquote><p>本文首发自伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote><h5 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1.数据结构"></a>1.数据结构</h5><ul><li>Python 3 中非常常用的四种数据结构：列表、元组、集合与字典<h5 id="2-列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h5></li><li>list（列表）是一种有序的数据集合<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; city &#x3D; [&#39;shenzhen&#39;,&#39;beijing&#39;,&#39;tianjin&#39;,&#39;guangzhou&#39;]</span><br><span class="line">&gt;&gt;&gt; city.append(&#39;hongkong&#39;)</span><br><span class="line">&gt;&gt;&gt; city</span><br><span class="line">[&#39;shenzhen&#39;, &#39;beijing&#39;, &#39;tianjin&#39;, &#39;guangzhou&#39;, &#39;hongkong&#39;]</span><br></pre></td></tr></table></figure></li><li>append 添加元素到末尾</li><li>通过索引访问到每一个列表的元素，第一个元素的索引为 0，最后一个元素的索引可以使用 -1 进行标示<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; city[0]</span><br><span class="line">&#39;shenzhen&#39;</span><br><span class="line">&gt;&gt;&gt; city[0:2]</span><br><span class="line">[&#39;shenzhen&#39;, &#39;beijing&#39;]</span><br><span class="line">&gt;&gt;&gt; city[-1]</span><br><span class="line">&#39;hongkong&#39;</span><br><span class="line">&gt;&gt;&gt; city[-2]</span><br><span class="line">&#39;guangzhou&#39;</span><br></pre></td></tr></table></figure></li><li>len() 查看列表中元素的数量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; len(city)</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h5 id="3-列表操作"><a href="#3-列表操作" class="headerlink" title="3.列表操作"></a>3.列表操作</h5></li><li>列表是有序的</li><li>append() 就是在列表的末尾添加新的元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; coin &#x3D; [&#39;BTC&#39;, &#39;ETH&#39;, &#39;EOS&#39;]</span><br><span class="line">&gt;&gt;&gt; coin.append(&#39;ETC&#39;)</span><br><span class="line">&gt;&gt;&gt; coin</span><br><span class="line">[&#39;BTC&#39;, &#39;ETH&#39;, &#39;EOS&#39;, &#39;ETC&#39;]</span><br></pre></td></tr></table></figure></li><li>数据插入到列表的任何位置，这时我们可以使用列表的 insert() 方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; coin.insert(0, &#39;BTC&#39;)</span><br><span class="line">&gt;&gt;&gt; coin</span><br><span class="line">[&#39;BTC&#39;, &#39;BTC&#39;, &#39;ETH&#39;, &#39;EOS&#39;, &#39;ETC&#39;]</span><br></pre></td></tr></table></figure></li><li>列表方法 count(s) 会返回列表元素中 s 的数量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; coin.count(&#39;BTC&#39;)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li>列表中移除任意指定值，使用 remove() 方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; coin.remove(&#39;ETC&#39;)</span><br><span class="line">&gt;&gt;&gt; coin</span><br><span class="line">[&#39;BTC&#39;, &#39;BTC&#39;, &#39;ETH&#39;, &#39;EOS&#39;]</span><br></pre></td></tr></table></figure></li><li>另外一种删除元素的方法是使用 del 关键字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; del coin[0]</span><br><span class="line">&gt;&gt;&gt; coin</span><br><span class="line">[&#39;BTC&#39;, &#39;ETH&#39;, &#39;EOS&#39;]</span><br></pre></td></tr></table></figure></li><li>有序的列表可以进行反转<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; coin</span><br><span class="line">[&#39;BTC&#39;, &#39;ETH&#39;, &#39;EOS&#39;]</span><br><span class="line">&gt;&gt;&gt; coin.reverse()</span><br><span class="line">&gt;&gt;&gt; coin</span><br><span class="line">[&#39;EOS&#39;, &#39;ETH&#39;, &#39;BTC&#39;]</span><br></pre></td></tr></table></figure></li><li>两个列表，想合并到一起，一种方法是将其中一个列表合并到另外一个列表的末尾位置，可以使用 extend()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; coin_new &#x3D; [&#39;ETC&#39;]</span><br><span class="line">&gt;&gt;&gt; coin + coin_new</span><br><span class="line">[&#39;EOS&#39;, &#39;ETH&#39;, &#39;BTC&#39;, &#39;ETC&#39;]</span><br><span class="line">&gt;&gt;&gt; coin</span><br><span class="line">[&#39;EOS&#39;, &#39;ETH&#39;, &#39;BTC&#39;]</span><br><span class="line">&gt;&gt;&gt; coin_new</span><br><span class="line">[&#39;ETC&#39;]</span><br><span class="line">&gt;&gt;&gt; coin.extend(coin_new)</span><br><span class="line">&gt;&gt;&gt; coin</span><br><span class="line">[&#39;EOS&#39;, &#39;ETH&#39;, &#39;BTC&#39;, &#39;ETC&#39;]</span><br></pre></td></tr></table></figure></li><li>给列表排序，使用列表的 sort() 方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; coin.sort()</span><br><span class="line">&gt;&gt;&gt; coin</span><br><span class="line">[&#39;BTC&#39;, &#39;EOS&#39;, &#39;ETC&#39;, &#39;ETH&#39;]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li>列表也可以使用 pop() 函数返回最后的一个元素，pop() 在返回元素的同时也会删除这个元素，传入一个参数 i 即 pop(i) 会将第 i 个元素弹出<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; coin</span><br><span class="line">[&#39;BTC&#39;, &#39;EOS&#39;, &#39;ETC&#39;, &#39;ETH&#39;]</span><br><span class="line">&gt;&gt;&gt; coin.pop()</span><br><span class="line">&#39;ETH&#39;</span><br><span class="line">&gt;&gt;&gt; coin</span><br><span class="line">[&#39;BTC&#39;, &#39;EOS&#39;, &#39;ETC&#39;]</span><br><span class="line">&gt;&gt;&gt; coin.pop(0)</span><br><span class="line">&#39;BTC&#39;</span><br><span class="line">&gt;&gt;&gt; coin</span><br><span class="line">[&#39;EOS&#39;, &#39;ETC&#39;]</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python5--异常处理</title>
    <link href="https://yiluotalk.com/2020/08/24/Python5--%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://yiluotalk.com/2020/08/24/Python5--%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2020-08-24T02:56:59.000Z</published>
    <updated>2020-08-24T02:54:57.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM2YjAxODdmNzM5M2Q1MmEucG5n?x-oss-process=image/format,png" alt=""></p><blockquote><p>本文首发自伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote><h5 id="1-异常处理"><a href="#1-异常处理" class="headerlink" title="1.异常处理"></a>1.异常处理</h5><ul><li>对于不符合预期的用户操作或数据输入，程序总会出现异常情况<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">&gt;&gt;&gt; file_path &#x3D; &#39;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;error.py&#39;</span><br><span class="line">&gt;&gt;&gt; f &#x3D; open(file_path)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">FileNotFoundError: [Errno 2] No such file or directory: &#39;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;error.py&#39;</span><br></pre></td></tr></table></figure><h5 id="2-Python-常用的异常类"><a href="#2-Python-常用的异常类" class="headerlink" title="2.Python 常用的异常类"></a>2.Python 常用的异常类</h5></li><li><code>NameError</code>访问一个未定义的变量</li><li><code>SyntaxError</code>语法错误，这个严格讲算是程序的错误</li><li><code>IndexError</code> 对于一个序列，访问的索引超过了序列的范围</li><li><code>KeyError</code> 访问一个不存在的字典 Key</li><li><code>ValueError</code> 传入无效的参数</li><li><code>AttributeErrr</code> 访问类对象中不存在的属性<h5 id="3-异常处理方式"><a href="#3-异常处理方式" class="headerlink" title="3.异常处理方式"></a>3.异常处理方式</h5></li><li>处理方法为使用 try，except 和 finally 三个关键字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; file_path &#x3D; &#39;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;error.py&#39;</span><br><span class="line">&gt;&gt;&gt; try:</span><br><span class="line">...     f &#x3D; open(file_path)</span><br><span class="line">... except FileNotFoundError as err:</span><br><span class="line">...     print(err)</span><br><span class="line">...</span><br><span class="line">[Errno 2] No such file or directory: &#39;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;error.py&#39;</span><br></pre></td></tr></table></figure></li><li>当 try 代码块中一旦出现异常，这个代码块后续的代码不会继续执行，会直接进入到 except 异常处理代码块中</li><li>finally 关键字是用来进行清理工作，经常和 except 一起使用，即无论是正常还是异常，这段代码都会执行</li><li>except: 这个语句后不写任何参数，表示将处理所有 try 代码块中抛出的异常<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; file_path &#x3D; &#39;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;error.py&#39;</span><br><span class="line">&gt;&gt;&gt; try:</span><br><span class="line">...     f &#x3D; open(file_path)</span><br><span class="line">... except FileNotFoundError:</span><br><span class="line">...     print(&#39;FileNotFoundError&#39;)</span><br><span class="line">... finally:</span><br><span class="line">...     print(&#39;Finally&#39;)</span><br><span class="line">...</span><br><span class="line">FileNotFoundError</span><br><span class="line">Finally</span><br></pre></td></tr></table></figure><h5 id="4-抛出异常"><a href="#4-抛出异常" class="headerlink" title="4.抛出异常"></a>4.抛出异常</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raise ValueError()</span><br></pre></td></tr></table></figure><h5 id="5-Python-包管理工具"><a href="#5-Python-包管理工具" class="headerlink" title="5.Python 包管理工具"></a>5.Python 包管理工具</h5></li><li>Python 提供了包管理工具 pip, <code>pip</code> 的官方网站是 <a href="https://pypi.org/project/pip/" target="_blank" rel="noopener">PyPi</a><h5 id="6-pip-的常见命令"><a href="#6-pip-的常见命令" class="headerlink" title="6.pip 的常见命令"></a>6.pip 的常见命令</h5></li><li>显示版本和路径：<code>pip3 --version</code></li><li>升级 pip：<code>sudo pip3 install --upgrade pip</code></li><li>安装包：(sudo) pip3 install package，如果需要指定版本就是：pip3 install package==6.6.6 (写具体的版本号)</li><li>卸载包：<code>pip3 uninstall package</code></li><li>升级包：<code>pip3 install --upgrade package</code>，可以使用 ==,&gt;=,&lt;=,&lt;,&gt; 来指定版本号</li><li>查看安装已安装的包：<code>pip3 freeze</code></li><li>把需要安装的一系列包写入<code>requirements.txt</code> 文件中，然后执行：<code>pip3 install -r requirements.txt</code><h5 id="7-错误和异常"><a href="#7-错误和异常" class="headerlink" title="7.错误和异常"></a>7.错误和异常</h5></li><li>写程序的时候通常会出现错误，目前（至少）有两种可区分的错误：<code>语法错误</code>和 <code>异常</code></li><li>语法错误：又称<code>解析错误</code>，经常容易遇到</li><li>异常：即使语句或表达式在语法上是正确的，但在尝试执行时，它仍可能会引发错误<h5 id="8-简单的例子"><a href="#8-简单的例子" class="headerlink" title="8. 简单的例子"></a>8. 简单的例子</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line">b &#x3D; 1</span><br><span class="line"></span><br><span class="line">c &#x3D; a + b</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure></li><li>上面很简单的代码执行后就会出错，因为并没有定义变量<code>a</code></li><li><code>Python</code>提供的<code>异常处理</code>方法来捕获并处理异常，处理方法为使用 <code>try，except</code>和 <code>finally</code> 三个<code>关键字</code><h5 id="9-try-except-的使用"><a href="#9-try-except-的使用" class="headerlink" title="9. try, except 的使用"></a>9. try, except 的使用</h5></li><li><code>try</code> 代码块中写可能会出现异常的代码</li><li><code>except</code> 代码块中添加处理异常的方法</li><li>来将上面的代码处理一下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line">b &#x3D; 1</span><br><span class="line">try:</span><br><span class="line">    c &#x3D; a + b</span><br><span class="line">    print(c)</span><br><span class="line">except NameError as err:</span><br><span class="line">    print(&#39;错误：&#123;&#125;&#39;.format(err))</span><br></pre></td></tr></table></figure></li><li>依旧没有赋值<code>a</code>变量</li><li>然后执行一下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：name &#39;a&#39; is not defined</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><ul><li>错误提示变量<code>a</code>没有被定义</li><li><code>NameError</code>的指的是访问了一个<code>未定义的变量</code></li><li>常见的还有<code>SyntaxError ，IndexError ，KeyError ，ValueError ，AttributeError</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTI0OWM2MDk5OTI0MmQ5MzIuanBlZw?x-oss-process=image/format,png" alt=""></li></ul><h5 id="10-多个except"><a href="#10-多个except" class="headerlink" title="10.多个except"></a>10.多个except</h5><ul><li><code>except</code>可以有多个，每个处理不同类型的异常，也可以不写任何异常类型名称，则会处理所有<code>捕获</code>的<code>异常</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line">a &#x3D; 2</span><br><span class="line">b &#x3D; 1</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    c &#x3D; a + b</span><br><span class="line">    print(c)</span><br><span class="line">    f &#x3D; open(&#39;&#x2F;yiluo&#x2F;bin&#x2F;activate.txt&#39;)</span><br><span class="line"></span><br><span class="line">except NameError as err:</span><br><span class="line">    print(&#39;错误：&#123;&#125;&#39;.format(err))</span><br><span class="line"></span><br><span class="line">except FileNotFoundError as err2:</span><br><span class="line">    print(&#39;错误：&#123;&#125;&#39;.format(err2))</span><br></pre></td></tr></table></figure></li><li>打开一个不存在的文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">错误：[Errno 2] No such file or directory: &#39;&#x2F;yiluo&#x2F;bin&#x2F;activate.txt&#39;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></li><li>系统抛出了<code>异常</code>，没有这个文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line">b &#x3D; 1</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    c &#x3D; a + b</span><br><span class="line">    f &#x3D; open(&#39;&#x2F;yiluo&#x2F;bin&#x2F;activate.txt&#39;)</span><br><span class="line"></span><br><span class="line">except:</span><br><span class="line">    print(&#39;总之就是有错误&#39;)</span><br></pre></td></tr></table></figure></li><li>不写任何<code>异常</code>的<code>类型</code></li><li>运行一下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">总之就是有错误</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h5 id="11-finally的使用"><a href="#11-finally的使用" class="headerlink" title="11.finally的使用"></a>11.finally的使用</h5></li><li>使用 <code>finally</code> 可以保证无论 <code>try</code>代码块中的代码是否<code>抛出异常</code>，都能够执行 <code>finally</code> 代码块里的内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line">a &#x3D; 2</span><br><span class="line">b &#x3D; 1</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    c &#x3D; a + b</span><br><span class="line">    f &#x3D; open(&#39;&#x2F;yiluo&#x2F;bin&#x2F;activate.txt&#39;)</span><br><span class="line"></span><br><span class="line">except:</span><br><span class="line">    print(&#39;总之就是有错误&#39;)</span><br><span class="line"></span><br><span class="line">finally:</span><br><span class="line">    print(&#39;结束异常&#39;)</span><br></pre></td></tr></table></figure></li><li>执行代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">总之就是有错误</span><br><span class="line">结束异常</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></li><li><code>finally</code>成功的运行了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line">a &#x3D; 2</span><br><span class="line">b &#x3D; 1</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    c &#x3D; a + b</span><br><span class="line">except:</span><br><span class="line">    print(&#39;总之就是有错误&#39;)</span><br><span class="line"></span><br><span class="line">finally:</span><br><span class="line">    print(&#39;结束异常&#39;)</span><br></pre></td></tr></table></figure></li><li>没有任何的异常执行下，看下<code>finally</code>会不会被运行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">结束异常</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></li><li><code>finally</code>成功运行<h5 id="12-抛出异常"><a href="#12-抛出异常" class="headerlink" title="12.抛出异常"></a>12.抛出异常</h5></li><li>如果希望程序执行过程中抛出异常，可以使用 <code>raise</code>语句<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; raise NameError(&#39;Error ERROR&#39;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">NameError: Error ERROR</span><br></pre></td></tr></table></figure></li><li>如上抛出了<code>&#39;Error ERROR&#39;</code>的异常<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></li></ul><blockquote><p>欢迎下方【戳一下】【点赞】<br>  Author：伊洛Yiluo<br>  愿你享受每一天，Just Enjoy !</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python4--模块和包</title>
    <link href="https://yiluotalk.com/2020/08/24/Python4--%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/"/>
    <id>https://yiluotalk.com/2020/08/24/Python4--%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/</id>
    <published>2020-08-24T02:55:59.000Z</published>
    <updated>2020-08-24T02:54:27.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWM2YjAxODdmNzM5M2Q1MmEucG5n?x-oss-process=image/format,png" alt=""></p><blockquote><p>本文首发自伊洛的个人博客：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fyiluotalk.com" target="_blank" rel="noopener">https://yiluotalk.com</a>，欢迎关注并查看更多内容！！！</p></blockquote><h5 id="1-name-与-main"><a href="#1-name-与-main" class="headerlink" title="1. __name__与 __main__"></a>1. <code>__name__</code>与 <code>__main__</code></h5><ul><li>如果你经常看<code>python</code>的代码，很多脚本后面都会用到 <code>if __name__ == &#39;__main__&#39;:</code>，对于刚接触<code>python</code>的小伙伴开始肯定会不大理解这是什么意思，为何这么使用。会纠结的理不清头绪，今天就这个痛点来简单的分解讲述下</li><li><code>__name__</code>其实是<code>python</code>内置的系统变量，我们来首先来看看<code>系统变量</code>中有哪些内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">&gt;&gt;&gt; dir(__builtins__)</span><br><span class="line">[&#39;ArithmeticError&#39;, &#39;AssertionError&#39;, &#39;AttributeError&#39;, &#39;BaseException&#39;, &#39;BlockingIOError&#39;, &#39;BrokenPipeError&#39;, &#39;BufferError&#39;, &#39;BytesWarning&#39;, &#39;ChildProcessError&#39;, &#39;ConnectionAbortedError&#39;, &#39;ConnectionError&#39;, &#39;ConnectionRefusedError&#39;, &#39;ConnectionResetError&#39;, &#39;DeprecationWarning&#39;, &#39;EOFError&#39;, &#39;Ellipsis&#39;, &#39;EnvironmentError&#39;, &#39;Exception&#39;, &#39;False&#39;, &#39;FileExistsError&#39;, &#39;FileNotFoundError&#39;, &#39;FloatingPointError&#39;, &#39;FutureWarning&#39;, &#39;GeneratorExit&#39;, &#39;IOError&#39;, &#39;ImportError&#39;, &#39;ImportWarning&#39;, &#39;IndentationError&#39;, &#39;IndexError&#39;, &#39;InterruptedError&#39;, &#39;IsADirectoryError&#39;, &#39;KeyError&#39;, &#39;KeyboardInterrupt&#39;, &#39;LookupError&#39;, &#39;MemoryError&#39;, &#39;ModuleNotFoundError&#39;, &#39;NameError&#39;, &#39;None&#39;, &#39;NotADirectoryError&#39;, &#39;NotImplemented&#39;, &#39;NotImplementedError&#39;, &#39;OSError&#39;, &#39;OverflowError&#39;, &#39;PendingDeprecationWarning&#39;, &#39;PermissionError&#39;, &#39;ProcessLookupError&#39;, &#39;RecursionError&#39;, &#39;ReferenceError&#39;, &#39;ResourceWarning&#39;, &#39;RuntimeError&#39;, &#39;RuntimeWarning&#39;, &#39;StopAsyncIteration&#39;, &#39;StopIteration&#39;, &#39;SyntaxError&#39;, &#39;SyntaxWarning&#39;, &#39;SystemError&#39;, &#39;SystemExit&#39;, &#39;TabError&#39;, &#39;TimeoutError&#39;, &#39;True&#39;, &#39;TypeError&#39;, &#39;UnboundLocalError&#39;, &#39;UnicodeDecodeError&#39;, &#39;UnicodeEncodeError&#39;, &#39;UnicodeError&#39;, &#39;UnicodeTranslateError&#39;, &#39;UnicodeWarning&#39;, &#39;UserWarning&#39;, &#39;ValueError&#39;, &#39;Warning&#39;, &#39;ZeroDivisionError&#39;, &#39;__build_class__&#39;, &#39;__debug__&#39;, &#39;__doc__&#39;, &#39;__import__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;abs&#39;, &#39;all&#39;, &#39;any&#39;, &#39;ascii&#39;, &#39;bin&#39;, &#39;bool&#39;, &#39;breakpoint&#39;, &#39;bytearray&#39;, &#39;bytes&#39;, &#39;callable&#39;, &#39;chr&#39;, &#39;classmethod&#39;, &#39;compile&#39;, &#39;complex&#39;, &#39;copyright&#39;, &#39;credits&#39;, &#39;delattr&#39;, &#39;dict&#39;, &#39;dir&#39;, &#39;divmod&#39;, &#39;enumerate&#39;, &#39;eval&#39;, &#39;exec&#39;, &#39;exit&#39;, &#39;filter&#39;, &#39;float&#39;, &#39;format&#39;, &#39;frozenset&#39;, &#39;getattr&#39;, &#39;globals&#39;, &#39;hasattr&#39;, &#39;hash&#39;, &#39;help&#39;, &#39;hex&#39;, &#39;id&#39;, &#39;input&#39;, &#39;int&#39;, &#39;isinstance&#39;, &#39;issubclass&#39;, &#39;iter&#39;, &#39;len&#39;, &#39;license&#39;, &#39;list&#39;, &#39;locals&#39;, &#39;map&#39;, &#39;max&#39;, &#39;memoryview&#39;, &#39;min&#39;, &#39;next&#39;, &#39;object&#39;, &#39;oct&#39;, &#39;open&#39;, &#39;ord&#39;, &#39;pow&#39;, &#39;print&#39;, &#39;property&#39;, &#39;quit&#39;, &#39;range&#39;, &#39;repr&#39;, &#39;reversed&#39;, &#39;round&#39;, &#39;set&#39;, &#39;setattr&#39;, &#39;slice&#39;, &#39;sorted&#39;, &#39;staticmethod&#39;, &#39;str&#39;, &#39;sum&#39;, &#39;super&#39;, &#39;tuple&#39;, &#39;type&#39;, &#39;vars&#39;, &#39;zip&#39;]</span><br></pre></td></tr></table></figure></li><li>很多内容直接找到<code>__name__</code> 吧<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTgxYzIzNzVhMDQxMDg3NjIucG5n?x-oss-process=image/format,png" alt=""></li><li>可见<code>__name__</code>就是<code>内置的系统变量</code>而已<h5 id="2-举个栗子"><a href="#2-举个栗子" class="headerlink" title="2. 举个栗子"></a>2. 举个栗子</h5></li><li>来建个新的脚本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">(yiluo) ➜  Code touch build.py</span><br><span class="line">(yiluo) ➜  Code vim build.py</span><br></pre></td></tr></table></figure></li><li>脚本中写入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"></span><br><span class="line">print(&#39;__name__究竟是什么? &#39;)</span><br><span class="line">print(&#39;该脚本的 __name__值是：&#123;&#125;&#39;.format(__name__))</span><br></pre></td></tr></table></figure></li><li>运行一下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python build.py</span><br><span class="line">__name__究竟是什么?</span><br><span class="line">该脚本的 __name__值是：__main__</span><br></pre></td></tr></table></figure></li><li>打印出的内容很清晰的说明当下脚本的<code>__name__</code>值是 <code>__main__</code></li><li>这就说明单独运行脚本的时候，<code>__name__</code>值就是是 <code>__main__</code><h5 id="3-作为模块导入时"><a href="#3-作为模块导入时" class="headerlink" title="3.作为模块导入时"></a>3.作为模块导入时</h5></li><li>在 <code>Python</code> 中一个<code>.py 文件</code>就是一个<code>模块</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python3</span><br><span class="line">Python 3.7.5 (default, Nov 29 2019, 14:32:46)</span><br><span class="line">[Clang 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; import build</span><br><span class="line">__name__究竟是什么?</span><br><span class="line">该脚本的 __name__值是：build</span><br></pre></td></tr></table></figure></li><li><code>__name__</code> 的值变成了 <code>build</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTdiYTRkNDllMjQ4MzFiNzIuanBlZw?x-oss-process=image/format,png" alt=""></li></ul><h5 id="4-实际应用"><a href="#4-实际应用" class="headerlink" title="4.实际应用"></a>4.实际应用</h5><ul><li><p>那么利用这点，我们如何实际应用，使导入代码的时候不被执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"></span><br><span class="line">print(&#39;__name__究竟是什么? &#39;)</span><br><span class="line">print(&#39;该脚本的 __name__值是：&#123;&#125;&#39;.format(__name__))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    print(&#39;我很倔强，我被导入的时候不会被打印！&#39;)</span><br></pre></td></tr></table></figure></li><li><p>来单独运行下<code>build</code>脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python build.py</span><br><span class="line">__name__究竟是什么?</span><br><span class="line">该脚本的 __name__值是：__main__</span><br><span class="line">我很倔强，我被导入的时候不会被打印！</span><br></pre></td></tr></table></figure></li><li><p>看到最后的<code>print</code>打印了出来</p></li><li><p>如果被导入呢？ </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python3</span><br><span class="line">Python 3.7.5 (default, Nov 29 2019, 14:32:46)</span><br><span class="line">[Clang 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; import build</span><br><span class="line">__name__究竟是什么?</span><br><span class="line">该脚本的 __name__值是：build</span><br></pre></td></tr></table></figure></li><li><p>当<code>__name__</code>的值不是<code>__main__</code>的时候就不会打印出来了</p></li><li><p>再新建一个其它的文件最后验证下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code touch test.py</span><br><span class="line">(yiluo) ➜  Code vim test.py</span><br></pre></td></tr></table></figure></li><li><p>键入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"></span><br><span class="line">import build</span><br><span class="line">print(&#39;test脚本自己打印&#39;)</span><br><span class="line">&#96;&#96;</span><br></pre></td></tr></table></figure></li><li><p>命令行运行下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(yiluo) ➜  Code python test.py</span><br><span class="line">__name__究竟是什么?</span><br><span class="line">该脚本的 __name__值是：build</span><br><span class="line">test脚本自己打印</span><br></pre></td></tr></table></figure></li><li><p>可见并没有打印出<code>“我很倔强，我被导入的时候不会被打印！”</code></p><h5 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h5></li><li><p>当脚本下面<code>if __name__ == &quot;__main__&quot;:</code>码入代码时，被导入到其它脚本中的时候不会被执行</p><h5 id="6-模块"><a href="#6-模块" class="headerlink" title="6. 模块"></a>6. 模块</h5></li><li><p>Python 的一个优势就是拥有丰富的库，库是具有相关功能模块的集合，也就是常提到的标准库、第三方库以及自定义模块，在写代码的过程中会经常被引用到</p><h5 id="7-引入模块"><a href="#7-引入模块" class="headerlink" title="7. 引入模块"></a>7. 引入模块</h5></li><li><p>一个 .py 文件就被称为一个模块(Module)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import module</span><br><span class="line">from module import *</span><br></pre></td></tr></table></figure><h5 id="8-推荐引入顺序"><a href="#8-推荐引入顺序" class="headerlink" title="8. 推荐引入顺序"></a>8. 推荐引入顺序</h5><p>标准库 &gt; 第三方 &gt; 自定义</p><h5 id="9-模块搜索路径"><a href="#9-模块搜索路径" class="headerlink" title="9. 模块搜索路径"></a>9. 模块搜索路径</h5></li><li><p>Python 解释器先在当前包中查找模块，如果找不到就会在内置模块中查找，如果依然找不到就会按 sys.path 给定的路径查找对应的模块文件</p><h5 id="10-模块与包"><a href="#10-模块与包" class="headerlink" title="10. 模块与包"></a>10. 模块与包</h5></li><li><p>包是一个文件夹，在其中可以定义多个模块或是多个子包。通常 Python 的第三方工具或是应用都是以包的形式发布的</p></li><li><p>在 Python 中文件夹可以被识别成一个包，前提是这个文件夹中有一个 <code>__init__.py</code> 文件</p></li><li><p>Python 的 <code>-m</code>参数用于将一个模块或包当作一个脚本运行</p></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p><blockquote><p>欢迎下方【戳一下】【点赞】<br>  Author：伊洛Yiluo<br>  愿你享受每一天，Just Enjoy !</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python3--条件判断与循环控制</title>
    <link href="https://yiluotalk.com/2020/08/24/Python3--%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E4%B8%8E%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6/"/>
    <id>https://yiluotalk.com/2020/08/24/Python3--%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E4%B8%8E%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6/</id>
    <published>2020-08-24T02:54:59.000Z</published>
    <updated>2020-08-24T02:54:08.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWZjZjY0OGNjZDhhZjVlNTgucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="1-条件判断与循环控制"><a href="#1-条件判断与循环控制" class="headerlink" title="1.条件判断与循环控制"></a>1.条件判断与循环控制</h5><ul><li>语句关键字  if、 else、 elif 、<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">&gt;&gt;&gt; password &#x3D; 123456</span><br><span class="line">&gt;&gt;&gt; input_password &#x3D; int(input(&#39;Please input password to login: &#39;))</span><br><span class="line">Please input password to login: 654321</span><br><span class="line">&gt;&gt;&gt; if input_password &#x3D;&#x3D; password:</span><br><span class="line">...     print(&#39;login successfully!&#39;)</span><br><span class="line">... else:</span><br><span class="line">...     print(&#39;Password ERROR, Please Retry~&#39;)</span><br><span class="line">...</span><br><span class="line">Password ERROR, Please Retry~</span><br></pre></td></tr></table></figure><h5 id="2-if-中常用到的运算符"><a href="#2-if-中常用到的运算符" class="headerlink" title="2. if 中常用到的运算符"></a>2. if 中常用到的运算符</h5></li><li>小于：&lt;</li><li>小于或等于：&lt;=</li><li>大于：&gt;</li><li>大于或等于：&gt;=</li><li>等于： ==</li><li>不等于：!=<h5 id="3-可以使用-and-和-or-来对符合的条件进行控制"><a href="#3-可以使用-and-和-or-来对符合的条件进行控制" class="headerlink" title="3. 可以使用 and 和 or 来对符合的条件进行控制"></a>3. 可以使用 and 和 or 来对符合的条件进行控制</h5><h5 id="4-pass-关键字"><a href="#4-pass-关键字" class="headerlink" title="4. pass 关键字"></a>4. pass 关键字</h5></li><li>程序执行遇到 pass 就会跳过这里的代码块继续执行后面的代码<h5 id="5-循环语句"><a href="#5-循环语句" class="headerlink" title="5. 循环语句"></a>5. 循环语句</h5></li><li>for 循环<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name_list &#x3D; [&#39;Yiluo&#39;, &#39;Tom&#39;, &#39;Lucy&#39;, &#39;Joe&#39;]</span><br><span class="line">&gt;&gt;&gt; for _ in name_list:</span><br><span class="line">...     print(_)</span><br><span class="line">...</span><br><span class="line">Yiluo</span><br><span class="line">Tom</span><br><span class="line">Lucy</span><br><span class="line">Joe</span><br></pre></td></tr></table></figure></li><li>内置函数 range()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for i in range(8):</span><br><span class="line">...     print(i)</span><br><span class="line">...</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td></tr></table></figure></li><li>while 循环<br>条件不能够达成则停止循环<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; 10</span><br><span class="line">&gt;&gt;&gt; while a &gt;0:</span><br><span class="line">...     print(a)</span><br><span class="line">...     a -&#x3D;1</span><br><span class="line">...</span><br><span class="line">10</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li>break 和 continue 两个关键字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; 10</span><br><span class="line">&gt;&gt;&gt; while a &gt;0:</span><br><span class="line">...     if a &#x3D;&#x3D; 3:</span><br><span class="line">...         break</span><br><span class="line">...     print(a)</span><br><span class="line">...     a -&#x3D;1</span><br><span class="line">...</span><br><span class="line">10</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">4</span><br></pre></td></tr></table></figure>a 等于 3的时候 break<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for i in range(10):</span><br><span class="line">...     if i &#x3D;&#x3D; 3:</span><br><span class="line">...        continue</span><br><span class="line">...     print(i)</span><br><span class="line">...</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure>i 等于3 的时候被忽略</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p><blockquote><p>欢迎下方【戳一下】【点赞】<br>  Author：伊洛Yiluo<br>  愿你享受每一天，Just Enjoy !</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python2--字符串及运算符</title>
    <link href="https://yiluotalk.com/2020/08/24/Python2--%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8A%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://yiluotalk.com/2020/08/24/Python2--%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8A%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2020-08-24T02:53:59.000Z</published>
    <updated>2020-08-24T02:53:38.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWZjZjY0OGNjZDhhZjVlNTgucG5n?x-oss-process=image/format,png" alt=""><br>人生苦短，我用 Python</p><h5 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1. 字符串"></a>1. 字符串</h5><ul><li>双引号或单引号标示<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">&gt;&gt;&gt; account &#x3D; &#39;Yiluo&#39;</span><br><span class="line">&gt;&gt;&gt; my_web &#x3D; &#39;https:&#x2F;&#x2F;yiluotalk.com&#x2F;&#39;</span><br></pre></td></tr></table></figure></li><li>字符串拼接<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; account + &#39; &#39; + my_web</span><br><span class="line">&#39;Yiluo https:&#x2F;&#x2F;yiluotalk.com&#x2F;&#39;</span><br></pre></td></tr></table></figure></li><li><code>\</code>来去除引号标示字符串的特殊作用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#39;I &#39;m fine&#39;)</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1</span><br><span class="line">    print(&#39;I &#39;m fine&#39;)</span><br><span class="line">              ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line">&gt;&gt;&gt; print(&#39;I \&#39;m fine&#39;)</span><br><span class="line">I &#39;m fine</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h5 id="2-字符串索引"><a href="#2-字符串索引" class="headerlink" title="2.字符串索引"></a>2.字符串索引</h5></li><li>从左向右，索引从0开始</li><li>从右向左，索引从-1开始<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; my_web &#x3D; &#39;https:&#x2F;&#x2F;yiluotalk.com&#x2F;&#39;</span><br><span class="line">&gt;&gt;&gt; my_web[0]</span><br><span class="line">&#39;h&#39;</span><br><span class="line">&gt;&gt;&gt; my_web[1]</span><br><span class="line">&#39;t&#39;</span><br><span class="line">&gt;&gt;&gt; my_web[-1]</span><br><span class="line">&#39;&#x2F;&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> +---+---+---+---+---+---+</span><br><span class="line"> | P | y | t | h | o | n |</span><br><span class="line"> +---+---+---+---+---+---+</span><br><span class="line"> 0   1   2   3   4   5   6</span><br><span class="line">-6  -5  -4  -3  -2  -1</span><br></pre></td></tr></table></figure><h5 id="3-字符串切片"><a href="#3-字符串切片" class="headerlink" title="3.字符串切片"></a>3.字符串切片</h5></li><li>[头索:尾索:步长]<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 我的公众号&#x3D; &#39;伊洛的小屋&#39;</span><br><span class="line">&gt;&gt;&gt; 我的公众号[0:1]</span><br><span class="line">&#39;伊&#39;</span><br><span class="line">&gt;&gt;&gt; 我的公众号[0:2]</span><br><span class="line">&#39;伊洛&#39;</span><br><span class="line">&gt;&gt;&gt; 我的公众号[0:5]</span><br><span class="line">&#39;伊洛的小屋&#39;</span><br><span class="line">&gt;&gt;&gt; 我的公众号[0:5:2]</span><br><span class="line">&#39;伊的屋&#39;</span><br><span class="line"># 反取</span><br><span class="line">&gt;&gt;&gt; 我的公众号[::-1]</span><br><span class="line">&#39;屋小的洛伊&#39;</span><br></pre></td></tr></table></figure><h5 id="4-字符串常用方法"><a href="#4-字符串常用方法" class="headerlink" title="4. 字符串常用方法"></a>4. 字符串常用方法</h5></li><li>split  默认空格切，也可传参数切分<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; my_web &#x3D; &#39;Yiluo,https:&#x2F;&#x2F;yiluotalk.com&#x2F;&#39;</span><br><span class="line">&gt;&gt;&gt; my_web.split(&#39;,&#39;)</span><br><span class="line">[&#39;Yiluo&#39;, &#39;https:&#x2F;&#x2F;yiluotalk.com&#x2F;&#39;]</span><br><span class="line">&gt;&gt;&gt; my_web.split(&#39;,&#39;)[0]</span><br><span class="line">&#39;Yiluo&#39;</span><br><span class="line">&gt;&gt;&gt; my_web.split(&#39;,&#39;)[1]</span><br><span class="line">&#39;https:&#x2F;&#x2F;yiluotalk.com&#x2F;&#39;</span><br></pre></td></tr></table></figure></li><li>strip 默认删除字符串首尾空格及换行，传参会删除参数中的字符（限于首尾）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; my_web &#x3D; &#39;   https:&#x2F;&#x2F;yiluotalk.com&#x2F;   &#39;</span><br><span class="line">&gt;&gt;&gt; my_web</span><br><span class="line">&#39;   https:&#x2F;&#x2F;yiluotalk.com&#x2F;   &#39;</span><br><span class="line">&gt;&gt;&gt; my_web.strip()</span><br><span class="line">&#39;https:&#x2F;&#x2F;yiluotalk.com&#x2F;&#39;</span><br><span class="line">&gt;&gt;&gt; my_web &#x3D; &#39;https:&#x2F;&#x2F;yiluotalk.com&#x2F;&#39;</span><br><span class="line">&gt;&gt;&gt; my_web.strip(&#39;https:&#x2F;&#x2F;&#x2F;&#39;)</span><br><span class="line">&#39;yiluotalk.com&#39;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="5-注释"><a href="#5-注释" class="headerlink" title="5. 注释"></a>5. 注释</h5><ul><li>执行程序的时候注释内容会被忽略<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 我是注释</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">单引号注释</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(&#39;hello, Yiluo&#39;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">双引号注释</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h5 id="6-format-格式化字符串"><a href="#6-format-格式化字符串" class="headerlink" title="6.format 格式化字符串"></a>6.format 格式化字符串</h5></li><li>str.format()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;&#125;,&#123;&#125;&#39;.format(&#39;Hello&#39;, &#39;Yiluo&#39;)</span><br><span class="line">&#39;Hello,Yiluo&#39;</span><br></pre></td></tr></table></figure><h5 id="6-运算符"><a href="#6-运算符" class="headerlink" title="6.运算符"></a>6.运算符</h5></li><li><code>+</code> 两个对象相加</li><li><code>-</code> 得到负数或是一个数减去另一个数</li><li><code>*</code> 两个数相乘或是返回一个被重复若干次的字符串</li><li><code>/</code>  x 除以 y</li><li><code>%</code> 返回除法的余数</li><li><code>**</code> 返回 x 的 y 次幂</li><li><code>//</code>  返回商的整数部分（向下取整）<h5 id="7-比较运算符"><a href="#7-比较运算符" class="headerlink" title="7.比较运算符"></a>7.比较运算符</h5></li><li><code>==</code> 等于：比较对象是否相等</li><li><code>!=</code> 不等于：比较两个对象是否不相等</li><li><code>&gt;</code> 大于：返回 x 是否大于 y</li><li><code>&lt;</code> 小于：返回 x 是否小于 y</li><li><code>&gt;=</code> 大于等于：返回 x 是否大于等于 y</li><li><code>&lt;=</code> 小于等于：返回 x 是否小于等于 y<h5 id="8-赋值运算符"><a href="#8-赋值运算符" class="headerlink" title="8.赋值运算符"></a>8.赋值运算符</h5></li><li><code>=</code> c = a + b 将 a + b 的运算结果赋值为 c</li><li><code>+=</code> c += a 等效于 c = c + a</li><li><code>-=</code>  c -= a 等效于 c = c - a</li><li><code>*=</code> c *= a 等效于 c = c * a</li><li><code>/=</code> c /= a 等效于 c = c / a</li><li><code>%=</code> c %= a 等效于 c = c % a</li><li><code>**=</code> c *<em>= a 等效于 c = c *</em> a</li><li><code>//=</code>  c //= a 等效于 c = c // a<h5 id="9-逻辑运算符"><a href="#9-逻辑运算符" class="headerlink" title="9.逻辑运算符"></a>9.逻辑运算符</h5></li><li><code>and</code> 布尔 “与” </li><li><code>or</code> 布尔 “或” </li><li><code>not</code> 布尔 “非”<h5 id="10-成员运算符"><a href="#10-成员运算符" class="headerlink" title="10.成员运算符"></a>10.成员运算符</h5></li><li><code>in</code> 如果在指定的序列中找到值返回 True，否则返回 False</li><li><code>not in</code> 如果在指定的序列中没有找到值返回 True，否则返回 False<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; list &#x3D; [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; 1 in list</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 5 in list</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 5 not in list</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h5 id="11-身份运算符"><a href="#11-身份运算符" class="headerlink" title="11.身份运算符"></a>11.身份运算符</h5></li><li><code>is</code> is 是判断两个标识符是不是引用自一个对象</li><li><code>is not</code>  is not 是判断两个标识符是不是引用自不同对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; name &#x3D; &#39;Yiluo&#39;</span><br><span class="line">&gt;&gt;&gt; id(name)</span><br><span class="line">4408381744</span><br><span class="line">&gt;&gt;&gt; name2 &#x3D; &#39;Tom&#39;</span><br><span class="line">&gt;&gt;&gt; id(name2)</span><br><span class="line">4410061168</span><br><span class="line">&gt;&gt;&gt; name is name2</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; name is not name2</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; name3 &#x3D; &#39;Yiluo&#39;</span><br><span class="line">&gt;&gt;&gt; id(name3)</span><br><span class="line">4408381744</span><br><span class="line">&gt;&gt;&gt; name is name3</span><br><span class="line">True</span><br></pre></td></tr></table></figure><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></li></ul><blockquote><p>欢迎下方【戳一下】【点赞】<br>  Author：伊洛Yiluo<br>  愿你享受每一天，Just Enjoy !</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python1--简介及基础语法</title>
    <link href="https://yiluotalk.com/2020/08/24/Python1--%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://yiluotalk.com/2020/08/24/Python1--%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2020-08-24T02:52:59.000Z</published>
    <updated>2020-08-24T02:52:45.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLWZjZjY0OGNjZDhhZjVlNTgucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="0-简介"><a href="#0-简介" class="headerlink" title="0. 简介"></a>0. 简介</h5><p>Python易于学习的编程语言，有很多现成的第三方库可以调用，不用重复造轮子，老话说：“人生苦短，我用 Python”</p><h5 id="1-安装Python"><a href="#1-安装Python" class="headerlink" title="1. 安装Python"></a>1. 安装Python</h5><p><code>Mac</code>：brew install python3<br><code>Window</code>： 官网下载–图形页面一步步点，也可以直接在<a href="https://docs.python.org/3/using/windows.html#windows-store" target="_blank" rel="noopener">Microsoft Store</a>下载安装</p><h5 id="2-启动Python"><a href="#2-启动Python" class="headerlink" title="2. 启动Python"></a>2. 启动Python</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ python3</span><br><span class="line">Python 3.7.5 (default, Nov 29 2019, 14:32:46)</span><br><span class="line">[Clang 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><ul><li>以上启动的是Python的交互模式，前期学习更推荐使用ipython交互，可以直接用pip 安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ipython</span><br></pre></td></tr></table></figure></li><li>字符编码<br>默认情况下，Python文件采用utf-8编码，通过这样可以讲世界上大多数语言的字符同时用于字符串文字，标识符和注释中，尽管标准库讲ASCII字符用作标识符，这是任何可移植代码都遵循的约定<br>如果需要声明默认编码以外的其他编码，应该在文件的第一行添加一个特殊的注释<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: cp1252 -*-</span><br></pre></td></tr></table></figure>#####3. Hello World<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">&gt;&gt;&gt; print(&#39;Hello World&#39;)</span><br><span class="line">Hello World</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>#####4. 数据类型</li><li>int(整数) /float(浮点数)、字符串、布尔值、None、列表、元组、字典、集合…</li></ul><ol><li>None 代表的是空、编程的世界里空并不就是<code>0</code>的意思<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># type是 Python内置函数</span><br><span class="line"># 伊洛Yiluo</span><br><span class="line"># https:&#x2F;&#x2F;yiluotalk.com&#x2F;</span><br><span class="line">&gt;&gt;&gt; type(None)</span><br><span class="line">&lt;class &#39;NoneType&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(0)</span><br><span class="line">&lt;class &#39;int&#39;&gt;</span><br></pre></td></tr></table></figure></li><li>布尔值 代表 “真”、“假”<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># bool 是 Python内置函数</span><br><span class="line">&gt;&gt;&gt; bool(1)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(0)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; bool(False)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; bool(True)</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li>int整数 如1、2、5</li><li>float浮点数 如3.1415926、 1.2</li><li>str 字符串 如‘Tom’、‘Hello World’</li></ol><ul><li>经常被用到，Python还可以操纵字符串，该字符串可以通过多种方式表示<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#39;spam eggs&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;doesn\&#39;t&#39;  # 通过&#39;\&#39;  转义单引号</span><br><span class="line">&quot;doesn&#39;t&quot;</span><br><span class="line">&gt;&gt;&gt; &quot;doesn&#39;t&quot;  # 通过双引号替代</span><br><span class="line">&quot;doesn&#39;t&quot;</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li>list列表 如[1, 2, 3, 4, 5]</li><li>tuple元组 如（6，7，8，9，10）</li><li>dic 字典 如 dict_score = {‘Tom’: 98, ‘Joe’: 88, ‘Wade’: ‘99’}</li><li>set 集合 stock = {‘Apple’,  ‘Tencent’,  ‘Alibaba’,  ‘Amazon’,  ‘Google’,  ‘Tesla’}</li></ol><ul><li>尝试一些数据运算<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 2+ 2</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; 50 - 2*5</span><br><span class="line">40</span><br><span class="line">&gt;&gt;&gt; (50 - 10*3) &#x2F;2</span><br><span class="line">10.0</span><br><span class="line">&gt;&gt;&gt; 4 &#x2F; 2 # 除法总是返回浮点数</span><br><span class="line">2.0</span><br><span class="line">&gt;&gt;&gt; 17 &#x2F;&#x2F; 3 # 地板除舍弃了小数</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; 17 % 3 # % 返回余数</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h5 id="5-变量"><a href="#5-变量" class="headerlink" title="5. 变量"></a>5. 变量</h5></li><li>每个变量在内存中创建通过 <code>=</code> 赋值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># format 格式化输出</span><br><span class="line">&gt;&gt;&gt; stock &#x3D; &#39;Apple&#39;  # Apple 赋值给股票 stock </span><br><span class="line">&gt;&gt;&gt; print(&#39;I buy &#123;&#125;&#39;.format(stock))</span><br><span class="line">I buy Apple</span><br></pre></td></tr></table></figure></li><li>变量是有命名规则的，要做到命名有意义</li><li>等号（=）用于为变量分配值<h5 id="6-缩进"><a href="#6-缩进" class="headerlink" title="6. 缩进"></a>6. 缩进</h5>官方代码规范<br><a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-0008/</a></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxLTBkOTg5NzYzZmIyNmMxMjAuanBn?x-oss-process=image/format,png" alt="关注公众号获取更多内容"></p><blockquote><p>欢迎下方【戳一下】【点赞】<br>  Author：伊洛Yiluo<br>  愿你享受每一天，Just Enjoy !</p></blockquote></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "18933-1576860332987-627",        "name": "伊洛的小屋",        "qrcode": "https://open.weixin.qq.com/qr/code?username=gh_7972411ff70e",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;vip-container&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81OTU5NTUxL
      
    
    </summary>
    
    
      <category term="Python基础" scheme="https://yiluotalk.com/categories/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Zero to Hero" scheme="https://yiluotalk.com/tags/Zero-to-Hero/"/>
    
      <category term="Python基础" scheme="https://yiluotalk.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
